/**
 * üìä INTEGRATED DASHBOARD JAVASCRIPT
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Google Sheets API
 */

class Dashboard {
    constructor() {
        this.apiBaseUrl = window.location.origin;
        this.refreshInterval = null;
        this.isLoading = false;
        this.currentDisplayDate = new Date();
        this.dashboardData = null;
        this.demoEvents = [];
        this.demoSubscriptions = [];
        
        this.init();
    }
    
    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
        this.initTelegramWebApp();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.bindEvents();
        
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.loadDashboardData();
    }
    
    initTelegramWebApp() {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#151634');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#ffffff');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            tg.ready();
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            tg.expand();
            
            console.log('‚úÖ Telegram Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('‚ÑπÔ∏è –ó–∞–ø—É—Å–∫ –≤–Ω–µ Telegram Mini App');
        }
    }
    
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                this.currentDisplayDate.setDate(this.currentDisplayDate.getDate() - 7);
                this.updateDashboard();
            });
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                this.currentDisplayDate.setDate(this.currentDisplayDate.getDate() + 7);
                this.updateDashboard();
            });
        }

        // –§–∏–ª—å—Ç—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ populateStudentFilter()

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('event-modal');
        const modalClose = document.getElementById('modal-close');
        if (modalClose) {
            modalClose.addEventListener('click', () => modal.classList.add('hidden'));
        }
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.add('hidden');
                }
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
                this.loadDashboardData();
            }
        });
    }

    async loadDashboardData() {
        if (this.isLoading) {
            console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
            return;
        }
        
        this.isLoading = true;
        this.showPreloader();
        
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–í—Å–µ")
            const currentFilter = '–í—Å–µ';
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [filtersResponse, metricsResponse, subscriptionsResponse, calendarResponse] = await Promise.all([
                fetch(`${this.apiBaseUrl}/api/filters`),
                fetch(`${this.apiBaseUrl}/api/metrics?student=${encodeURIComponent(currentFilter)}`),
                fetch(`${this.apiBaseUrl}/api/subscriptions?student=${encodeURIComponent(currentFilter)}`),
                fetch(`${this.apiBaseUrl}/api/calendar?student=${encodeURIComponent(currentFilter)}`)
            ]);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
            if (!filtersResponse.ok || !metricsResponse.ok || !subscriptionsResponse.ok || !calendarResponse.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            // –ü–∞—Ä—Å–∏–º JSON
            const filters = await filtersResponse.json();
            const metrics = await metricsResponse.json();
            const subscriptions = await subscriptionsResponse.json();
            const calendar = await calendarResponse.json();
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            console.log('üìä Metrics:', metrics);
            console.log('üìà Subscriptions:', subscriptions);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.dashboardData = {
                filters: filters.filters || ['–í—Å–µ'],
                metrics: metrics,
                subscriptions: subscriptions.subscriptions || [],
                calendar: calendar.events || []
            };
            
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ dashboardData:', this.dashboardData);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.convertApiDataToEvents();
            
            // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            console.log('üîÑ –í—ã–∑–æ–≤ updateApiMetrics() –Ω–∞–ø—Ä—è–º—É—é');
            this.updateApiMetrics();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            console.log('üîÑ –í—ã–∑–æ–≤ updateDashboard()');
            this.updateDashboard();
            
            console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.loadDemoData();
        } finally {
            this.isLoading = false;
            this.hidePreloader();
        }
    }

    getCurrentStudentFilter() {
        const filterSelect = document.getElementById('studentFilter');
        return filterSelect ? filterSelect.value : '–í—Å–µ';
    }

    convertApiDataToEvents() {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        this.demoEvents = [];
        this.demoSubscriptions = [];
        
        if (!this.dashboardData) return;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        if (this.dashboardData.calendar && Array.isArray(this.dashboardData.calendar)) {
            this.demoEvents = this.dashboardData.calendar.map(event => ({
                date: event.date,
                time: event.time || '09:00',
                duration: 1.5, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.5 —á–∞—Å–∞
                title: event.title || `${event.circle || '–ó–∞–Ω—è—Ç–∏–µ'} - ${event.child || '–£—á–µ–Ω–∏–∫'}`,
                status: this.mapStatus(event.status || event.attendance)
            }));
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        if (this.dashboardData.subscriptions && Array.isArray(this.dashboardData.subscriptions)) {
            this.demoSubscriptions = this.dashboardData.subscriptions.map(sub => ({
                id: sub.id || 'unknown',
                title: sub.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
                totalLessons: sub.total_lessons || 0,
                completedLessons: sub.completed_lessons || 0,
                remainingLessons: sub.remaining_lessons || 0,
                progressPercent: sub.progress_percent || 0,
                missedThisMonth: sub.missed_this_month || 0,
                lessons: sub.lessons || []
            }));
        }
    }

    loadDemoData() {
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
        this.demoEvents = [
            { date: '2025-10-15', time: '10:00', duration: 1.5, title: '–§—É—Ç–±–æ–ª - –ú–∞—Ä–∫', status: '–ü–æ—Å–µ—â–µ–Ω–∏–µ' },
            { date: '2025-10-16', time: '11:00', duration: 1, title: '–õ–æ–≥–æ–ø–µ–¥ - –ê–ª–∏—Å–∞', status: '–ü–æ—Å–µ—â–µ–Ω–∏–µ' },
            { date: '2025-10-17', time: '12:30', duration: 2, title: '–†–∏—Å–æ–≤–∞–Ω–∏–µ - –ú–∞–π—è', status: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' },
        ];
        
        this.demoSubscriptions = [
            { 
                id: 'demo1',
                title: '–§—É—Ç–±–æ–ª - –ú–∞—Ä–∫', 
                lessons: [
                    { date: '2025-10-15', startTime: '10:00', endTime: '11:30', status: '–ü–æ—Å–µ—â–µ–Ω–∏–µ'},
                    { date: '2025-10-17', startTime: '10:00', endTime: '11:30', status: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'},
                ]
            }
        ];
        
        // –§–∏–ª—å—Ç—Ä —É–±—Ä–∞–Ω
        this.updateDashboard();
    }

    calculateDuration(startTime, endTime) {
        if (!startTime || !endTime) return 1;
        
        const [startHour, startMin] = startTime.split(':').map(Number);
        const [endHour, endMin] = endTime.split(':').map(Number);
        
        const startMinutes = startHour * 60 + startMin;
        const endMinutes = endHour * 60 + endMin;
        
        return (endMinutes - startMinutes) / 60;
    }

    mapStatus(status) {
        const statusMap = {
            '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª': '–ü–æ—Å–µ—â–µ–Ω–∏–µ',
            '–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª': '–ü—Ä–æ–ø—É—Å–∫',
            '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            '‚úîÔ∏è': '–ü–æ—Å–µ—â–µ–Ω–∏–µ',
            '‚úñÔ∏è': '–ü—Ä–æ–ø—É—Å–∫'
        };
        return statusMap[status] || '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
    }
    
    updateDashboard() {
        // –ö–∞–ª–µ–Ω–¥–∞—Ä—å —É–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Google Calendar
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        this.renderSubscriptionsProgress();
        // –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ updateApiMetrics() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    }

    updateApiMetrics() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
        if (!this.dashboardData || !this.dashboardData.metrics) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫');
            return;
        }
        
        const metrics = this.dashboardData.metrics;
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫:', metrics);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –∏–∑ HTML)
        this.updateElement('kpi-scheduled', metrics.planned || 0);
        this.updateElement('kpi-attended', metrics.attended || 0);
        this.updateElement('kpi-skipped', metrics.missed || 0);
        this.updateElement('kpi-rate', `${Math.round(metrics.attendance_rate || 0)}%`);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É
        const formatCurrency = (value) => new Intl.NumberFormat('ru-RU').format(value || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –∏–∑ HTML)
        this.updateElement('kpi-budget-month', formatCurrency(metrics.budget_month));
        this.updateElement('kpi-paid-month', formatCurrency(metrics.paid_month));
        this.updateElement('kpi-budget-week', formatCurrency(metrics.budget_week));
        this.updateElement('kpi-paid-week', formatCurrency(metrics.paid_week));
        
        console.log('‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }
    
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç #${id} = ${value}`);
        } else {
            console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        }
    }

    populateStudentFilter() {
        const studentFilter = document.getElementById('student-filter');
        if (!studentFilter) return;
        
        studentFilter.innerHTML = '';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const filters = this.dashboardData?.filters || ['–í—Å–µ'];
        
        filters.forEach(filterOption => {
            const option = document.createElement('option');
            option.value = filterOption;
            option.textContent = filterOption;
            studentFilter.appendChild(option);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
        studentFilter.addEventListener('change', () => {
            console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞:', studentFilter.value);
            this.loadDashboardData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        });
    }

    renderCalendar() {
        const calendarBody = document.getElementById('calendar-body');
        if (!calendarBody) return;
        
        calendarBody.innerHTML = '';
        this.renderWeekView(calendarBody);
    }

    renderWeekView(container) {
        const hourHeight = 60;
        container.innerHTML = `
            <div class="flex text-xs text-center text-gray-400 mb-2 py-2 border-y border-gray-700">
                <div class="w-14 flex-shrink-0"></div>
                <div id="week-header-grid" class="flex-grow grid grid-cols-7"></div>
            </div>
            <div class="overflow-x-auto">
                <div style="min-width: 800px;">
                    <div class="week-container">
                        <div class="timeline"></div>
                        <div class="week-grid"></div>
                    </div>
                </div>
            </div>
        `;
        
        const weekGrid = container.querySelector('.week-grid');
        const timeline = container.querySelector('.timeline');
        const weekHeaderGrid = document.getElementById('week-header-grid');

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
        for (let i = 9; i <= 21; i++) {
            const hourMarker = document.createElement('div');
            hourMarker.classList.add('hour-marker');
            hourMarker.textContent = `${String(i).padStart(2, '0')}:00`;
            timeline.appendChild(hourMarker);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–¥–µ–ª—é
        const dayOfWeek = (this.currentDisplayDate.getDay() + 6) % 7;
        const startDate = new Date(this.currentDisplayDate.getFullYear(), this.currentDisplayDate.getMonth(), this.currentDisplayDate.getDate() - dayOfWeek);
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + 6);
        
        this.updateWeeklyKPIs(startDate, endDate);
        
        const options = { month: 'long', day: 'numeric' };
        const calendarTitle = document.getElementById('calendar-title');
        if (calendarTitle) {
            calendarTitle.textContent = `${startDate.toLocaleDateString('ru', options)} - ${endDate.toLocaleDateString('ru', options)}`;
        }

        // –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        for (let i = 0; i < 7; i++) {
            const dayDate = new Date(startDate);
            dayDate.setDate(startDate.getDate() + i);
            
            const dayHeader = document.createElement('div');
            dayHeader.innerHTML = `<span class="font-bold">${dayDate.toLocaleDateString('ru', { weekday: 'short' })}</span> <span class="day-number ${this.isToday(dayDate) ? 'today' : ''}">${dayDate.getDate()}</span>`;
            weekHeaderGrid.appendChild(dayHeader);

            const dayColumn = document.createElement('div');
            dayColumn.classList.add('calendar-day');
            
            const dateString = `${dayDate.getFullYear()}-${String(dayDate.getMonth() + 1).padStart(2, '0')}-${String(dayDate.getDate()).padStart(2, '0')}`;
            
            const eventsForDay = this.demoEvents.filter(e => {
                if (e.date !== dateString) return false;
                const [h] = e.time.split(':');
                const hour = parseInt(h);
                return hour >= 9 && hour < 22;
            });
            
            eventsForDay.forEach(event => {
                const eventEl = document.createElement('div');
                eventEl.classList.add('event-pill');
                const [hours, minutes] = event.time.split(':');
                
                const top = ((parseInt(hours) - 9) + parseInt(minutes)/60) * hourHeight;
                const height = event.duration * hourHeight;

                eventEl.style.top = `${top}px`;
                eventEl.style.height = `${height - 4}px`;
                 
                if (event.status === '–ü–æ—Å–µ—â–µ–Ω–∏–µ') eventEl.classList.add('event-attended');
                else if (event.status === '–ü—Ä–æ–ø—É—Å–∫') eventEl.classList.add('event-skipped');
                else eventEl.classList.add('event-scheduled');
                
                eventEl.innerHTML = `<div class="font-bold">${event.time}</div><div>${event.title}</div>`;
                
                eventEl.addEventListener('click', () => {
                    this.showEventModal(event);
                });

                dayColumn.appendChild(eventEl);
            });

            weekGrid.appendChild(dayColumn);
        }
    }

    renderSubscriptionsProgress() {
        const container = document.getElementById('subscriptions-progress-container');
        const tooltip = document.getElementById('tooltip');
        if (!container) return;
        
        container.innerHTML = '';

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ API
        const subscriptions = this.dashboardData?.subscriptions || this.demoSubscriptions;

        subscriptions.forEach(sub => {
            const total = sub.totalLessons || sub.lessons?.length || 0;
            const completed = sub.completedLessons || 0;
            const remaining = sub.remainingLessons || 0;
            const progressPercentage = sub.progressPercent || (total > 0 ? (completed / total) * 100 : 0);
            const missed = sub.missedThisMonth || 0;
            
            let progressBarHTML = '';
            const lessons = sub.lessons || [];
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            for (let i = 0; i < total; i++) {
                const lesson = lessons[i];
                let segmentClass = 'bg-gray-700';
                let segmentStyle = '';
                
                if (lesson) {
                    if (lesson.status === '–ü–æ—Å–µ—â–µ–Ω–∏–µ' || lesson.attendance === '–ü–æ—Å–µ—â–µ–Ω–∏–µ') {
                        const startColor = [0, 193, 255];
                        const endColor = [106, 0, 255];
                        const ratio = total > 1 ? i / (total - 1) : 1;
                        const r = Math.round(startColor[0] * (1 - ratio) + endColor[0] * ratio);
                        const g = Math.round(startColor[1] * (1 - ratio) + endColor[1] * ratio);
                        const b = Math.round(startColor[2] * (1 - ratio) + endColor[2] * ratio);
                        segmentStyle = `background-color: rgb(${r}, ${g}, ${b});`;
                    } else if (lesson.status === '–ü—Ä–æ–ø—É—Å–∫' || lesson.attendance === '–ü—Ä–æ–ø—É—Å–∫') {
                        segmentClass = 'bg-orange-500';
                    }
                }
                
                progressBarHTML += `<div class="progress-segment ${segmentClass}" style="${segmentStyle}"
                    data-id="${sub.id}"
                    data-date="${lesson?.date || ''}"
                    data-status="${lesson?.status || lesson?.attendance || '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}"
                    data-start="${lesson?.time || lesson?.start_time || ''}"
                    data-end="${lesson?.end_time || ''}"
                ></div>`;
            }

            const cardHTML = `
                <div class="bg-black/20 p-4 rounded-lg border border-gray-700">
                    <div class="flex justify-between items-center mb-2">
                        <span class="font-bold text-white text-sm">${sub.title || sub.name}</span>
                        <div>
                            <span class="text-sm text-gray-400">–û—Å—Ç–∞–ª–æ—Å—å: ${remaining} / ${total}</span>
                            <span class="text-sm font-bold text-white ml-2">${Math.round(progressPercentage)}%</span>
                        </div>
                    </div>
                    <div class="progress-bar-container">
                       ${progressBarHTML}
                    </div>
                    ${missed > 0 ? `<div class="text-xs mt-2"><span class="gradient-text-orange font-bold">–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${missed}</span></div>` : ''}
                </div>
            `;
            container.innerHTML += cardHTML;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è tooltip
        if (tooltip) {
            container.querySelectorAll('.progress-segment').forEach(segment => {
                segment.addEventListener('mousemove', (e) => {
                    const data = e.target.dataset;
                    tooltip.style.display = 'block';
                    tooltip.style.left = `${e.pageX + 10}px`;
                    tooltip.style.top = `${e.pageY + 10}px`;
                    const timeRange = data.start && data.end ? `${data.start} - ${data.end}` : data.start || '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
                    tooltip.innerHTML = `
                        <div class="font-bold text-white">${data.date}</div>
                        <div class="text-gray-400">${timeRange}</div>
                        <div class="text-gray-400">–°—Ç–∞—Ç—É—Å: ${data.status}</div>
                        <div class="text-gray-400">ID: ${data.id}</div>
                    `;
                });
                segment.addEventListener('mouseout', () => {
                    tooltip.style.display = 'none';
                });
            });
        }
    }

    updateGlobalKPIs(subscriptions) {
        let totalAttended = 0;
        let totalSkipped = 0;
        let totalScheduled = 0;

        subscriptions.forEach(sub => {
            sub.lessons.forEach(lesson => {
                if(lesson.status === '–ü–æ—Å–µ—â–µ–Ω–∏–µ') totalAttended++;
                else if (lesson.status === '–ü—Ä–æ–ø—É—Å–∫') totalSkipped++;
                else if (lesson.status === '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ') totalScheduled++;
            });
        });
        
        const totalPast = totalAttended + totalSkipped;
        const rate = totalPast > 0 ? Math.round((totalAttended / totalPast) * 100) : 0;

        this.updateElement('kpi-attended', totalAttended);
        this.updateElement('kpi-skipped', totalSkipped);
        this.updateElement('kpi-scheduled', totalScheduled);
        this.updateElement('kpi-rate', `${rate}%`);
    }

    updateFinancialKPIs() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏–ª–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        let budgetMonth = 0;
        let paidMonth = 0;
        let budgetWeek = 0;
        let paidWeek = 0;

        if (this.dashboardData && this.dashboardData.forecast) {
            budgetMonth = this.dashboardData.forecast.total_forecast || 0;
            budgetWeek = this.dashboardData.forecast.next_7_days || 0;
        } else {
            // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            budgetMonth = 148500;
            paidMonth = 120000;
            budgetWeek = 35000;
            paidWeek = 25000;
        }
        
        const formatCurrency = (value) => new Intl.NumberFormat('ru-RU').format(value) + ' ‚ÇΩ';

        this.updateElement('kpi-budget-month', formatCurrency(budgetMonth));
        this.updateElement('kpi-paid-month', formatCurrency(paidMonth));
        this.updateElement('kpi-budget-week', formatCurrency(budgetWeek));
        this.updateElement('kpi-paid-week', formatCurrency(paidWeek));
    }

    updateWeeklyKPIs(startDate, endDate) {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤ –±—É–¥—É—â–µ–º
    }

    showEventModal(event) {
        const modal = document.getElementById('event-modal');
        if (!modal) return;
        
        const [circle, child] = event.title.split(' - ');
        
        const modalTitle = document.getElementById('modal-title');
        const modalChild = document.getElementById('modal-child');
        const modalTime = document.getElementById('modal-time');
        const modalStatus = document.getElementById('modal-status');
        
        if (modalTitle) modalTitle.textContent = circle || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        if (modalChild) modalChild.textContent = `–£—á–µ–Ω–∏–∫: ${child || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
        if (modalTime) modalTime.textContent = `–í—Ä–µ–º—è: ${event.time}, ${event.duration} —á.`;
        if (modalStatus) modalStatus.textContent = `–°—Ç–∞—Ç—É—Å: ${event.status}`;
        
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    isToday(date) {
        const today = new Date();
        return date.getDate() === today.getDate() &&
               date.getMonth() === today.getMonth() &&
               date.getFullYear() === today.getFullYear();
    }

    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.style.opacity = '0.5';
            setTimeout(() => {
                element.textContent = value;
                element.style.opacity = '1';
            }, 150);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏

    showPreloader() {
        const preloader = document.getElementById('preloader');
        const content = document.getElementById('dashboard-content');
        
        if (preloader) {
            preloader.classList.remove('hidden');
        }
        
        if (content) {
            content.classList.add('hidden');
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        const progressFill = document.getElementById('progress-fill');
        if (progressFill) {
            progressFill.style.width = '0%';
            setTimeout(() => {
                progressFill.style.width = '100%';
            }, 100);
        }
    }
    
    hidePreloader() {
        setTimeout(() => {
            const preloader = document.getElementById('preloader');
            const content = document.getElementById('dashboard-content');
            
            if (preloader) {
                preloader.classList.add('hidden');
            }
            
            if (content) {
                content.classList.remove('hidden');
            }
        }, 1000);
    }

    showError(message) {
        console.error('Dashboard Error:', message);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –≤ UI
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üì± DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥');
    window.dashboard = new Dashboard();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', (event) => {
    console.error('‚ùå JavaScript –æ—à–∏–±–∫–∞:', event.error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', (event) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
});

// CSS –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const additionalStyles = `
@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}
`;

const styleSheet = document.createElement('style');
styleSheet.textContent = additionalStyles;
document.head.appendChild(styleSheet);
