import gspread
from google.oauth2 import service_account
import json
import logging
import os
from datetime import datetime, timedelta
import re
import time
# Google Calendar API –∏–º–ø–æ—Ä—Ç—ã
import config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Google Calendar —Å–µ—Ä–≤–∏—Å
try:
    from google_calendar_service import GoogleCalendarService
    logging.info("‚úÖ Google Calendar —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    GoogleCalendarService = None
    logging.warning(f"‚ö†Ô∏è Google Calendar —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

class GoogleSheetsService:
    def __init__(self, credentials_path, sheet_name):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets."""
        try:
            import time
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(5)
            
            scope = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            creds = service_account.Credentials.from_service_account_file(credentials_path, scopes=scope)
            self.client = gspread.authorize(creds)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
            time.sleep(3)
            self.spreadsheet = self.client.open(sheet_name)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
            self._cache = {}
            self._cache_ttl = {}
            self._default_cache_duration = 30  # –ö–µ—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            logging.info("‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Google Calendar Service
            try:
                from google_calendar_service import calendar_service
                self.calendar_service = calendar_service
                if self.calendar_service:
                    logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º –∏ Google Calendar.")
                else:
                    logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º. Calendar API –æ—Ç–∫–ª—é—á–µ–Ω.")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Google Calendar –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.calendar_service = None
                logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º. Calendar API –æ—Ç–∫–ª—é—á–µ–Ω.")
        except gspread.exceptions.SpreadsheetNotFound:
            print(f"–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{spreadsheet_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_SHEET_NAME –≤ .env —Ñ–∞–π–ª–µ.")
            raise
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º: {e}")
            raise
    
    def _get_from_cache(self, key):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã."""
        if key in self._cache and key in self._cache_ttl:
            if time.time() < self._cache_ttl[key]:
                logging.debug(f"üì¶ –î–∞–Ω–Ω—ã–µ '{key}' –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞")
                return self._cache[key]
            else:
                # –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º
                del self._cache[key]
                del self._cache_ttl[key]
                logging.debug(f"‚è∞ –ö–µ—à '{key}' —É—Å—Ç–∞—Ä–µ–ª –∏ —É–¥–∞–ª–µ–Ω")
        return None
    
    def _save_to_cache(self, key, data, duration=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à."""
        if duration is None:
            duration = self._default_cache_duration
        self._cache[key] = data
        self._cache_ttl[key] = time.time() + duration
        logging.debug(f"üíæ –î–∞–Ω–Ω—ã–µ '{key}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à –Ω–∞ {duration} —Å–µ–∫")
    
    def _clear_cache(self, key=None):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)."""
        if key:
            if key in self._cache:
                del self._cache[key]
            if key in self._cache_ttl:
                del self._cache_ttl[key]
            logging.debug(f"üóëÔ∏è –ö–µ—à '{key}' –æ—á–∏—â–µ–Ω")
        else:
            self._cache.clear()
            self._cache_ttl.clear()
            logging.debug("üóëÔ∏è –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω")
    
    def handle_network_error(self, e, operation_name="–æ–ø–µ—Ä–∞—Ü–∏–∏"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        import httpx
        error_msg = str(e)
        
        if isinstance(e, httpx.ReadError) or "httpx.ReadError" in error_msg:
            logging.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ {operation_name}: {e}")
            return f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ {operation_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        elif "429" in error_msg or "Quota exceeded" in error_msg:
            logging.error(f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API –ø—Ä–∏ {operation_name}: {e}")
            return f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        elif "timeout" in error_msg.lower() or "timed out" in error_msg.lower():
            logging.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ {operation_name}: {e}")
            return f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ {operation_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        
        elif "503" in error_msg or "Service Unavailable" in error_msg:
            logging.error(f"üö´ –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ {operation_name}: {e}")
            return f"üö´ Google Sheets –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        
        else:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ {operation_name}: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {operation_name}: {error_msg}"

    def get_active_subscriptions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ê–∫—Ç–∏–≤–µ–Ω' –∏–ª–∏ '–û–∂–∏–¥–∞–µ—Ç'."""
        try:
            worksheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            all_values = worksheet.get_all_values()
            if not all_values: return []
            
            headers = all_values[0]
            records = []
            for i, row in enumerate(all_values[1:], start=2):
                record = dict(zip(headers, row))
                record['row_number'] = i
                records.append(record)

            active_subs = [
                sub for sub in records 
                if str(sub.get('–°—Ç–∞—Ç—É—Å', '')).strip().lower() in ['–∞–∫—Ç–∏–≤–µ–Ω', '–æ–∂–∏–¥–∞–µ—Ç']
            ]
            return active_subs
        except gspread.exceptions.WorksheetNotFound:
            logging.error("–û—à–∏–±–∫–∞: –õ–∏—Å—Ç '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GoogleSheetsService: {e}")
            self.spreadsheet = None

    def format_time(self, time_str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM."""
        if not time_str or time_str == '':
            return ''
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if ':' in time_str and len(time_str.split(':')) == 2:
            try:
                hours, minutes = time_str.split(':')
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
                return f"{int(hours):02d}:{int(minutes):02d}"
            except ValueError:
                return time_str
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
        return time_str

    def delete_subscription(self, subscription_id):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤."""
        try:
            logging.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è Google Calendar
            subscription_info = self.get_subscription_details(subscription_id)
            child_name = subscription_info.get('child_name', '') if subscription_info else ''
            circle_name = subscription_info.get('circle_name', '') if subscription_info else ''
            
            logging.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ: child_name='{child_name}', circle_name='{circle_name}'")
            
            deleted_counts = {
                '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã': 0,
                '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π': 0,
                '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è': 0,
                '–ü—Ä–æ–≥–Ω–æ–∑': 0,
                '–û–ø–ª–∞—á–µ–Ω–æ': 0,
                'Google Calendar': 0
            }
            
            # 1. –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
            try:
                subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
                cell = subs_sheet.find(str(subscription_id))
                subs_sheet.delete_rows(cell.row)
                deleted_counts['–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'] = 1
                logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–∑ –ª–∏—Å—Ç–∞ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'")
            except gspread.exceptions.CellNotFound: 
                logging.warning(f"‚ö†Ô∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã': {e}")

            # 2. –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π"
            try:
                cal_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
                all_values = cal_sheet.get_all_values()
                rows_to_delete = []
                
                # –ò—â–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É B (ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
                for i, row in enumerate(all_values[1:], start=2):
                    if len(row) > 1 and row[1] == str(subscription_id):
                        rows_to_delete.append(i)
                
                if rows_to_delete:
                    for row_index in sorted(rows_to_delete, reverse=True):
                        cal_sheet.delete_rows(row_index)
                    deleted_counts['–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'] = len(rows_to_delete)
                    logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –∑–∞–Ω—è—Ç–∏–π –∏–∑ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'")
                else:
                    logging.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π': {e}")

            # 3. –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ "–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            try:
                template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                all_values = template_sheet.get_all_values()
                rows_to_delete = []
                
                # –ò—â–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É B (ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
                for i, row in enumerate(all_values[1:], start=2):
                    if len(row) > 1 and row[1] == str(subscription_id):
                        rows_to_delete.append(i)
                
                if rows_to_delete:
                    for row_index in sorted(rows_to_delete, reverse=True):
                        template_sheet.delete_rows(row_index)
                    deleted_counts['–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'] = len(rows_to_delete)
                    logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –∑–∞–ø–∏—Å–µ–π –∏–∑ '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'")
                else:
                    logging.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è': {e}")

            # 4. –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥–Ω–æ–∑"
            try:
                forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
                all_values = forecast_sheet.get_all_values()
                rows_to_delete = []
                
                logging.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ò–ó –ü–†–û–ì–ù–û–ó–ê:")
                logging.info(f"  üìã –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è: '{child_name}' - '{circle_name}'")
                
                # –ò—â–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º "–ö—Ä—É–∂–æ–∫" –∏ "–†–µ–±–µ–Ω–æ–∫"
                if len(all_values) > 1:
                    headers = all_values[0]
                    circle_col = -1
                    child_col = -1
                    
                    logging.info(f"  üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑': {headers}")
                    
                    for idx, header in enumerate(headers):
                        if header == '–ö—Ä—É–∂–æ–∫':
                            circle_col = idx
                        elif header == '–†–µ–±–µ–Ω–æ–∫':
                            child_col = idx
                    
                    logging.info(f"  üéØ –°—Ç–æ–ª–±–µ—Ü '–ö—Ä—É–∂–æ–∫': {circle_col}, –°—Ç–æ–ª–±–µ—Ü '–†–µ–±–µ–Ω–æ–∫': {child_col}")
                    
                    if circle_col >= 0 and child_col >= 0 and child_name and circle_name:
                        logging.info(f"  üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(all_values)-1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö...")
                        
                        for i, row in enumerate(all_values[1:], start=2):
                            if len(row) > max(circle_col, child_col):
                                row_circle = row[circle_col].strip() if circle_col < len(row) else ""
                                row_child = row[child_col].strip() if child_col < len(row) else ""
                                
                                logging.info(f"    üìù –°—Ç—Ä–æ–∫–∞ {i}: –ö—Ä—É–∂–æ–∫='{row_circle}', –†–µ–±–µ–Ω–æ–∫='{row_child}'")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                if row_circle == circle_name and row_child == child_name:
                                    rows_to_delete.append(i)
                                    logging.info(f"    ‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï - —Å—Ç—Ä–æ–∫–∞ {i} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞")
                        
                        logging.info(f"  üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(rows_to_delete)}")
                        
                        if rows_to_delete:
                            for row_index in sorted(rows_to_delete, reverse=True):
                                forecast_sheet.delete_rows(row_index)
                            deleted_counts['–ü—Ä–æ–≥–Ω–æ–∑'] = len(rows_to_delete)
                            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –∑–∞–ø–∏—Å–µ–π –∏–∑ '–ü—Ä–æ–≥–Ω–æ–∑'")
                        else:
                            logging.warning("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '–ü—Ä–æ–≥–Ω–æ–∑' - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –∏–º–µ–Ω")
                    else:
                        logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∏—Å–∫–æ–º: circle_col={circle_col}, child_col={child_col}, child_name='{child_name}', circle_name='{circle_name}'")
                else:
                    logging.warning("‚ö†Ô∏è –õ–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ '–ü—Ä–æ–≥–Ω–æ–∑': {e}")

            # 5. –£–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ "–û–ø–ª–∞—á–µ–Ω–æ"
            try:
                paid_sheet = self.spreadsheet.worksheet("–û–ø–ª–∞—á–µ–Ω–æ")
                all_values = paid_sheet.get_all_values()
                rows_to_delete = []
                
                # –ò—â–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º "–ö—Ä—É–∂–æ–∫" –∏ "–†–µ–±–µ–Ω–æ–∫"
                if len(all_values) > 1:
                    headers = all_values[0]
                    circle_col = -1
                    child_col = -1
                    
                    for idx, header in enumerate(headers):
                        if header == '–ö—Ä—É–∂–æ–∫':
                            circle_col = idx
                        elif header == '–†–µ–±–µ–Ω–æ–∫':
                            child_col = idx
                    
                    if circle_col >= 0 and child_col >= 0 and child_name and circle_name:
                        for i, row in enumerate(all_values[1:], start=2):
                            if (len(row) > max(circle_col, child_col) and 
                                row[circle_col] == circle_name and 
                                row[child_col] == child_name):
                                rows_to_delete.append(i)
                        
                        if rows_to_delete:
                            for row_index in sorted(rows_to_delete, reverse=True):
                                paid_sheet.delete_rows(row_index)
                            deleted_counts['–û–ø–ª–∞—á–µ–Ω–æ'] = len(rows_to_delete)
                            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –∑–∞–ø–∏—Å–µ–π –∏–∑ '–û–ø–ª–∞—á–µ–Ω–æ'")
                        else:
                            logging.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '–û–ø–ª–∞—á–µ–Ω–æ'")
                    else:
                        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '–û–ø–ª–∞—á–µ–Ω–æ'")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ '–û–ø–ª–∞—á–µ–Ω–æ': {e}")

            # 6. –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: –∏–º—è —Ä–µ–±–µ–Ω–∫–∞, –∫—Ä—É–∂–æ–∫, ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
            calendar_errors = []
            try:
                if self.calendar_service and child_name and circle_name:
                    logging.info(f"üóìÔ∏è –£–¥–∞–ª—è—é —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar –¥–ª—è {child_name} - {circle_name} (ID: {subscription_id})")
                    
                    # –ü–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                    max_retries = 3
                    calendar_result = None
                    
                    for attempt in range(max_retries):
                        try:
                            calendar_result = self.calendar_service.delete_subscription_events(
                                child_name, circle_name, subscription_id
                            )
                            break  # –£—Å–ø–µ—à–Ω–æ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                            
                        except Exception as calendar_error:
                            error_msg = str(calendar_error)
                            if "Connection reset by peer" in error_msg or "timeout" in error_msg.lower():
                                logging.warning(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Calendar (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {calendar_error}")
                                if attempt < max_retries - 1:
                                    import time
                                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
                                    continue
                            raise calendar_error  # –ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                    
                    if calendar_result:
                        if isinstance(calendar_result, dict):
                            calendar_deleted = calendar_result.get('deleted_count', 0)
                            calendar_success = calendar_result.get('success', True)
                            
                            if calendar_success and calendar_deleted > 0:
                                deleted_counts['Google Calendar'] = calendar_deleted
                                logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {calendar_deleted} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar")
                            elif not calendar_success:
                                calendar_errors.append(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Calendar: {calendar_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar")
                            else:
                                logging.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ Google Calendar")
                        else:
                            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ
                            if calendar_result and calendar_result > 0:
                                deleted_counts['Google Calendar'] = calendar_result
                                logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {calendar_result} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar")
                            else:
                                logging.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ Google Calendar")
                    else:
                        calendar_errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Calendar")
                elif not child_name or not circle_name:
                    logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Calendar: child_name='{child_name}', circle_name='{circle_name}'")
                    calendar_errors.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π (—Ä–µ–±–µ–Ω–æ–∫: '{child_name}', –∫—Ä—É–∂–æ–∫: '{circle_name}')")
                else:
                    logging.warning("‚ö†Ô∏è Google Calendar —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    calendar_errors.append("Google Calendar —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
            except Exception as e:
                error_message = self.handle_network_error(e, "—É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Google Calendar")
                calendar_errors.append(error_message)
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Google Calendar: {e}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            total_deleted = sum(deleted_counts.values())
            report_lines = [f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç `{subscription_id}` –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!"]
            
            for sheet_name, count in deleted_counts.items():
                if count > 0:
                    report_lines.append(f"‚Ä¢ {sheet_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if total_deleted == 0:
                report_lines.append("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö Google Calendar
            if calendar_errors:
                report_lines.append("")
                report_lines.append("‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã —Å Google Calendar:**")
                for error in calendar_errors:
                    report_lines.append(f"‚Ä¢ {error}")
                report_lines.append("")
                report_lines.append("üîÑ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Calendar –≤—Ä—É—á–Ω—É—é –∏ —É–¥–∞–ª–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è Google Calendar
            result_message = "\n".join(report_lines)
            logging.info(f"üéØ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_deleted} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫ Calendar: {len(calendar_errors)}")
            
            return {
                'success': True,
                'message': result_message,
                'child_name': child_name,
                'circle_name': circle_name,
                'subscription_id': subscription_id,
                'deleted_counts': deleted_counts,
                'calendar_errors': calendar_errors
            }

        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
            error_message = self.handle_network_error(e, "—É–¥–∞–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}: {e}")
            return {
                'success': False,
                'message': error_message,
                'child_name': child_name if 'child_name' in locals() else '',
                'circle_name': circle_name if 'circle_name' in locals() else '',
                'subscription_id': subscription_id,
                'deleted_counts': {}
            }
    
    def manual_calendar_cleanup(self, child_name, circle_name):
        """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –∫—Ä—É–∂–∫–∞."""
        try:
            if not self.calendar_service:
                return "‚ùå Google Calendar —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            logging.info(f"üßπ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Google Calendar –¥–ª—è {child_name} - {circle_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            events_result = self.calendar_service.service.events().list(
                calendarId=self.calendar_service.calendar_id,
                maxResults=2500,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            
            deleted_count = 0
            errors = []
            
            # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –∫—Ä—É–∂–∫–∞
            for event in events:
                try:
                    summary = event.get('summary', '')
                    description = event.get('description', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫ —É–¥–∞–ª—è–µ–º–æ–º—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É
                    if (child_name in summary and circle_name in summary) or \
                       (child_name in description and circle_name in description):
                        
                        event_id = event['id']
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                        self.calendar_service.service.events().delete(
                            calendarId=self.calendar_service.calendar_id,
                            eventId=event_id
                        ).execute()
                        
                        deleted_count += 1
                        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                        import time
                        time.sleep(0.2)
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event.get('id', 'unknown')}: {e}"
                    logging.error(f"‚ùå {error_msg}")
                    errors.append(error_msg)
                    continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if deleted_count > 0:
                message = f"‚úÖ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π –¥–ª—è '{child_name} - {circle_name}'"
                if errors:
                    message += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(errors)}"
            else:
                message = f"‚ÑπÔ∏è –°–æ–±—ã—Ç–∏—è –¥–ª—è '{child_name} - {circle_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Google Calendar"
            
            logging.info(f"üéØ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {deleted_count} —É–¥–∞–ª–µ–Ω–æ, {len(errors)} –æ—à–∏–±–æ–∫")
            
            return message
            
        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ Google Calendar: {e}"
            logging.error(error_msg)
            return error_msg
    
    def debug_forecast_data(self, child_name=None, circle_name=None):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ –ü—Ä–æ–≥–Ω–æ–∑."""
        try:
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            all_values = forecast_sheet.get_all_values()
            
            if not all_values:
                return "–õ–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑' –ø—É—Å—Ç"
            
            headers = all_values[0]
            logging.info(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑': {headers}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã
            circle_col = child_col = -1
            for idx, header in enumerate(headers):
                if header == '–ö—Ä—É–∂–æ–∫':
                    circle_col = idx
                elif header == '–†–µ–±–µ–Ω–æ–∫':
                    child_col = idx
            
            result_lines = [
                f"üìã –î–ê–ù–ù–´–ï –í –õ–ò–°–¢–ï '–ü–†–û–ì–ù–û–ó':",
                f"üéØ –°—Ç–æ–ª–±–µ—Ü '–ö—Ä—É–∂–æ–∫': {circle_col}, –°—Ç–æ–ª–±–µ—Ü '–†–µ–±–µ–Ω–æ–∫': {child_col}",
                ""
            ]
            
            if child_name and circle_name:
                result_lines.append(f"üîç –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è: '{child_name}' - '{circle_name}'")
                result_lines.append("")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            for i, row in enumerate(all_values[1:], start=2):
                if len(row) > max(circle_col, child_col) if circle_col >= 0 and child_col >= 0 else True:
                    row_circle = row[circle_col].strip() if circle_col >= 0 and circle_col < len(row) else "N/A"
                    row_child = row[child_col].strip() if child_col >= 0 and child_col < len(row) else "N/A"
                    
                    match_indicator = ""
                    if child_name and circle_name:
                        if row_circle == circle_name and row_child == child_name:
                            match_indicator = " ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï"
                        else:
                            match_indicator = " ‚ùå"
                    
                    result_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ö—Ä—É–∂–æ–∫='{row_circle}', –†–µ–±–µ–Ω–æ–∫='{row_child}'{match_indicator}")
            
            return "\n".join(result_lines)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑': {e}"
    
    def get_subscription_deletion_preview(self, subscription_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ."""
        try:
            logging.info(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
            subscription_info = self.get_subscription_details(subscription_id)
            if not subscription_info:
                return {
                    'success': False,
                    'message': f"‚ùå –ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            child_name = subscription_info.get('–†–µ–±–µ–Ω–æ–∫', '')
            circle_name = subscription_info.get('–ö—Ä—É–∂–æ–∫', '')
            
            preview_counts = {
                '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã': 0,
                '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π': 0,
                '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è': 0,
                '–ü—Ä–æ–≥–Ω–æ–∑': 0,
                '–û–ø–ª–∞—á–µ–Ω–æ': 0
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–º –ª–∏—Å—Ç–µ
            sheets_to_check = [
                ('–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π', 'B', subscription_id),
                ('–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', 'B', subscription_id)
            ]
            
            for sheet_name, column, search_value in sheets_to_check:
                try:
                    sheet = self.spreadsheet.worksheet(sheet_name)
                    all_values = sheet.get_all_values()
                    count = 0
                    
                    for row in all_values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if len(row) > 1 and row[1] == str(search_value):
                            count += 1
                    
                    preview_counts[sheet_name] = count
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –≤ {sheet_name}: {e}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤ –ª–∏—Å—Ç–∞—Ö –ü—Ä–æ–≥–Ω–æ–∑ –∏ –û–ø–ª–∞—á–µ–Ω–æ –ø–æ –∏–º–µ–Ω–∏ –∏ –∫—Ä—É–∂–∫—É
            for sheet_name in ['–ü—Ä–æ–≥–Ω–æ–∑', '–û–ø–ª–∞—á–µ–Ω–æ']:
                try:
                    sheet = self.spreadsheet.worksheet(sheet_name)
                    all_values = sheet.get_all_values()
                    count = 0
                    
                    if len(all_values) > 1:
                        headers = all_values[0]
                        circle_col = child_col = -1
                        
                        for idx, header in enumerate(headers):
                            if header == '–ö—Ä—É–∂–æ–∫':
                                circle_col = idx
                            elif header == '–†–µ–±–µ–Ω–æ–∫':
                                child_col = idx
                        
                        if circle_col >= 0 and child_col >= 0:
                            for row in all_values[1:]:
                                if (len(row) > max(circle_col, child_col) and 
                                    row[circle_col] == circle_name and 
                                    row[child_col] == child_name):
                                    count += 1
                    
                    preview_counts[sheet_name] = count
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –≤ {sheet_name}: {e}")
            
            # –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ 1 (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
            preview_counts['–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'] = 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            total_to_delete = sum(preview_counts.values())
            preview_lines = [
                f"üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —É–¥–∞–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ `{subscription_id}`**",
                f"üë§ **–†–µ–±–µ–Ω–æ–∫:** {child_name}",
                f"üé® **–ö—Ä—É–∂–æ–∫:** {circle_name}",
                "",
                "üóëÔ∏è **–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:**"
            ]
            
            for sheet_name, count in preview_counts.items():
                if count > 0:
                    preview_lines.append(f"‚Ä¢ {sheet_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if total_to_delete == 0:
                preview_lines.append("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                preview_lines.append(f"\nüìä **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é:** {total_to_delete}")
                preview_lines.append("\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!")
            
            return {
                'success': True,
                'message': "\n".join(preview_lines),
                'child_name': child_name,
                'circle_name': circle_name,
                'total_to_delete': total_to_delete,
                'preview_counts': preview_counts
            }
            
        except Exception as e:
            error_message = self.handle_network_error(e, "–∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return {
                'success': False,
                'message': error_message
            }
            
    def get_next_lesson_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–Ω—è—Ç–∏—è."""
        try:
            cal_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            data = cal_sheet.get_all_values()
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            max_id = 0
            for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if row and row[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A
                    try:
                        current_id = int(row[0])
                        max_id = max(max_id, current_id)
                    except ValueError:
                        continue
            
            return max_id + 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ ID –∑–∞–Ω—è—Ç–∏—è: {e}")
            return 1

    def generate_schedule_for_subscription(self, sub_id, child_name, start_date_str, classes_to_generate, template):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'."""
        try:
            cal_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            
            if classes_to_generate <= 0:
                return None

            new_cal_entries = []
            last_generated_date = None
            
            base_start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
            current_date = base_start_date
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            next_lesson_id = self.get_next_lesson_id()
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            template_days = {}
            for t in template:
                day_num = int(t['day_num'])
                template_days[day_num] = {
                    'start_time': t['start_time'],
                    'end_time': t['end_time']
                }
            
            classes_added = 0
            for _ in range(365 * 2): # Safety break –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if classes_added >= classes_to_generate: 
                    break
                
                day_of_week = current_date.isoweekday()
                if day_of_week in template_days:
                    schedule_info = template_days[day_of_week]
                    new_cal_entries.append([
                        next_lesson_id + classes_added,  # A: ‚Ññ (ID –∑–∞–Ω—è—Ç–∏—è)
                        sub_id,                          # B: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                        current_date.strftime('%d.%m.%Y'), # C: –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                        schedule_info['start_time'],     # D: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                        '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',                 # E: –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                        child_name,                      # F: –†–µ–±–µ–Ω–æ–∫
                        '',                              # G: –û—Ç–º–µ—Ç–∫–∞
                        schedule_info['end_time']        # H: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    ])
                    classes_added += 1
                    last_generated_date = current_date
                current_date += timedelta(days=1)
            
            if new_cal_entries:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
                next_available_id = self.get_next_lesson_id()
                
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ ID –≤—Å–µ–º –Ω–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º
                for i, entry in enumerate(new_cal_entries):
                    entry[0] = next_available_id + i  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –Ω–∞—á–∏–Ω–∞—è —Å next_available_id
                
                cal_sheet.append_rows(new_cal_entries, value_input_option='USER_ENTERED')
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(new_cal_entries)} –∑–∞–Ω—è—Ç–∏–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID –æ—Ç {next_available_id} –¥–æ {next_available_id + len(new_cal_entries) - 1}")
                logging.info(f"üìã –ê–±–æ–Ω–µ–º–µ–Ω—Ç {sub_id}: –∑–∞–Ω—è—Ç–∏—è –ø–æ–ª—É—á–∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è")

            return last_generated_date
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ID {sub_id}: {e}", exc_info=True)
            raise

    def create_full_subscription(self, sub_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç, —à–∞–±–ª–æ–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
        try:
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            
            ru_months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']
            start_date = sub_data['start_date']
            date_part = f"{start_date.day}{ru_months[start_date.month - 1]}"
            clean_child_name = ''.join(filter(str.isalnum, sub_data['child_name']))
            clean_circle_name = ''.join(filter(str.isalnum, sub_data['circle_name']))
            next_row_num = len(subs_sheet.get_all_values()) + 1
            sub_id = f"{date_part}.{clean_child_name}{clean_circle_name}-{next_row_num}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            existing_rows = len(template_sheet.get_all_values())
            next_template_id = existing_rows  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            
            template_entries = []
            for item in sub_data['schedule']:
                template_entries.append([
                    next_template_id, sub_id, item['day_num'], 
                    self.format_time(item['start_time']), self.format_time(item['end_time'])
                ])
                next_template_id += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            if template_entries:
                template_sheet.append_rows(template_entries, value_input_option='USER_ENTERED')
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(template_entries)} –∑–∞–ø–∏—Å–µ–π –≤ —à–∞–±–ª–æ–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
                for i, entry in enumerate(template_entries):
                    logging.info(f"  üìã –ó–∞–ø–∏—Å—å {i+1}: ID={entry[0]}, –î–µ–Ω—å={entry[2]}, –í—Ä–µ–º—è={entry[3]}-{entry[4]}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            classes_to_generate = sub_data.get('remaining_classes', sub_data['total_classes'])
            
            last_class_date = self.generate_schedule_for_subscription(
                sub_id, sub_data['child_name'], start_date.strftime('%d.%m.%Y'), 
                classes_to_generate, sub_data['schedule']
            )

            payment_type = sub_data.get('payment_type', '')
            logging.info(f"üîç –¢–∏–ø –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: '{payment_type}'")
            
            new_row = [
                next_row_num - 1, sub_id, sub_data['child_name'], sub_data['circle_name'],
                sub_data['total_classes'], start_date.strftime('%d.%m.%Y'), 
                last_class_date.strftime('%d.%m.%Y') if last_class_date else '',
                0, sub_data['remaining_classes'], "–û–∂–∏–¥–∞–µ—Ç", sub_data['cost'],
                last_class_date.strftime('%d.%m.%Y') if last_class_date else '',
                0, sub_data['sub_type'], payment_type
            ]
            
            logging.info(f"üìã –°–æ–∑–¥–∞—é —Å—Ç—Ä–æ–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: —Å—Ç–æ–ª–±–µ—Ü O (–∏–Ω–¥–µ–∫—Å 14) = '{payment_type}'")
            
            subs_sheet.append_row(new_row, value_input_option='USER_ENTERED')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï —Ä–∞–∑–æ–≤—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            if sub_data['sub_type'].lower() != '—Ä–∞–∑–æ–≤—ã–π':
                logging.info(f"üìä –°–æ–∑–¥–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ '{sub_data['sub_type']}'")
                self.create_payment_forecast(sub_id, sub_data)
            else:
                logging.info(f"üéØ –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ '{sub_id}'")
            
            return f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!\n\nID: `{sub_id}`"

        except Exception as e:
            import httpx
            error_msg = str(e)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if isinstance(e, httpx.ReadError) or "httpx.ReadError" in error_msg:
                logging.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
                return f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.\n\nüì° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ Google Sheets API\n‚Ä¢ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            
            elif "429" in error_msg or "Quota exceeded" in error_msg:
                logging.error(f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
                return f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API.\n\n‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\nüìà –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
            
            elif "timeout" in error_msg.lower() or "timed out" in error_msg.lower():
                logging.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
                return f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Google Sheets.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.\n\n‚ö° –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            
            else:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}", exc_info=True)
                return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.\n\nüîß –î–µ—Ç–∞–ª–∏: {error_msg}\n\nüìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è."
    
    def create_payment_forecast(self, sub_id, sub_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ."""
        try:
            # –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id} –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {sub_id}: {e}", exc_info=True)
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
    
    def update_full_forecast(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        try:
            from datetime import datetime, timedelta
            import time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
            time.sleep(2)
            
            logging.info("=== –ù–ê–ß–ê–õ–û –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ì–ù–û–ó–ê –ë–Æ–î–ñ–ï–¢–ê ===")
            
            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–ü—Ä–æ–≥–Ω–æ–∑" —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 429
            try:
                forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            except Exception as e:
                if "429" in str(e) or "Quota exceeded" in str(e):
                    logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑'. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                    return 0, ["‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"]
                else:
                    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    try:
                        forecast_sheet = self.spreadsheet.add_worksheet(title="–ü—Ä–æ–≥–Ω–æ–∑", rows=1000, cols=5)
                        headers = ["–ö—Ä—É–∂–æ–∫", "–†–µ–±–µ–Ω–æ–∫", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã", "–ë—é–¥–∂–µ—Ç", "–°—Ç–∞—Ç—É—Å"]
                        forecast_sheet.append_row(headers)
                    except Exception as e2:
                        if "429" in str(e2) or "Quota exceeded" in str(e2):
                            logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑'. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                            return 0, ["‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"]
                        else:
                            raise e2
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω–æ (Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω)
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç "–ü—Ä–æ–≥–Ω–æ–∑" –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏)
            try:
                if forecast_sheet.row_count > 1:
                    forecast_sheet.delete_rows(2, forecast_sheet.row_count)
                    logging.info(f"–û—á–∏—â–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ 2-{forecast_sheet.row_count} –≤ –ª–∏—Å—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑'")
            except Exception as e:
                if "429" in str(e) or "Quota exceeded" in str(e):
                    logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑'. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                    return 0, ["‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"]
                
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏: {e}")
                try:
                    if forecast_sheet.row_count > 1:
                        range_to_clear = f"A2:E{forecast_sheet.row_count}"
                        forecast_sheet.batch_clear([range_to_clear])
                        logging.info(f"–û—á–∏—â–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω {range_to_clear} –≤ –ª–∏—Å—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑'")
                except Exception as e2:
                    if "429" in str(e2) or "Quota exceeded" in str(e2):
                        logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ '–ü—Ä–æ–≥–Ω–æ–∑'. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                        return 0, ["‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"]
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑': {e2}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: —Å –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            today = datetime.now()
            start_of_period = datetime(today.year, today.month, 1)
            
            if today.month == 12:
                end_of_period = datetime(today.year + 1, 2, 1) - timedelta(days=1)
            else:
                next_month = today.month + 1
                if next_month == 12:
                    end_of_period = datetime(today.year + 1, 1, 1) - timedelta(days=1)
                else:
                    end_of_period = datetime(today.year, next_month + 1, 1) - timedelta(days=1)
            
            end_of_period = end_of_period.replace(hour=23, minute=59, second=59)
            
            logging.info(f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: {start_of_period.strftime('%d.%m.%Y')} - {end_of_period.strftime('%d.%m.%Y')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 429
            try:
                subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
                calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
                
                subs_data = subs_sheet.get_all_values()
                calendar_data = calendar_sheet.get_all_values()
            except Exception as e:
                if "429" in str(e) or "Quota exceeded" in str(e):
                    logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                    return 0, ["‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"]
                else:
                    raise e
            
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã={len(subs_data)}, –∫–∞–ª–µ–Ω–¥–∞—Ä—å={len(calendar_data)}")
            
            if len(subs_data) < 2:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                return 0, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"]
                
            if len(calendar_data) < 2:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                return 0, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π"]
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É: "–ò–º—è —Ä–µ–±–µ–Ω–∫–∞" + "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞"
            grouped_subscriptions = {}
            subscriptions_by_id = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ ID
            logging.info("–®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...")
            
            for i, row in enumerate(subs_data[1:], 2):
                if len(row) < 12:  # –ú–∏–Ω–∏–º—É–º –¥–æ —Å—Ç–æ–ª–±—Ü–∞ L
                    continue
                
                # –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó: C:C (–†–µ–±–µ–Ω–æ–∫), D:D (–ö—Ä—É–∂–æ–∫), E:E (–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π), K:K (–°—Ç–æ–∏–º–æ—Å—Ç—å), L:L (–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑), B:B (ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
                child_name = str(row[2]).strip()  # C:C = –∏–Ω–¥–µ–∫—Å 2
                circle_name = str(row[3]).strip()  # D:D = –∏–Ω–¥–µ–∫—Å 3
                total_classes = int(row[4]) if row[4] and str(row[4]).isdigit() else 0  # E:E = –∏–Ω–¥–µ–∫—Å 4
                # K:K = –∏–Ω–¥–µ–∫—Å 10, –æ—á–∏—â–∞–µ–º –æ—Ç –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                cost_str = str(row[10]).replace('\xa0', '').replace(' ', '').replace(',', '.') if len(row) > 10 and row[10] else "0"
                try:
                    cost = float(cost_str)
                except (ValueError, TypeError):
                    logging.warning(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å '{row[10]}', –∏—Å–ø–æ–ª—å–∑—É–µ–º 0")
                    cost = 0
                end_date_str = str(row[11]).strip() if len(row) > 11 else ""  # L:L = –∏–Ω–¥–µ–∫—Å 11
                sub_id = str(row[1]).strip()  # B:B = –∏–Ω–¥–µ–∫—Å 1
                subscription_type = str(row[13]).strip().lower() if len(row) > 13 else ""  # N:N = –∏–Ω–¥–µ–∫—Å 13 (–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–æ–≤—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã - –¥–ª—è –Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
                if subscription_type == '—Ä–∞–∑–æ–≤—ã–π':
                    logging.info(f"üéØ –ü—Ä–æ–ø—É—Å–∫–∞—é —Ä–∞–∑–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç {sub_id} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                    continue
                
                if not child_name or not circle_name or not end_date_str or not sub_id:
                    logging.debug(f"–°—Ç—Ä–æ–∫–∞ {i}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Ä–µ–±–µ–Ω–æ–∫:'{child_name}', –∫—Ä—É–∂–æ–∫:'{circle_name}', –¥–∞—Ç–∞:'{end_date_str}', ID:'{sub_id}'")
                    continue
                
                try:
                    end_date = datetime.strptime(end_date_str, '%d.%m.%Y')
                except ValueError:
                    logging.debug(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á "–†–µ–±–µ–Ω–æ–∫|–ö—Ä—É–∂–æ–∫"
                key = f"{child_name}|{circle_name}"
                
                if key not in grouped_subscriptions:
                    grouped_subscriptions[key] = []
                
                subscription_data = {
                    'child_name': child_name,
                    'circle_name': circle_name,
                    'total_classes': total_classes,
                    'cost': cost,
                    'end_date': end_date,
                    'sub_id': sub_id
                }
                
                grouped_subscriptions[key].append(subscription_data)
                
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                subscriptions_by_id[sub_id] = subscription_data
                
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{key}': {sub_id} (–æ–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date_str}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}, –∑–∞–Ω—è—Ç–∏–π: {total_classes})")
            
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(grouped_subscriptions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä '–†–µ–±–µ–Ω–æ–∫-–ö—Ä—É–∂–æ–∫'")
            
            if not grouped_subscriptions:
                logging.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                return 0, ["–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"]
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞—Ö–æ–¥–∏–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑"
            latest_subscriptions = {}
            for key, subs in grouped_subscriptions.items():
                latest_sub = max(subs, key=lambda x: x['end_date'])
                latest_subscriptions[key] = latest_sub
                logging.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è '{key}': {latest_sub['sub_id']} (–æ–∫–æ–Ω—á–∞–Ω–∏–µ: {latest_sub['end_date'].strftime('%d.%m.%Y')})")
            
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –¥–ª—è {len(latest_subscriptions)} –≥—Ä—É–ø–ø")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            try:
                template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                template_data = template_sheet.get_all_values()
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è': {e}")
                return 0, ["–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'"]
            
            # –ü–∞—Ä—Å–∏–º —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º
            subscription_schedule = {}
            logging.info("–ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏...")
            
            for i, row in enumerate(template_data[1:], 2):
                if len(row) < 3:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
                sub_id = str(row[1]).strip() if len(row) > 1 else ""  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–∫–∞–∫ –≤ get_subscription_schedule)
                day_str = str(row[2]).strip() if len(row) > 2 else ""  # C:C - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ —á–∏—Å–ª–æ
                
                if not sub_id or not day_str:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π ID –≤ –Ω–∞—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö
                found = False
                for key, latest_sub in latest_subscriptions.items():
                    if latest_sub['sub_id'] == sub_id:
                        found = True
                        break
                if not found:
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Python (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
                try:
                    day_of_week_num = int(day_str)  # 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    day_of_week = (day_of_week_num - 1) % 7  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Python —Ñ–æ—Ä–º–∞—Ç
                except (ValueError, TypeError):
                    logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ '{day_str}' –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
                    continue
                
                if day_of_week is not None:
                    if sub_id not in subscription_schedule:
                        subscription_schedule[sub_id] = set()
                    subscription_schedule[sub_id].add(day_of_week)
                    logging.debug(f"–ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {sub_id} -> {day_str} (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week})")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏
            for sub_id in subscription_schedule:
                subscription_schedule[sub_id] = list(subscription_schedule[sub_id])
            
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {len(subscription_schedule)} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π
            last_lesson_dates = {}
            logging.info("–ü–æ–∏—Å–∫ –¥–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ...")
            
            for i, row in enumerate(calendar_data[1:], 2):
                if len(row) < 3:
                    continue
                
                sub_id = str(row[1]).strip() if len(row) > 1 else ""  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                date_str = str(row[2]).strip() if len(row) > 2 else ""  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                
                if not sub_id or not date_str:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π ID –≤ –Ω–∞—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö
                found = False
                for key, latest_sub in latest_subscriptions.items():
                    if latest_sub['sub_id'] == sub_id:
                        found = True
                        break
                if not found:
                    continue
                
                try:
                    lesson_date = datetime.strptime(date_str, '%d.%m.%Y')
                    
                    if sub_id not in last_lesson_dates:
                        last_lesson_dates[sub_id] = lesson_date
                    else:
                        if lesson_date > last_lesson_dates[sub_id]:
                            last_lesson_dates[sub_id] = lesson_date
                    
                    logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {sub_id} -> {date_str}")
                    
                except ValueError:
                    continue
            
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è {len(last_lesson_dates)} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
            
            # –®–∞–≥ 3: –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã "–†–µ–±–µ–Ω–æ–∫-–ö—Ä—É–∂–æ–∫"
            forecast_rows = []
            skipped_forecasts = []
            added_payments = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: (–∫—Ä—É–∂–æ–∫, —Ä–µ–±–µ–Ω–æ–∫, –¥–∞—Ç–∞)
            
            logging.info("–®–∞–≥ 3: –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            for key, latest_sub in latest_subscriptions.items():
                logging.info(f"=== –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É: {key} ===")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                if latest_sub['sub_id'] not in subscription_schedule:
                    error_msg = f"{latest_sub['child_name']} - {latest_sub['circle_name']}: –Ω–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ID {latest_sub['sub_id']}"
                    skipped_forecasts.append(error_msg)
                    logging.warning(error_msg)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                if latest_sub['sub_id'] not in last_lesson_dates:
                    error_msg = f"{latest_sub['child_name']} - {latest_sub['circle_name']}: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è ID {latest_sub['sub_id']}"
                    skipped_forecasts.append(error_msg)
                    logging.warning(error_msg)
                    continue
                
                if not latest_sub['total_classes'] or latest_sub['total_classes'] <= 0:
                    error_msg = f"{latest_sub['child_name']} - {latest_sub['circle_name']}: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π"
                    skipped_forecasts.append(error_msg)
                    logging.warning(error_msg)
                    continue
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                last_lesson_date = last_lesson_dates[latest_sub['sub_id']]
                lesson_days = subscription_schedule[latest_sub['sub_id']]
                total_classes = latest_sub['total_classes']
                
                logging.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ: {last_lesson_date.strftime('%d.%m.%Y')}, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞: {lesson_days}, –∑–∞–Ω—è—Ç–∏–π: {total_classes}")
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                current_date = last_lesson_date
                loop_counter = 0
                max_loops = 12  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                
                while loop_counter < max_loops:
                    loop_counter += 1
                    logging.debug(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {loop_counter} –¥–ª—è {key}")
                    
                    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è (= –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞)
                    search_date = current_date + timedelta(days=1)
                    next_payment_date = None
                    
                    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    for _ in range(14):  # –ú–∞–∫—Å–∏–º—É–º 2 –Ω–µ–¥–µ–ª–∏ –ø–æ–∏—Å–∫–∞
                        if search_date.weekday() in lesson_days:
                            next_payment_date = search_date
                            break
                        search_date += timedelta(days=1)
                    
                    if not next_payment_date:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –¥–ª—è {key}")
                        break
                    
                    logging.debug(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: {next_payment_date.strftime('%d.%m.%Y')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    if next_payment_date > end_of_period:
                        logging.debug(f"–î–∞—Ç–∞ {next_payment_date.strftime('%d.%m.%Y')} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ–≥–Ω–æ–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ)
                    if start_of_period <= next_payment_date <= end_of_period:
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                        payment_key = (latest_sub['circle_name'], latest_sub['child_name'], next_payment_date.strftime('%d.%m.%Y'))
                        
                        if payment_key not in added_payments:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                            cost_to_use = latest_sub['cost']
                            
                            forecast_rows.append([
                                latest_sub['circle_name'],  # A:A (–ö—Ä—É–∂–æ–∫)
                                latest_sub['child_name'],   # B:B (–†–µ–±–µ–Ω–æ–∫)
                                next_payment_date.strftime('%d.%m.%Y'),  # C:C (–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã)
                                cost_to_use,  # D:D (–ë—é–¥–∂–µ—Ç) - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ ID
                                "–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"  # E:E (–°—Ç–∞—Ç—É—Å)
                            ])
                            added_payments.add(payment_key)
                            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {next_payment_date.strftime('%d.%m.%Y')} –¥–ª—è {key} —Å –±—é–¥–∂–µ—Ç–æ–º {cost_to_use}")
                        else:
                            logging.debug(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {next_payment_date.strftime('%d.%m.%Y')} –¥–ª—è {key}")
                    else:
                        logging.debug(f"–î–∞—Ç–∞ {next_payment_date.strftime('%d.%m.%Y')} –≤–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                    
                    # –†–∞—Å—á–µ—Ç "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ" –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                    virtual_last_lesson_date = next_payment_date
                    classes_found = 1  # –ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ = –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    
                    # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è –æ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    calc_date = next_payment_date + timedelta(days=1)
                    safety_counter = 0
                    
                    while classes_found < total_classes and safety_counter < 365:
                        if calc_date.weekday() in lesson_days:
                            classes_found += 1
                            virtual_last_lesson_date = calc_date
                        
                        calc_date += timedelta(days=1)
                        safety_counter += 1
                    
                    if classes_found == total_classes:
                        current_date = virtual_last_lesson_date
                        logging.debug(f"–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ {virtual_last_lesson_date.strftime('%d.%m.%Y')}")
                    else:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è {key}")
                        break
                
                logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {key} –∑–∞ {loop_counter} –∏—Ç–µ—Ä–∞—Ü–∏–π")
            
            # –®–∞–≥ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –≤ –ª–∏—Å—Ç "–ü—Ä–æ–≥–Ω–æ–∑"
            if forecast_rows:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAW –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
                forecast_sheet.append_rows(forecast_rows, value_input_option='RAW')
                logging.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(forecast_rows)} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑'")
            else:
                logging.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑")
            
            # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª—è–µ–º "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑" –≤ –ª–∏—Å—Ç–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
            logging.info("–®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü L
            subscription_next_payment = {}
            for row in forecast_rows:
                circle_name = row[0]  # A:A (–ö—Ä—É–∂–æ–∫)
                child_name = row[1]   # B:B (–†–µ–±–µ–Ω–æ–∫)
                payment_date_str = row[2]  # C:C (–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã)
                
                key = f"{child_name}|{circle_name}"
                if key not in subscription_next_payment:
                    subscription_next_payment[key] = payment_date_str
                else:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏ –±–µ—Ä–µ–º –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—é—é
                    try:
                        current_date = datetime.strptime(subscription_next_payment[key], '%d.%m.%Y')
                        new_date = datetime.strptime(payment_date_str, '%d.%m.%Y')
                        if new_date < current_date:
                            subscription_next_payment[key] = payment_date_str
                    except ValueError:
                        pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü L –≤ –ª–∏—Å—Ç–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
            updated_subscriptions = 0
            for key, next_payment_date in subscription_next_payment.items():
                child_name, circle_name = key.split('|')
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ latest_subscriptions
                for latest_key, latest_sub in latest_subscriptions.items():
                    if latest_key == key:
                        try:
                            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –≤ –ª–∏—Å—Ç–µ
                            for i, row in enumerate(subs_data[1:], 2):
                                if (len(row) > 11 and 
                                    str(row[1]).strip() == latest_sub['sub_id'] and  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                                    str(row[2]).strip() == child_name and  # C:C - –†–µ–±–µ–Ω–æ–∫
                                    str(row[3]).strip() == circle_name):   # D:D - –ö—Ä—É–∂–æ–∫
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü L (–∏–Ω–¥–µ–∫—Å 11) - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑
                                    subs_sheet.update_cell(i, 12, next_payment_date)  # L:L = –∫–æ–ª–æ–Ω–∫–∞ 12
                                    updated_subscriptions += 1
                                    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {latest_sub['sub_id']}: {next_payment_date}")
                                    break
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {key}: {e}")
            
            logging.info(f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑: {updated_subscriptions}")
            
            logging.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ì–ù–û–ó–ê –ë–Æ–î–ñ–ï–¢–ê ===")
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(forecast_rows)}")
            
            if skipped_forecasts:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {len(skipped_forecasts)}")
                for error in skipped_forecasts:
                    logging.warning(f"  ‚Ä¢ {error}")
            
            return len(forecast_rows), skipped_forecasts
            
        except Exception as e:
            if "429" in str(e) or "Quota exceeded" in str(e):
                logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                return 0, ["‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"]
            else:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞: {e}", exc_info=True)
                return 0, [f"–û—à–∏–±–∫–∞: {e}"]

    def update_all_calendars(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
        try:
            from datetime import datetime, timedelta
            
            logging.info("=== –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–ï–ô –ó–ê–ù–Ø–¢–ò–ô ===")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            subs_data = subs_sheet.get_all_values()
            
            if len(subs_data) < 2:
                logging.info("–ù–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π")
                return 0, []
            
            updated_count = 0
            errors = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º
            for i, row in enumerate(subs_data[1:], 2):
                if len(row) < 12:
                    continue
                
                sub_id = str(row[1]).strip()  # B:B = –∏–Ω–¥–µ–∫—Å 1
                child_name = str(row[2]).strip()  # C:C = –∏–Ω–¥–µ–∫—Å 2
                circle_name = str(row[3]).strip()  # D:D = –∏–Ω–¥–µ–∫—Å 3
                status = str(row[9]).strip().lower() if len(row) > 9 else ""  # J:J = –∏–Ω–¥–µ–∫—Å 9
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
                if status == "–∑–∞–≤–µ—Ä—à–µ–Ω":
                    logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {sub_id}")
                    continue
                
                if not sub_id or not child_name or not circle_name:
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    start_date_str = str(row[5]).strip() if len(row) > 5 else ""  # F:F = –∏–Ω–¥–µ–∫—Å 5
                    total_classes = int(row[4]) if row[4] and str(row[4]).isdigit() else 0  # E:E = –∏–Ω–¥–µ–∫—Å 4
                    remaining_classes = int(row[7]) if len(row) > 7 and row[7] and str(row[7]).isdigit() else total_classes  # H:H = –∏–Ω–¥–µ–∫—Å 7
                    
                    if not start_date_str or not total_classes:
                        logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç {sub_id}: –Ω–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π")
                        continue
                    
                    start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    schedule_data = self.get_subscription_schedule(sub_id)
                    if not schedule_data:
                        logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç {sub_id}: –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    success = self.update_subscription_calendar(sub_id, start_date, remaining_classes, schedule_data)
                    if success:
                        updated_count += 1
                        logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è {sub_id} ({child_name} - {circle_name})")
                    else:
                        errors.append(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {sub_id}")
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {sub_id}: {e}"
                    errors.append(error_msg)
                    logging.error(error_msg)
            
            logging.info(f"=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–ï–ô: {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ===")
            return updated_count, errors
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {e}", exc_info=True)
            return 0, [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"]

    def update_subscription_calendar(self, sub_id, start_date, classes_count, schedule_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        try:
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            try:
                calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            except:
                calendar_sheet = self.spreadsheet.add_worksheet(title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", rows=1000, cols=8)
                headers = ["‚Ññ", "ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", "–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è", "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", "–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è", "–†–µ–±–µ–Ω–æ–∫", "–û—Ç–º–µ—Ç–∫–∞", "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"]
                calendar_sheet.append_row(headers)
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            all_values = calendar_sheet.get_all_values()
            rows_to_delete = []
            
            for i, row in enumerate(all_values[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                if len(row) > 1 and str(row[1]).strip() == str(sub_id).strip():  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    rows_to_delete.append(i)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for row_num in reversed(rows_to_delete):
                calendar_sheet.delete_rows(row_num)
                logging.debug(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_num} –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_rows = []
            current_date = start_date
            classes_generated = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
            max_id = self._get_next_unique_lesson_id(calendar_sheet) - 1
            logging.info(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {max_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            sub_cell = subs_sheet.find(str(sub_id))
            if not sub_cell:
                return False
            
            sub_row_values = subs_sheet.row_values(sub_cell.row)
            child_name = sub_row_values[2] if len(sub_row_values) > 2 else ""
            circle_name = sub_row_values[3] if len(sub_row_values) > 3 else ""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            safety_counter = 0
            while classes_generated < classes_count and safety_counter < 365:
                day_of_week = current_date.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                for schedule_item in schedule_data:
                    schedule_day = schedule_item['day']
                    if day_of_week == schedule_day:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                        unique_id = max_id + classes_generated + 1  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                        calendar_rows.append([
                            str(unique_id),  # A:A - ‚Ññ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID)
                            sub_id,  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                            current_date.strftime('%d.%m.%Y'),  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                            self.format_time(schedule_item.get('start_time', '')),  # D:D - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                            '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',  # E:E - –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                            child_name,  # F:F - –†–µ–±–µ–Ω–æ–∫
                            '',  # G:G - –û—Ç–º–µ—Ç–∫–∞
                            self.format_time(schedule_item.get('end_time', ''))  # H:H - –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        ])
                        classes_generated += 1
                        logging.debug(f"üî¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID: {unique_id}")
                        break
                
                current_date += timedelta(days=1)
                safety_counter += 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            if calendar_rows:
                calendar_sheet.append_rows(calendar_rows, value_input_option='RAW')
                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(calendar_rows)} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}: {e}")
            return False

    def get_subscription_schedule(self, sub_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ –ª–∏—Å—Ç–∞ '–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'."""
        try:
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            template_data = template_sheet.get_all_values()
            
            logging.info(f"üîç –ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: '{sub_id}'")
            logging.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {len(template_data)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if template_data:
                logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {template_data[0]}")
            
            schedule_items = []
            found_rows = []
            
            for i, row in enumerate(template_data[1:], 2):
                if len(row) < 3:  # –ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞, –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                    logging.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–∫—É {i}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ ({len(row)})")
                    continue
                
                row_sub_id = str(row[1]).strip()  # B:B = –∏–Ω–¥–µ–∫—Å 1
                found_rows.append(f"–°—Ç—Ä–æ–∫–∞ {i}: ID='{row_sub_id}'")
                
                if row_sub_id == str(sub_id).strip():
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {i}: '{row_sub_id}' == '{sub_id}'")
                    
                    try:
                        day_of_week = int(row[2])  # C:C = –∏–Ω–¥–µ–∫—Å 2
                        start_time = str(row[3]).strip() if len(row) > 3 else ""  # D:D = –∏–Ω–¥–µ–∫—Å 3
                        end_time = str(row[4]).strip() if len(row) > 4 else ""  # E:E = –∏–Ω–¥–µ–∫—Å 4
                        
                        logging.info(f"üìÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ {i}: –¥–µ–Ω—å={day_of_week}, –≤—Ä–µ–º—è={start_time}-{end_time}")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç Python (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
                        python_day = (day_of_week - 1) % 7
                        
                        schedule_items.append({
                            'day': python_day,
                            'start_time': start_time,
                            'end_time': end_time
                        })
                        
                        logging.info(f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –¥–µ–Ω—å {python_day}, {start_time}-{end_time}")
                        
                    except (ValueError, IndexError) as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                        continue
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ID –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logging.info(f"üîç –í—Å–µ ID –≤ —à–∞–±–ª–æ–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
            for found_row in found_rows[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                logging.info(f"  {found_row}")
            if len(found_rows) > 10:
                logging.info(f"  ... –∏ –µ—â–µ {len(found_rows) - 10} —Å—Ç—Ä–æ–∫")
            
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è '{sub_id}': {len(schedule_items)}")
            return schedule_items
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {sub_id}: {e}")
            return []

    def update_subscriptions_statistics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó –≤–µ—Ä—Å–∏–∏ 2.0."""
        try:
            from datetime import datetime, timedelta
            import traceback
            
            logging.info("üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø update_subscriptions_statistics() - ID –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è!")
            logging.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –ù–ï —É–¥–∞–ª—è–µ—Ç –∏ –ù–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            
            logging.info("=== –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ê–ë–û–ù–ï–ú–ï–ù–¢–û–í ===")
            
            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            logging.info("–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            
            subs_data = subs_sheet.get_all_values()
            calendar_data = calendar_sheet.get_all_values()
            template_data = template_sheet.get_all_values()
            
            if len(subs_data) < 2:
                return 0, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"]
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã={len(subs_data)-1}, –∫–∞–ª–µ–Ω–¥–∞—Ä—å={len(calendar_data)-1}, —à–∞–±–ª–æ–Ω—ã={len(template_data)-1}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            subscriptions = {}
            for i, row in enumerate(subs_data[1:], 2):
                if len(row) < 15:
                    continue
                sub_id = str(row[1]).strip()  # B:B
                if sub_id:
                    subscriptions[sub_id] = {
                        'row_index': i,
                        'data': row,
                        'child_name': str(row[2]).strip(),  # C:C
                        'circle_name': str(row[3]).strip(),  # D:D
                        'total_classes': int(row[4]) if row[4] and str(row[4]).isdigit() else 0,  # E:E
                        'subscription_type': str(row[13]).strip() if len(row) > 13 else "",  # N:N
                        'status': str(row[9]).strip() if len(row) > 9 else ""  # J:J
                    }
            
            # –ü–∞—Ä—Å–∏–º —à–∞–±–ª–æ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            templates = {}
            for row in template_data[1:]:
                if len(row) < 5:
                    continue
                sub_id = str(row[1]).strip()  # B:B
                if sub_id:
                    if sub_id not in templates:
                        templates[sub_id] = []
                    try:
                        day_of_week = int(row[2])  # C:C
                        start_time = str(row[3]).strip() if len(row) > 3 else ""  # D:D
                        end_time = str(row[4]).strip() if len(row) > 4 else ""  # E:E
                        
                        templates[sub_id].append({
                            'day': (day_of_week - 1) % 7,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Python —Ñ–æ—Ä–º–∞—Ç
                            'start_time': start_time,
                            'end_time': end_time
                        })
                    except (ValueError, IndexError):
                        continue
            
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è {len(templates)} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
            
            # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ø—Ä–æ—à–ª—ã—Ö" –∑–∞–Ω—è—Ç–∏–π
            logging.info("–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–Ω—è—Ç–∏–π...")
            
            new_calendar = []  # –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏–π, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            subscription_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for sub_id in subscriptions:
                subscription_stats[sub_id] = {
                    'attended': 0,
                    'missed': 0,
                    'used_classes': 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "—Å–≥–æ—Ä–µ–≤—à–∏—Ö" –∑–∞–Ω—è—Ç–∏–π
                    'last_lesson_date': None
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            for i, row in enumerate(calendar_data[1:], 2):
                if len(row) < 8:
                    continue
                
                sub_id = str(row[1]).strip()  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                mark = str(row[6]).strip() if len(row) > 6 else ""  # G:G - –û—Ç–º–µ—Ç–∫–∞
                
                if not sub_id or sub_id not in subscriptions:
                    continue
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–º–µ—Ç–∫–∞ - —ç—Ç–æ "–ø—Ä–æ—à–ª–æ–µ" –∑–∞–Ω—è—Ç–∏–µ
                if mark:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                    updated_row = row.copy()
                    if mark.lower() == "–ø–æ—Å–µ—â–µ–Ω–∏–µ":
                        updated_row[4] = "–ó–∞–≤–µ—Ä—à–µ–Ω"  # E:E - –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                        subscription_stats[sub_id]['attended'] += 1
                    else:
                        updated_row[4] = "–ü—Ä–æ–ø—É—Å–∫"  # E:E - –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                        subscription_stats[sub_id]['missed'] += 1
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, "—Å–≥–æ—Ä–∞–µ—Ç" –ª–∏ –∑–∞–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó 2.0
                    subscription_type = subscriptions[sub_id]['subscription_type'].lower()
                    mark_lower = mark.lower()
                    
                    # –ó–∞–Ω—è—Ç–∏–µ "—Å–≥–æ—Ä–∞–µ—Ç" –µ—Å–ª–∏:
                    # 1. –û—Ç–º–µ—Ç–∫–∞ = "–ü–æ—Å–µ—â–µ–Ω–∏–µ" (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
                    # 2. –û—Ç–º–µ—Ç–∫–∞ = "–ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)" (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤) 
                    # 3. –¢–∏–ø = "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" –∏ –ª—é–±–∞—è –æ—Ç–º–µ—Ç–∫–∞
                    if (mark_lower == "–ø–æ—Å–µ—â–µ–Ω–∏–µ" or 
                        mark_lower == "–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)" or
                        (subscription_type == "—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")):
                        subscription_stats[sub_id]['used_classes'] += 1
                    
                    # –ó–∞–Ω—è—Ç–∏–µ –ù–ï "—Å–≥–æ—Ä–∞–µ—Ç" –µ—Å–ª–∏:
                    # –¢–∏–ø = "–° –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏" –∏ –æ—Ç–º–µ—Ç–∫–∞ = "–ü–µ—Ä–µ–Ω–æ—Å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)"
                    # (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ used_classes –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)
                    
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                    try:
                        lesson_date = datetime.strptime(str(row[2]).strip(), '%d.%m.%Y')  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                        if (subscription_stats[sub_id]['last_lesson_date'] is None or 
                            lesson_date > subscription_stats[sub_id]['last_lesson_date']):
                            subscription_stats[sub_id]['last_lesson_date'] = lesson_date
                    except ValueError:
                        pass
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ ID
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∑–∞–Ω—è—Ç–∏—è (–æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–∑–∂–µ –≤ —à–∞–≥–µ 5)
                    new_calendar.append(updated_row)
                    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ—à–ª–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {sub_id} - {mark}")
                
                # –ï—Å–ª–∏ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ—Ç - —ç—Ç–æ "–±—É–¥—É—â–µ–µ" –∑–∞–Ω—è—Ç–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(new_calendar)} –ø—Ä–æ—à–ª—ã—Ö –∑–∞–Ω—è—Ç–∏–π")
            
            # –®–∞–≥ 3: –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ "–±—É–¥—É—â–µ–≥–æ" —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            logging.info("–®–∞–≥ 3: –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            
            updated_subscriptions = 0
            errors = []
            subscription_updates = []  # –î–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
            for sub_id, sub_info in subscriptions.items():
                if sub_info['status'].lower() == "–∑–∞–≤–µ—Ä—à–µ–Ω":
                    logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {sub_id}")
                    continue
                
                try:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏
                    total_classes = sub_info['total_classes']
                    used_classes = subscription_stats[sub_id]['used_classes']
                    remaining_classes = max(0, total_classes - used_classes)
                    
                    logging.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {sub_id}: –≤—Å–µ–≥–æ={total_classes}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ={used_classes}, –æ—Å—Ç–∞–ª–æ—Å—å={remaining_classes}")
                    
                    last_generated_date = subscription_stats[sub_id]['last_lesson_date']
                    
                    # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
                    subscription_type = sub_info.get('subscription_type', '').lower()
                    if subscription_type == '—Ä–∞–∑–æ–≤—ã–π':
                        logging.info(f"üéØ –ü—Ä–æ–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
                    elif remaining_classes > 0 and sub_id in templates:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        start_date = subscription_stats[sub_id]['last_lesson_date']
                        if start_date is None:
                            # –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ, –±–µ—Ä–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                            start_date_str = str(sub_info['data'][5]).strip()  # F:F - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                            if start_date_str:
                                start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
                            else:
                                start_date = datetime.now()
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
                        current_date = start_date + timedelta(days=1)
                        classes_generated = 0
                        safety_counter = 0
                        
                        while classes_generated < remaining_classes and safety_counter < 365:
                            day_of_week = current_date.weekday()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                            for template_item in templates[sub_id]:
                                if day_of_week == template_item['day']:
                                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                                    # ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –ø–æ–∑–∂–µ –≤ —à–∞–≥–µ 5 (–Ω–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ ID)
                                    new_calendar.append([
                                        None,  # A: ‚Ññ (–±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –ø–æ–∑–∂–µ)
                                        sub_id,  # B: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                                        current_date.strftime('%d.%m.%Y'),  # C: –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                                        self.format_time(template_item['start_time']),  # D: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                                        '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',  # E: –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                                        sub_info['child_name'],  # F: –†–µ–±–µ–Ω–æ–∫
                                        '',  # G: –û—Ç–º–µ—Ç–∫–∞
                                        self.format_time(template_item['end_time'])  # H: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                    ])
                                    classes_generated += 1
                                    last_generated_date = current_date
                                    logging.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {sub_id} - {current_date.strftime('%d.%m.%Y')}")
                                    break
                            
                            current_date += timedelta(days=1)
                            safety_counter += 1
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    attended = subscription_stats[sub_id]['attended']
                    missed = subscription_stats[sub_id]['missed']
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ I (–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π)
                    current_remaining_from_sheet = 0
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ I (–∏–Ω–¥–µ–∫—Å 8)
                        if len(sub_info['data']) > 8 and sub_info['data'][8]:
                            current_remaining_from_sheet = int(sub_info['data'][8])
                    except (ValueError, IndexError):
                        current_remaining_from_sheet = 0
                    
                    new_status = sub_info['status']
                    if current_remaining_from_sheet <= 0:
                        new_status = "–ó–∞–≤–µ—Ä—à–µ–Ω"
                    elif attended > 0 and sub_info['status'].lower() == "–æ–∂–∏–¥–∞–µ—Ç":
                        new_status = "–ê–∫—Ç–∏–≤–µ–Ω"
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                    row_data = sub_info['data'].copy()
                    while len(row_data) < 15:
                        row_data.append('')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –¢–ó:
                    row_data[7] = str(attended)  # H:H - –ü—Ä–æ—à–ª–æ –∑–∞–Ω—è—Ç–∏–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ü–æ—Å–µ—â–µ–Ω–∏–µ")
                    # –í–ê–ñ–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü I (–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π) - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º!
                    # row_data[8] = str(remaining_classes)  # I:I - –ù–ï –¢–†–û–ì–ê–ï–ú —ç—Ç–æ—Ç —Å—Ç–æ–ª–±–µ—Ü!
                    row_data[12] = str(missed)  # M:M - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤—Å–µ –≤–∏–¥—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤)
                    row_data[9] = new_status  # J:J - –°—Ç–∞—Ç—É—Å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                    
                    if last_generated_date:
                        row_data[11] = last_generated_date.strftime('%d.%m.%Y')  # L:L - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑
                    
                    subscription_updates.append({
                        'row_index': sub_info['row_index'],
                        'data': row_data[:15]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —Å—Ç–æ–ª–±—Ü–æ–≤
                    })
                    
                    updated_subscriptions += 1
                    logging.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {sub_id}: –ø–æ—Å–µ—â–µ–Ω–æ={attended}, –ø—Ä–æ–ø—É—â–µ–Ω–æ={missed}, –æ—Å—Ç–∞–ª–æ—Å—å={remaining_classes}, —Å—Ç–∞—Ç—É—Å={new_status}")
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}: {e}"
                    errors.append(error_msg)
                    logging.error(error_msg)
            
            # –®–∞–≥ 4: –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ª–∏—Å—Ç–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
            logging.info("–®–∞–≥ 4: –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...")
            
            if subscription_updates:
                try:
                    # –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
                    for update in subscription_updates:
                        row_index = update['row_index']
                        row_data = update['data']
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º
                        range_name = f"A{row_index}:O{row_index}"
                        subs_sheet.update(range_name, [row_data], value_input_option='RAW')
                        
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(subscription_updates)} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}"
                    errors.append(error_msg)
                    logging.error(error_msg)
            
            # –®–∞–≥ 5: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID —Å–æ–±—ã—Ç–∏–π
            logging.info("–®–∞–≥ 5: –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID —Å–æ–±—ã—Ç–∏–π...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –£–î–ê–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –î–ê–ù–ù–´–ï, –¢–û–õ–¨–ö–û –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
            logging.info("üîí –ó–ê–©–ò–¢–ê ID: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤, –ù–ï —Ç—Ä–æ–≥–∞—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            all_data = calendar_sheet.get_all_values()
            logging.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {len(all_data)-1} –∑–∞–Ω—è—Ç–∏–π (ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
            
            # –í–ê–ñ–ù–û: –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –ù–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è, ID –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏!
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—Å—Ç–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
            
            logging.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ê–ë–û–ù–ï–ú–ï–ù–¢–û–í ===")
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {updated_subscriptions}")
            
            return updated_subscriptions, errors
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}", exc_info=True)
            return 0, [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"]
    
    def verify_lesson_ids_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å ID –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π (–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ)."""
        try:
            logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ID –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π...")
            
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            data = calendar_sheet.get_all_values()
            
            if len(data) <= 1:
                return {"status": "empty", "message": "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –ø—É—Å—Ç"}
            
            ids = []
            duplicates = []
            invalid_ids = []
            
            for i, row in enumerate(data[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                if len(row) > 0:
                    lesson_id = str(row[0]).strip()
                    if lesson_id:
                        if lesson_id.isdigit():
                            id_num = int(lesson_id)
                            if id_num in ids:
                                duplicates.append({"row": i, "id": id_num})
                            else:
                                ids.append(id_num)
                        else:
                            invalid_ids.append({"row": i, "id": lesson_id})
                    else:
                        invalid_ids.append({"row": i, "id": "–ø—É—Å—Ç–æ–π"})
            
            result = {
                "status": "checked",
                "total_lessons": len(data) - 1,
                "valid_ids": len(ids),
                "duplicates": duplicates,
                "invalid_ids": invalid_ids,
                "id_range": f"{min(ids) if ids else 0}-{max(ids) if ids else 0}"
            }
            
            if duplicates or invalid_ids:
                logging.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å ID: –¥—É–±–ª–∏={len(duplicates)}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ={len(invalid_ids)}")
            else:
                logging.info("‚úÖ –í—Å–µ ID –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
            
            return result
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ID: {e}")
            return {"status": "error", "message": str(e)}

    def create_visual_calendar(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        try:
            from datetime import datetime, timedelta, date
            import calendar
            
            logging.info("=== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ö–ê–õ–ï–ù–î–ê–†–Ø ===")
            
            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            logging.info("–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫...")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–û–±–∑–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
            try:
                overview_sheet = self.spreadsheet.worksheet("–û–±–∑–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                overview_sheet.clear()
                overview_sheet.clear_basic_filter()
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
                requests = [{
                    'repeatCell': {
                        'range': {
                            'sheetId': overview_sheet.id
                        },
                        'cell': {},
                        'fields': 'userEnteredFormat'
                    }
                }]
                
                body = {'requests': requests}
                self.spreadsheet.batch_update(body)
                logging.info("–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞ '–û–±–∑–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                
            except:
                overview_sheet = self.spreadsheet.add_worksheet(title="–û–±–∑–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è", rows=100, cols=70)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            current_month_start = date(today.year, today.month, 1)
            
            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if today.month == 12:
                next_month_start = date(today.year + 1, 1, 1)
                next_month_end = date(today.year + 1, 1, calendar.monthrange(today.year + 1, 1)[1])
            else:
                next_month_start = date(today.year, today.month + 1, 1)
                next_month_end = date(today.year, today.month + 1, calendar.monthrange(today.year, today.month + 1)[1])
            
            current_month_end = date(today.year, today.month, calendar.monthrange(today.year, today.month)[1])
            
            logging.info(f"–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: {current_month_start} - {next_month_end}")
            
            # –®–∞–≥ 2: –°–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            logging.info("–®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            
            subs_data = subs_sheet.get_all_values()
            calendar_data = calendar_sheet.get_all_values()
            forecast_data = forecast_sheet.get_all_values()
            template_data = template_sheet.get_all_values()
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            marks_map = {}  # "–†–µ–±–µ–Ω–æ–∫|–ö—Ä—É–∂–æ–∫|–î–∞—Ç–∞" -> {–≤—Ä–µ–º—è, –æ—Ç–º–µ—Ç–∫–∞, —Å—Ç–∞—Ç—É—Å}
            budget_map = {}  # "–†–µ–±–µ–Ω–æ–∫|–ö—Ä—É–∂–æ–∫|–î–∞—Ç–∞" -> —Å—É–º–º–∞
            template_map = {}  # ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ -> {–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º—è}
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –æ—Ç–º–µ—Ç–æ–∫ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π
            for row in calendar_data[1:]:
                if len(row) < 7:
                    continue
                
                sub_id = str(row[1]).strip()  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                date_str = str(row[2]).strip()  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                start_time = str(row[3]).strip()  # D:D - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                status = str(row[4]).strip()  # E:E - –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                child = str(row[5]).strip()  # F:F - –†–µ–±–µ–Ω–æ–∫
                mark = str(row[6]).strip() if len(row) > 6 else ""  # G:G - –û—Ç–º–µ—Ç–∫–∞
                
                if not date_str or not child:
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º –∫—Ä—É–∂–æ–∫ –ø–æ ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                circle = ""
                for sub_row in subs_data[1:]:
                    if len(sub_row) > 3 and str(sub_row[1]).strip() == sub_id:
                        circle = str(sub_row[3]).strip()  # D:D - –ö—Ä—É–∂–æ–∫
                        break
                
                if circle:
                    key = f"{child}|{circle}|{date_str}"
                    marks_map[key] = {
                        'time': start_time,
                        'mark': mark,
                        'status': status
                    }
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –±—é–¥–∂–µ—Ç–æ–≤ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
            for row in forecast_data[1:]:
                if len(row) < 4:
                    continue
                
                circle = str(row[0]).strip()  # A:A - –ö—Ä—É–∂–æ–∫
                child = str(row[1]).strip()  # B:B - –†–µ–±–µ–Ω–æ–∫
                date_str = str(row[2]).strip()  # C:C - –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                budget_str = str(row[3]).strip()  # D:D - –ë—é–¥–∂–µ—Ç
                
                if not date_str or not child or not circle:
                    continue
                
                try:
                    budget = float(budget_str.replace(',', '').replace(' ', ''))
                    key = f"{child}|{circle}|{date_str}"
                    
                    if key in budget_map:
                        budget_map[key] += budget
                    else:
                        budget_map[key] = budget
                except ValueError:
                    continue
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É —à–∞–±–ª–æ–Ω–æ–≤
            for row in template_data[1:]:
                if len(row) < 4:
                    continue
                
                sub_id = str(row[1]).strip()  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                try:
                    day_of_week = int(row[2])  # C:C - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    start_time = str(row[3]).strip()  # D:D - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                    
                    template_map[sub_id] = {
                        'day': (day_of_week - 1) % 7,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Python —Ñ–æ—Ä–º–∞—Ç
                        'time': start_time
                    }
                except (ValueError, IndexError):
                    continue
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: –æ—Ç–º–µ—Ç–∫–∏={len(marks_map)}, –±—é–¥–∂–µ—Ç—ã={len(budget_map)}, —à–∞–±–ª–æ–Ω—ã={len(template_map)}")
            
            # –®–∞–≥ 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á–µ—Ç–∞
            logging.info("–®–∞–≥ 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á–µ—Ç–∞...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–∞—Ç—ã)
            header_row = [""]  # –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            current_date = current_month_start
            while current_date <= current_month_end:
                header_row.append(current_date.strftime('%d.%m'))
                current_date += timedelta(days=1)
            
            # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            header_row.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            current_date = next_month_start
            while current_date <= next_month_end:
                header_row.append(current_date.strftime('%d.%m'))
                current_date += timedelta(days=1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–∫–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–¥–µ—Ç–∏ –∏ –∫—Ä—É–∂–∫–∏)
            children_circles = {}
            for row in subs_data[1:]:
                if len(row) < 4:
                    continue
                
                child = str(row[2]).strip()  # C:C - –†–µ–±–µ–Ω–æ–∫
                circle = str(row[3]).strip()  # D:D - –ö—Ä—É–∂–æ–∫
                
                if child and circle:
                    if child not in children_circles:
                        children_circles[child] = set()
                    children_circles[child].add(circle)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π –∏ –∏—Ö –∫—Ä—É–∂–∫–∏
            sorted_children = sorted(children_circles.keys())
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫
            rows_data = [header_row]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            row_labels = []  # –ú–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            for child in sorted_children:
                circles = sorted(list(children_circles[child]))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ (–∂–∏—Ä–Ω—ã–º)
                child_row = [child] + [""] * (len(header_row) - 1)
                rows_data.append(child_row)
                row_labels.append(('child', child))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–∂–∫–∏ —Ä–µ–±–µ–Ω–∫–∞
                for circle in circles:
                    circle_row = [f"  {circle}"] + [""] * (len(header_row) - 1)
                    rows_data.append(circle_row)
                    row_labels.append(('circle', child, circle))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ë—é–¥–∂–µ—Ç"
                budget_row = ["  –ë—é–¥–∂–µ—Ç"] + [""] * (len(header_row) - 1)
                rows_data.append(budget_row)
                row_labels.append(('budget', child))
            
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(rows_data)} —Å—Ç—Ä–æ–∫, {len(header_row)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            # –®–∞–≥ 4: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            logging.info("–®–∞–≥ 4: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
            date_to_col = {}
            col_index = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1 (–ø–æ—Å–ª–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –∏–º–µ–Ω–∞–º–∏)
            
            # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_date = current_month_start
            while current_date <= current_month_end:
                date_to_col[current_date.strftime('%d.%m.%Y')] = col_index
                col_index += 1
                current_date += timedelta(days=1)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü
            col_index += 1
            
            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            current_date = next_month_start
            while current_date <= next_month_end:
                date_to_col[current_date.strftime('%d.%m.%Y')] = col_index
                col_index += 1
                current_date += timedelta(days=1)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            for row_idx, (row_type, *params) in enumerate(row_labels, 1):  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if row_type == 'circle':
                    child, circle = params
                    
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º
                    for date_str, col_idx in date_to_col.items():
                        key = f"{child}|{circle}|{date_str}"
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                        if key in budget_map:
                            rows_data[row_idx][col_idx] = int(budget_map[key])
                            continue
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ—à–µ–¥—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π
                        if key in marks_map and marks_map[key]['mark']:
                            mark_info = marks_map[key]
                            if mark_info['mark'].lower() == '–ø–æ—Å–µ—â–µ–Ω–∏–µ':
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                                time_str = mark_info['time']
                                if ':' in time_str and len(time_str.split(':')) == 2:
                                    try:
                                        hours, minutes = time_str.split(':')
                                        formatted_time = f"{int(hours):02d}:{int(minutes):02d}"
                                        rows_data[row_idx][col_idx] = formatted_time
                                    except ValueError:
                                        rows_data[row_idx][col_idx] = time_str
                                else:
                                    rows_data[row_idx][col_idx] = time_str
                            else:
                                rows_data[row_idx][col_idx] = 'x'
                            continue
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                        if key in marks_map and not marks_map[key]['mark']:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                            time_str = marks_map[key]['time']
                            if ':' in time_str and len(time_str.split(':')) == 2:
                                try:
                                    hours, minutes = time_str.split(':')
                                    formatted_time = f"{int(hours):02d}:{int(minutes):02d}"
                                    rows_data[row_idx][col_idx] = formatted_time
                                except ValueError:
                                    rows_data[row_idx][col_idx] = time_str
                            else:
                                rows_data[row_idx][col_idx] = time_str
                            continue
                
                elif row_type == 'budget':
                    child = params[0]
                    
                    # –°—É–º–º–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç—ã –ø–æ –¥–Ω—è–º –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
                    for date_str, col_idx in date_to_col.items():
                        daily_budget = 0
                        
                        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫—Ä—É–∂–∫–∞–º —Ä–µ–±–µ–Ω–∫–∞
                        if child in children_circles:
                            for circle in children_circles[child]:
                                key = f"{child}|{circle}|{date_str}"
                                if key in budget_map:
                                    daily_budget += budget_map[key]
                        
                        if daily_budget > 0:
                            rows_data[row_idx][col_idx] = int(daily_budget)
            
            # –®–∞–≥ 5: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç
            logging.info("–®–∞–≥ 5: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if rows_data:
                overview_sheet.append_rows(rows_data, value_input_option='RAW')
            
            # –®–∞–≥ 6: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            logging.info("–®–∞–≥ 6: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
            num_rows = len(rows_data)
            num_cols = len(header_row)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ç–∫—É –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
            if num_rows > 1:
                grid_range = f"A2:{chr(ord('A') + num_cols - 1)}{num_rows}"
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
                requests = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ç–∫–∏
                requests.append({
                    'updateBorders': {
                        'range': {
                            'sheetId': overview_sheet.id,
                            'startRowIndex': 1,  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 1)
                            'endRowIndex': num_rows,
                            'startColumnIndex': 0,
                            'endColumnIndex': num_cols
                        },
                        'top': {'style': 'SOLID', 'width': 1, 'color': {'red': 0.95, 'green': 0.95, 'blue': 0.95}},
                        'bottom': {'style': 'SOLID', 'width': 1, 'color': {'red': 0.95, 'green': 0.95, 'blue': 0.95}},
                        'left': {'style': 'SOLID', 'width': 1, 'color': {'red': 0.95, 'green': 0.95, 'blue': 0.95}},
                        'right': {'style': 'SOLID', 'width': 1, 'color': {'red': 0.95, 'green': 0.95, 'blue': 0.95}},
                        'innerHorizontal': {'style': 'SOLID', 'width': 1, 'color': {'red': 0.95, 'green': 0.95, 'blue': 0.95}},
                        'innerVertical': {'style': 'SOLID', 'width': 1, 'color': {'red': 0.95, 'green': 0.95, 'blue': 0.95}}
                    }
                })
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –¥–µ—Ç–µ–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
                for row_idx, (row_type, *params) in enumerate(row_labels, 2):  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å A2
                    if row_type == 'child':
                        requests.append({
                            'repeatCell': {
                                'range': {
                                    'sheetId': overview_sheet.id,
                                    'startRowIndex': row_idx - 1,
                                    'endRowIndex': row_idx,
                                    'startColumnIndex': 0,
                                    'endColumnIndex': 1
                                },
                                'cell': {
                                    'userEnteredFormat': {
                                        'textFormat': {
                                            'bold': True
                                        }
                                    }
                                },
                                'fields': 'userEnteredFormat.textFormat.bold'
                            }
                        })
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –∫—Ä—É–∂–∫–∞
                for row_idx, (row_type, *params) in enumerate(row_labels, 2):
                    if row_type == 'circle':
                        child, circle = params
                        
                        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º —Å—Ç—Ä–æ–∫–∏ –∫—Ä—É–∂–∫–∞
                        for date_str, col_idx in date_to_col.items():
                            key = f"{child}|{circle}|{date_str}"
                            cell_value = rows_data[row_idx - 1][col_idx] if col_idx < len(rows_data[row_idx - 1]) else ""
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                            if cell_value and cell_value != '':
                                # –ï—Å–ª–∏ —ç—Ç–æ –±—é–¥–∂–µ—Ç (—á–∏—Å–ª–æ) - –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω + —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
                                if key in budget_map:
                                    requests.append({
                                        'repeatCell': {
                                            'range': {
                                                'sheetId': overview_sheet.id,
                                                'startRowIndex': row_idx - 1,
                                                'endRowIndex': row_idx,
                                                'startColumnIndex': col_idx,
                                                'endColumnIndex': col_idx + 1
                                            },
                                            'cell': {
                                                'userEnteredFormat': {
                                                    'numberFormat': {
                                                        'type': 'NUMBER',
                                                        'pattern': '#,##0'
                                                    },
                                                    'backgroundColor': {
                                                        'red': 0.96,
                                                        'green': 0.8,
                                                        'blue': 0.8
                                                    }
                                                }
                                            },
                                            'fields': 'userEnteredFormat.numberFormat,userEnteredFormat.backgroundColor'
                                        }
                                    })
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è - –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                                elif (key in marks_map and marks_map[key]['mark'] and 
                                      marks_map[key]['mark'].lower() == '–ø–æ—Å–µ—â–µ–Ω–∏–µ' and
                                      cell_value != 'x'):
                                    requests.append({
                                        'repeatCell': {
                                            'range': {
                                                'sheetId': overview_sheet.id,
                                                'startRowIndex': row_idx - 1,
                                                'endRowIndex': row_idx,
                                                'startColumnIndex': col_idx,
                                                'endColumnIndex': col_idx + 1
                                            },
                                            'cell': {
                                                'userEnteredFormat': {
                                                    'backgroundColor': {
                                                        'red': 0.85,
                                                        'green': 0.92,
                                                        'blue': 0.83
                                                    }
                                                }
                                            },
                                            'fields': 'userEnteredFormat.backgroundColor'
                                        }
                                    })
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "–ë—é–¥–∂–µ—Ç" –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                for row_idx, (row_type, *params) in enumerate(row_labels, 2):
                    if row_type == 'budget':
                        requests.append({
                            'repeatCell': {
                                'range': {
                                    'sheetId': overview_sheet.id,
                                    'startRowIndex': row_idx - 1,
                                    'endRowIndex': row_idx,
                                    'startColumnIndex': 1,
                                    'endColumnIndex': num_cols
                                },
                                'cell': {
                                    'userEnteredFormat': {
                                        'numberFormat': {
                                            'type': 'NUMBER',
                                            'pattern': '#,##0'
                                        }
                                    }
                                },
                                'fields': 'userEnteredFormat.numberFormat'
                            }
                        })
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if requests:
                    body = {'requests': requests}
                    self.spreadsheet.batch_update(body)
                    logging.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            logging.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ö–ê–õ–ï–ù–î–ê–†–Ø ===")
            return True
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
            return False

    def get_subscriptions(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã."""
        try:
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            data = subs_sheet.get_all_records()
            return data
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def get_current_subscription_by_child_circle(self, child_name, circle_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –∏ –∫—Ä—É–∂–∫–∞ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)."""
        try:
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            data = subs_sheet.get_all_records()
            
            # –ò—â–µ–º –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã —Ä–µ–±–µ–Ω–æ–∫-–∫—Ä—É–∂–æ–∫
            matching_subs = []
            for sub in data:
                if (str(sub.get('–†–µ–±–µ–Ω–æ–∫', '')).strip() == str(child_name).strip() and 
                    str(sub.get('–ö—Ä—É–∂–æ–∫', '')).strip() == str(circle_name).strip()):
                    matching_subs.append(sub)
            
            if not matching_subs:
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ ID)
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É)
            matching_subs.sort(key=lambda x: str(x.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')), reverse=True)
            return matching_subs[0]
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è {child_name} - {circle_name}: {e}")
            return None
    
    def transfer_forecast_to_paid(self, subscription_key, payment_date=None):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é –æ–ø–ª–∞—Ç—É –≤ –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ' –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        try:
            child_name, circle_name = subscription_key.split("|")
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            paid_sheet = self.spreadsheet.worksheet("–û–ø–ª–∞—á–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
            all_data = forecast_sheet.get_all_values()
            if not all_data:
                return "‚úÖ –õ–∏—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—É—Å—Ç"
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            rows_to_transfer = []
            rows_to_delete = []
            
            for i, row in enumerate(all_data[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                if len(row) >= 4:
                    row_circle = str(row[0]).strip()  # A: –ö—Ä—É–∂–æ–∫
                    row_child = str(row[1]).strip()   # B: –†–µ–±–µ–Ω–æ–∫
                    row_payment_date = str(row[2]).strip()  # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞, –∫—Ä—É–∂–∫–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
                    if (row_circle == circle_name and row_child == child_name):
                        if payment_date is None or row_payment_date == payment_date:
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ "–û–ø–ª–∞—á–µ–Ω–æ"
                            budget = str(row[3]).strip()        # D: –ë—é–¥–∂–µ—Ç
                            
                            # –§–æ—Ä–º–∞—Ç –¥–ª—è –ª–∏—Å—Ç–∞ "–û–ø–ª–∞—á–µ–Ω–æ": [–ö—Ä—É–∂–æ–∫, –†–µ–±–µ–Ω–æ–∫, –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã, –ë—é–¥–∂–µ—Ç, –°—Ç–∞—Ç—É—Å]
                            paid_row = [circle_name, child_name, row_payment_date, budget, "–û–ø–ª–∞—á–µ–Ω–æ"]
                            rows_to_transfer.append(paid_row)
                            rows_to_delete.append(i)
                            
                            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—ë –∏ –≤—ã—Ö–æ–¥–∏–º
                            if payment_date is not None:
                                break
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ "–û–ø–ª–∞—á–µ–Ω–æ"
            if rows_to_transfer:
                for row in rows_to_transfer:
                    paid_sheet.append_row(row, value_input_option='USER_ENTERED')
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ "–ü—Ä–æ–≥–Ω–æ–∑" (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
                for row_index in sorted(rows_to_delete, reverse=True):
                    forecast_sheet.delete_rows(row_index)
                
                logging.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(rows_to_transfer)} –æ–ø–ª–∞—Ç –∏–∑ –ü—Ä–æ–≥–Ω–æ–∑ –≤ –û–ø–ª–∞—á–µ–Ω–æ –¥–ª—è {child_name} - {circle_name}")
                return f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(rows_to_transfer)} –æ–ø–ª–∞—Ç –≤ '–û–ø–ª–∞—á–µ–Ω–æ'"
            else:
                return "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –æ–ø–ª–∞—Ç –¥–ª—è {subscription_key}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}"

    def delete_forecast_payments_by_key(self, subscription_key):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        try:
            child_name, circle_name = subscription_key.split("|")
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_data = forecast_sheet.get_all_values()
            if not all_data:
                return "‚úÖ –õ–∏—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—É—Å—Ç"
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            rows_to_delete = []
            for i, row in enumerate(all_data[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                if len(row) >= 2:
                    row_circle = str(row[0]).strip()  # A: –ö—Ä—É–∂–æ–∫
                    row_child = str(row[1]).strip()   # B: –†–µ–±–µ–Ω–æ–∫
                    
                    if row_circle == circle_name and row_child == child_name:
                        rows_to_delete.append(i)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
            deleted_count = 0
            for row_index in sorted(rows_to_delete, reverse=True):
                forecast_sheet.delete_rows(row_index)
                deleted_count += 1
            
            return f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –æ–ø–ª–∞—Ç –¥–ª—è {child_name} - {circle_name}"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –æ–ø–ª–∞—Ç –¥–ª—è {subscription_key}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}"
    
    def create_schedule_template_for_new_subscription(self, new_sub_id, old_sub_id):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–≥–æ."""
        try:
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            old_schedule = self.get_subscription_schedule(old_sub_id)
            if not old_schedule:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {old_sub_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —à–∞–±–ª–æ–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            new_template_rows = []
            for schedule_item in old_schedule:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Python –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6) –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã (1-7)
                day_of_week = schedule_item['day'] + 1
                if day_of_week == 7:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ Python = 6, –≤ —Ç–∞–±–ª–∏—Ü–µ = 7
                    day_of_week = 7
                
                new_row = [
                    '',  # A: –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
                    new_sub_id,  # B: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–Ω–æ–≤—ã–π)
                    day_of_week,  # C: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    self.format_time(schedule_item['start_time']),  # D: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                    self.format_time(schedule_item['end_time']),    # E: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    ''   # F: –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
                ]
                new_template_rows.append(new_row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —à–∞–±–ª–æ–Ω
            if new_template_rows:
                template_sheet.append_rows(new_template_rows, value_input_option='RAW')
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(new_template_rows)} –∑–∞–ø–∏—Å–µ–π –≤ —à–∞–±–ª–æ–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {new_sub_id}")
                return True
            else:
                logging.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {new_sub_id}")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {new_sub_id}: {e}")
            return False

    def get_calendar_lessons(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = 'calendar_lessons'
            cached_data = self._get_from_cache(cache_key)
            if cached_data is not None:
                return cached_data
            
            logging.info("üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–∏—Å—Ç—É '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–æ—Ç—ã
            max_retries = 3
            calendar_sheet = None
            
            for attempt in range(max_retries):
                try:
                    calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
                    break
                except gspread.exceptions.APIError as e:
                    if "429" in str(e) and attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 15  # 15, 30, 45 —Å–µ–∫—É–Ω–¥
                        logging.warning(f"‚ö†Ô∏è –ö–≤–æ—Ç–∞ Google Sheets –ø—Ä–µ–≤—ã—à–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                        time.sleep(wait_time)
                        continue
                    else:
                        raise
            
            if not calendar_sheet:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–∏—Å—Ç—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return []
            
            logging.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞...")
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            data = None
            for attempt in range(max_retries):
                try:
                    data = calendar_sheet.get_all_records()
                    break
                except gspread.exceptions.APIError as e:
                    if "429" in str(e) and attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 15
                        logging.warning(f"‚ö†Ô∏è –ö–≤–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                        time.sleep(wait_time)
                        continue
                    else:
                        raise
            
            if data is not None:
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                if data:
                    logging.info(f"üìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {data[0]}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
                self._save_to_cache(cache_key, data, duration=30)
                
                return data
            else:
                return []
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π: {e}", exc_info=True)
            return []

    def get_lessons_by_subscription(self, subscription_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫."""
        try:
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            all_data = calendar_sheet.get_all_values()
            
            if not all_data:
                return []
            
            headers = all_data[0]
            lessons_with_rows = []
            
            for i, row in enumerate(all_data[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 2 (1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                if len(row) > 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    lesson_subscription_id = row[1] if len(row) > 1 else ''  # B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    
                    if str(lesson_subscription_id).strip() == str(subscription_id).strip():
                        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è
                        lesson = {}
                        for j, header in enumerate(headers):
                            lesson[header] = row[j] if j < len(row) else ''
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                        lesson['_row_number'] = i
                        lessons_with_rows.append(lesson)
            
            logging.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(lessons_with_rows)} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            for lesson in lessons_with_rows:
                logging.info(f"   –°—Ç—Ä–æ–∫–∞ {lesson['_row_number']}: {lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')} - {lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')}")
            
            return lessons_with_rows
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}: {e}")
            return []

    def update_lesson_mark(self, lesson_id, mark):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è –ø–æ ID."""
        try:
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            data = calendar_sheet.get_all_values()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID –∑–∞–Ω—è—Ç–∏—è
            lesson_row = None
            
            # –ï—Å–ª–∏ ID —Å–æ—Å—Ç–∞–≤–Ω–æ–π (–¥–∞—Ç–∞_–∏–Ω–¥–µ–∫—Å_–∏–º—è), —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ–≥–æ
            if '_' in str(lesson_id) and len(str(lesson_id).split('_')) >= 3:
                parts = str(lesson_id).split('_')
                target_date = parts[0]
                target_index = int(parts[1])
                target_child = '_'.join(parts[2:])  # –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å _
                
                # –ò—â–µ–º –ø–æ –¥–∞—Ç–µ –∏ –∏–º–µ–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞
                current_index = 0
                for i, row in enumerate(data):
                    if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        continue
                    if len(row) > 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞—Ç–∞ –∏ —Ä–µ–±–µ–Ω–æ–∫
                        row_date = str(row[2]).strip() if len(row) > 2 else ''  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                        row_child = str(row[5]).strip() if len(row) > 5 else ''  # F:F - –†–µ–±–µ–Ω–æ–∫
                        
                        if row_date == target_date and row_child == target_child:
                            if current_index == target_index:
                                lesson_row = i + 1
                                break
                            current_index += 1
            else:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID –≤ —Å—Ç–æ–ª–±—Ü–µ A
                for i, row in enumerate(data):
                    if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        continue
                    if len(row) > 0 and str(row[0]).strip() == str(lesson_id).strip():  # A:A - ‚Ññ (ID –∑–∞–Ω—è—Ç–∏—è)
                        lesson_row = i + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –≤ Google Sheets –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lesson_id –∫–∞–∫ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                if not lesson_row and lesson_id.isdigit():
                    potential_row = int(lesson_id)
                    if 2 <= potential_row <= len(data):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞—á–∏–Ω–∞—è —Å 2, —Ç.–∫. 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                        lesson_row = potential_row
                        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º lesson_id {lesson_id} –∫–∞–∫ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏")
                    else:
                        logging.error(f"–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ {lesson_id} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (2-{len(data)})")
            
            if not lesson_row:
                logging.error(f"–ó–∞–Ω—è—Ç–∏–µ —Å ID {lesson_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü G (–æ—Ç–º–µ—Ç–∫–∞)
            calendar_sheet.update_cell(lesson_row, 7, mark)
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è (—Å—Ç—Ä–æ–∫–∞ {lesson_row}, —Å—Ç–æ–ª–±–µ—Ü G): {mark}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ E
            status_map = {
                '–ø–æ—Å–µ—â–µ–Ω–∏–µ': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                '–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)': '–ü—Ä–æ–ø—É—Å–∫',
                '–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)': '–ü—Ä–æ–ø—É—Å–∫',
                '–ø–µ—Ä–µ–Ω–æ—Å': '–ü—Ä–æ–ø—É—Å–∫'
            }
            new_status = status_map.get(mark.lower(), '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')
            calendar_sheet.update_cell(lesson_row, 5, new_status)
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–Ω—è—Ç–∏—è (—Å—Ç—Ä–æ–∫–∞ {lesson_row}, —Å—Ç–æ–ª–±–µ—Ü E): {new_status}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            lesson_data_row = data[lesson_row - 1]  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ lesson_row –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
            subscription_id = lesson_data_row[1]  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            child_name = lesson_data_row[5]  # F:F - –†–µ–±–µ–Ω–æ–∫
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            subscription_info = self.get_subscription_details(subscription_id)
            if subscription_info:
                subscription_type = subscription_info.get('subscription_type', '').lower()
                
                # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–µ–Ω–æ—Å–∞ –¢–û–õ–¨–ö–û –¥–ª—è —Ç—Ä–µ—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫
                if subscription_type == '—Ä–∞–∑–æ–≤—ã–π':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤—ã–±–æ—Ä –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è —ç—Ç–æ–π –æ—Ç–º–µ—Ç–∫–∏
                    transfer_marks = ['–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)', '–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)', '–ø–µ—Ä–µ–Ω–æ—Å']
                    
                    if mark.lower() in transfer_marks:
                        logging.info(f"üéØ –†–∞–∑–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ '{mark}'")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
                        self._update_razoviy_missed_classes_stats(subscription_id)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
                        return {
                            'status': 'needs_transfer_choice',
                            'subscription_id': subscription_id,
                            'child_name': child_name,
                            'lesson_data': {
                                'lesson_id': lesson_id,
                                'date': lesson_data_row[2],  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                                'start_time': lesson_data_row[3],  # D:D - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                                'end_time': lesson_data_row[7],  # H:H - –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                'mark': mark
                            }
                        }
                    else:
                        # –î–ª—è –æ—Ç–º–µ—Ç–∫–∏ "–ü–æ—Å–µ—â–µ–Ω–∏–µ" –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
                        logging.info(f"üéØ –†–∞–∑–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} - –æ—Ç–º–µ—Ç–∫–∞ '{mark}' –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤)
            # –í–ê–ñ–ù–û: "–ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)" –ù–ï —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ!
            if mark.lower() in ['–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)', '–æ—Ç–º–µ–Ω–∞ (–¥—Ä—É–≥–æ–µ)', '–ø–µ—Ä–µ–Ω–æ—Å']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —Ä–∞–∑–æ–≤—ã–π)
                if subscription_info and subscription_info.get('subscription_type', '').lower() != '—Ä–∞–∑–æ–≤—ã–π':
                    logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞/–ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è {lesson_id}, —Å–æ–∑–¥–∞—é –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ...")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤–∑–∞–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ
                    replacement_created = self._create_replacement_lesson(subscription_id, child_name)
                    if replacement_created:
                        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
                    else:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
                elif not subscription_info:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ {subscription_id}")
            elif mark.lower() == '–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)':
                # –î–ª—è "–ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)" —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                logging.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ) –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} - –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –ù–ï —Å–æ–∑–¥–∞–µ—Ç—Å—è")
            
            # –°—Ç–æ–ª–±–µ—Ü I (–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π) –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –≤ update_subscription_stats()
            # –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            logging.info("‚úÖ –û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å—Ç–æ–ª–±—Ü—ã H/I/M –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ update_subscription_stats()")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._clear_cache('calendar_lessons')
            logging.debug("üóëÔ∏è –ö–µ—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º subscription_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            return {'success': True, 'subscription_id': subscription_id}
        except Exception as e:
            import httpx
            error_msg = str(e)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if isinstance(e, httpx.ReadError) or "httpx.ReadError" in error_msg:
                logging.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è {lesson_id}: {e}")
                return False
            elif "429" in error_msg or "Quota exceeded" in error_msg:
                logging.error(f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è {lesson_id}: {e}")
                return False
            elif "timeout" in error_msg.lower():
                logging.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è {lesson_id}: {e}")
                return False
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è {lesson_id}: {e}")
                return False

    def _update_remaining_lessons(self, subscription_id, change):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ I –ª–∏—Å—Ç–∞ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'."""
        try:
            logging.info(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ I –¥–ª—è {subscription_id}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change}")
            
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            cell = subs_sheet.find(str(subscription_id))
            
            if cell:
                headers = subs_sheet.row_values(1)
                row_values = subs_sheet.row_values(cell.row)
                
                if '–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π' in headers:
                    remaining_col = headers.index('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π') + 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    current_remaining = 0
                    if len(row_values) > remaining_col - 1:
                        try:
                            current_remaining = int(row_values[remaining_col - 1]) if row_values[remaining_col - 1] else 0
                        except ValueError:
                            current_remaining = 0
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    new_remaining = max(0, current_remaining + change)  # –ù–µ –¥–∞–µ–º —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    subs_sheet.update_cell(cell.row, remaining_col, new_remaining)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π
                    if '–°—Ç–∞—Ç—É—Å' in headers:
                        status_col = headers.index('–°—Ç–∞—Ç—É—Å') + 1
                        if new_remaining <= 0:
                            subs_sheet.update_cell(cell.row, status_col, '–ó–∞–≤–µ—Ä—à–µ–Ω')
                        else:
                            subs_sheet.update_cell(cell.row, status_col, '–ê–∫—Ç–∏–≤–µ–Ω')
                    
                    logging.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ '–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π' –¥–ª—è {subscription_id}: {current_remaining} ‚Üí {new_remaining}")
                    return True
                else:
                    logging.error(f"–°—Ç–æ–ª–±–µ—Ü '–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'")
                    return False
            else:
                logging.error(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã'")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {subscription_id}: {e}")
            return False

    def refresh_all_subscriptions_data(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ I (–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π)."""
        try:
            logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            subs_data = subs_sheet.get_all_records()
            
            updated_count = 0
            
            for sub in subs_data:
                subscription_id = sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
                remaining_lessons = sub.get('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π', 0)
                
                if subscription_id and remaining_lessons:
                    try:
                        remaining_int = int(remaining_lessons)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π
                        if remaining_int > 0:
                            # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
                            self._create_lessons_from_template(subscription_id, remaining_int)
                            
                            # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
                            self._create_forecast_entries(subscription_id)
                            
                            updated_count += 1
                            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} ({remaining_int} –∑–∞–Ω—è—Ç–∏–π)")
                        else:
                            logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id}")
                            
                    except ValueError:
                        logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π' –¥–ª—è {subscription_id}: {remaining_lessons}")
                        continue
            
            logging.info(f"üéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
            return f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def _create_lessons_from_template(self, subscription_id, lessons_count):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
            sub_info = self.get_subscription_details(subscription_id)
            if not sub_info:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ {subscription_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            template_data = template_sheet.get_all_records()
            
            # –ò—â–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            template_row = None
            for row in template_data:
                if str(row.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')).strip() == str(subscription_id).strip():
                    template_row = row
                    break
            
            if not template_row:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {subscription_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
            schedule = {}
            days_map = {
                '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–í—Ç–æ—Ä–Ω–∏–∫': 1, '–°—Ä–µ–¥–∞': 2, '–ß–µ—Ç–≤–µ—Ä–≥': 3,
                '–ü—è—Ç–Ω–∏—Ü–∞': 4, '–°—É–±–±–æ—Ç–∞': 5, '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
            }
            
            for day, day_num in days_map.items():
                if template_row.get(day):
                    time_range = template_row.get(day, '').strip()
                    if time_range and '-' in time_range:
                        start_time, end_time = time_range.split('-')
                        schedule[day_num] = {
                            'start_time': start_time.strip(),
                            'end_time': end_time.strip()
                        }
            
            if not schedule:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω–µ –¥–ª—è {subscription_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞—á–∏–Ω–∞—è —Å –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç—ã
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
            max_id = self._get_next_unique_lesson_id(calendar_sheet) - 1
            logging.info(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {max_id}")
            
            current_date = datetime.now().date()
            created_lessons = 0
            
            while created_lessons < lessons_count:
                weekday = current_date.weekday()
                
                if weekday in schedule:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
                    unique_id = max_id + created_lessons + 1
                    lesson_data = [
                        str(unique_id),  # A: ‚Ññ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID)
                        subscription_id,  # B: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                        current_date.strftime('%d.%m.%Y'),  # C: –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                        schedule[weekday]['start_time'],  # D: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                        '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',  # E: –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                        sub_info.get('child_name', ''),  # F: –†–µ–±–µ–Ω–æ–∫
                        '',  # G: –û—Ç–º–µ—Ç–∫–∞
                        schedule[weekday]['end_time'],  # H: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        sub_info.get('circle_name', ''),  # I: –ö—Ä—É–∂–æ–∫
                    ]
                    
                    calendar_sheet.append_row(lesson_data)
                    created_lessons += 1
                    logging.info(f"üìÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ {subscription_id} –Ω–∞ {current_date} —Å ID {unique_id}")
                
                current_date += timedelta(days=1)
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if (current_date - datetime.now().date()).days > 365:
                    logging.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞ –¥–∞—Ç –¥–ª—è {subscription_id}")
                    break
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_lessons} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {subscription_id}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –∏–∑ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è {subscription_id}: {e}")
            return False

    def _create_forecast_entries(self, subscription_id):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç–µ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
            sub_info = self.get_subscription_details(subscription_id)
            if not sub_info:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            calendar_data = calendar_sheet.get_all_records()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            subscription_lessons = [
                lesson for lesson in calendar_data 
                if str(lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')).strip() == str(subscription_id).strip()
            ]
            
            if not subscription_lessons:
                logging.info(f"–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è {subscription_id}")
                return True
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
            from datetime import datetime
            from collections import defaultdict
            
            monthly_groups = defaultdict(list)
            
            for lesson in subscription_lessons:
                lesson_date_str = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
                if lesson_date_str:
                    try:
                        lesson_date = datetime.strptime(lesson_date_str, '%d.%m.%Y')
                        month_key = lesson_date.strftime('%Y-%m')
                        monthly_groups[month_key].append(lesson)
                    except ValueError:
                        continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            
            for month_key, lessons in monthly_groups.items():
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)
                year, month = month_key.split('-')
                payment_date = f"01.{month}.{year}"
                
                # –í—ã—á–∏—Å–ª—è–µ–º –±—é–¥–∂–µ—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π * —Å—Ç–æ–∏–º–æ—Å—Ç—å)
                lessons_count = len(lessons)
                cost_per_lesson = sub_info.get('cost', 0)
                try:
                    cost_per_lesson = float(cost_per_lesson) if cost_per_lesson else 0
                except ValueError:
                    cost_per_lesson = 0
                
                total_budget = lessons_count * cost_per_lesson
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
                forecast_data = [
                    sub_info.get('circle_name', ''),  # A: –ö—Ä—É–∂–æ–∫
                    sub_info.get('child_name', ''),   # B: –†–µ–±–µ–Ω–æ–∫
                    payment_date,                     # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    total_budget,                     # D: –ë—é–¥–∂–µ—Ç
                    '–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',           # E: –°—Ç–∞—Ç—É—Å
                ]
                
                forecast_sheet.append_row(forecast_data)
                logging.info(f"üí∞ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {subscription_id}: {month_key}, {total_budget} —Ä—É–±.")
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {subscription_id}: {e}")
            return False

    def _create_replacement_lesson(self, subscription_id, child_name):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —à–∞–±–ª–æ–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        try:
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            template_data = template_sheet.get_all_values()
            
            # –ò—â–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            schedule_template = []
            for row in template_data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(row) >= 5 and str(row[1]).strip() == subscription_id:  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    try:
                        day_of_week = int(row[2]) - 1  # C:C - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Python —Ñ–æ—Ä–º–∞—Ç 0-6)
                        start_time = str(row[3]).strip()  # D:D - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                        end_time = str(row[4]).strip()  # E:E - –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        
                        schedule_template.append({
                            'day': day_of_week % 7,  # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 0-6
                            'start_time': start_time,
                            'end_time': end_time
                        })
                    except (ValueError, IndexError):
                        continue
            
            if not schedule_template:
                logging.warning(f"–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            calendar_data = calendar_sheet.get_all_values()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            last_lesson_date = None
            for row in calendar_data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(row) >= 6 and str(row[1]).strip() == subscription_id:  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    try:
                        lesson_date_str = str(row[2]).strip()  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                        lesson_date = datetime.strptime(lesson_date_str, '%d.%m.%Y')
                        if last_lesson_date is None or lesson_date > last_lesson_date:
                            last_lesson_date = lesson_date
                    except ValueError:
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
            if last_lesson_date is None:
                start_date = datetime.now()
            else:
                start_date = last_lesson_date + timedelta(days=1)
            
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –ø–æ —à–∞–±–ª–æ–Ω—É
            current_date = start_date
            max_attempts = 60  # –ò—â–µ–º –Ω–µ –±–æ–ª–µ–µ 60 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
            attempts = 0
            
            while attempts < max_attempts:
                day_of_week = current_date.weekday()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
                for template_item in schedule_template:
                    if day_of_week == template_item['day']:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                        return self._add_lesson_to_calendar(
                            subscription_id,
                            child_name,
                            current_date,
                            template_item['start_time'],
                            template_item['end_time']
                        )
                
                current_date += timedelta(days=1)
                attempts += 1
            
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è: {e}")
            return False

    def _get_next_unique_lesson_id(self, calendar_sheet=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–Ω—è—Ç–∏—è."""
        try:
            if calendar_sheet is None:
                calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            
            all_data = calendar_sheet.get_all_values()
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –≤ —Å—Ç–æ–ª–±—Ü–µ A
            max_id = 0
            for i, row in enumerate(all_data):
                if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    continue
                if len(row) > 0 and row[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A
                    try:
                        current_id = int(str(row[0]).strip())
                        if current_id > max_id:
                            max_id = current_id
                    except (ValueError, TypeError):
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            
            # –°–ª–µ–¥—É—é—â–∏–π ID = –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π + 1
            next_id = max_id + 1
            logging.debug(f"üî¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π = {max_id}, –Ω–æ–≤—ã–π = {next_id}")
            return next_id
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID: {e}")
            return 1  # Fallback ID

    def _add_lesson_to_calendar(self, subscription_id, child_name, lesson_date, start_time, end_time):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π."""
        try:
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–Ω—è—Ç–∏—è
            next_id = self._get_next_unique_lesson_id(calendar_sheet)
            logging.info(f"üî¢ –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID: {next_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–∂–∫–∞
            subscription_info = self.get_subscription_details(subscription_id)
            circle_name = subscription_info.get('circle_name', '') if subscription_info else ''
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–Ω—è—Ç–∏—è
            new_lesson = [
                str(next_id),  # A:A - ‚Ññ (ID –∑–∞–Ω—è—Ç–∏—è)
                subscription_id,  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                lesson_date.strftime('%d.%m.%Y'),  # C:C - –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
                self.format_time(start_time),  # D:D - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',  # E:E - –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
                child_name,  # F:F - –†–µ–±–µ–Ω–æ–∫
                '',  # G:G - –û—Ç–º–µ—Ç–∫–∞ (–ø—É—Å—Ç–∞—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è)
                self.format_time(end_time)  # H:H - –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            calendar_sheet.append_row(new_lesson)
            
            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ: ID={next_id}, –î–∞—Ç–∞={lesson_date.strftime('%d.%m.%Y')}, –†–µ–±–µ–Ω–æ–∫={child_name}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.calendar_service:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç create_event
                    lesson_data = {
                        'lesson_id': str(next_id),  # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–Ω—è—Ç–∏—è
                        'subscription_id': subscription_id,  # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                        'child': child_name,
                        'date': lesson_date.strftime('%d.%m.%Y'),
                        'start_time': start_time,
                        'end_time': end_time,
                        'status': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',  # –°—Ç–∞—Ç—É—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                        'mark': ''  # –ü—É—Å—Ç–∞—è –æ—Ç–º–µ—Ç–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                    }
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                    existing_event = self.calendar_service.find_event_by_lesson_id(str(next_id))
                    if not existing_event:
                        existing_event = self.calendar_service.find_event_by_lesson_details(lesson_data, circle_name)
                    
                    if existing_event:
                        logging.info(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ")
                    else:
                        event_created = self.calendar_service.create_event(lesson_data, circle_name)
                        if event_created:
                            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è —Å ID {next_id}")
                except Exception as calendar_error:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar: {calendar_error}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
            return False

    def _update_razoviy_missed_classes_stats(self, subscription_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        try:
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            data = subs_sheet.get_all_values()
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º
            for i, row in enumerate(data[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                if len(row) > 1 and str(row[1]).strip() == str(subscription_id).strip():  # B:B - ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π (—Å—Ç–æ–ª–±–µ—Ü M = –∏–Ω–¥–µ–∫—Å 12)
                    current_missed = int(row[12]) if len(row) > 12 and row[12] and str(row[12]).isdigit() else 0
                    new_missed = current_missed + 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü M (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è)
                    subs_sheet.update_cell(i, 13, new_missed)  # 13 = —Å—Ç–æ–ª–±–µ—Ü M
                    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}: –ø—Ä–æ–ø—É—â–µ–Ω–æ {new_missed}")
                    return True
            
            logging.warning(f"‚ö†Ô∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}: {e}")
            return False

    def create_razoviy_replacement_lesson(self, subscription_id, child_name, selected_date, original_lesson_data):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—â–∞—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
        try:
            from datetime import datetime
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            if isinstance(selected_date, str):
                lesson_date = datetime.strptime(selected_date, '%d.%m.%Y')
            else:
                lesson_date = selected_date
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–∂–∫–∞
            subscription_info = self.get_subscription_details(subscription_id)
            circle_name = subscription_info.get('circle_name', '') if subscription_info else ''
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
            start_time = original_lesson_data.get('start_time', '10:00')
            end_time = original_lesson_data.get('end_time', '10:30')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            return self._add_lesson_to_calendar(
                subscription_id,
                child_name,
                lesson_date,
                start_time,
                end_time
            )
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—â–∞—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
            return False

    def get_subscription_details(self, subscription_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ."""
        try:
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            data = subs_sheet.get_all_records()
            
            for sub in data:
                if str(sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')).strip() == str(subscription_id).strip():
                    return {
                        'child_name': sub.get('–†–µ–±–µ–Ω–æ–∫', ''),
                        'circle_name': sub.get('–ö—Ä—É–∂–æ–∫', ''),
                        'start_date': sub.get('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', ''),
                        'end_date_forecast': sub.get('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑', ''),
                        'total_classes': sub.get('–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π', ''),
                        'attended_classes': sub.get('–ü—Ä–æ—à–ª–æ –∑–∞–Ω—è—Ç–∏–π', ''),
                        'remaining_classes': sub.get('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π', ''),
                        'missed_classes': sub.get('–ü—Ä–æ–ø—É—â–µ–Ω–æ', ''),
                        'cost': sub.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', ''),
                        'subscription_type': sub.get('–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
                    }
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}: {e}")
            return None

    def get_forecast_payment_dates(self, child_name, circle_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –∏ –∫—Ä—É–∂–∫–∞."""
        try:
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            data = forecast_sheet.get_all_records()
            
            payment_dates = []
            for row in data:
                if (str(row.get('–†–µ–±–µ–Ω–æ–∫', '')).strip() == str(child_name).strip() and 
                    str(row.get('–ö—Ä—É–∂–æ–∫', '')).strip() == str(circle_name).strip()):
                    payment_dates.append(row.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', ''))
            
            return payment_dates
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞—Ç –¥–ª—è {child_name} - {circle_name}: {e}")
            return []

    def get_lesson_info_by_id(self, lesson_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –ø–æ ID."""
        try:
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            data = calendar_sheet.get_all_records()
            
            for lesson in data:
                if str(lesson.get('‚Ññ', '')).strip() == str(lesson_id).strip():
                    return lesson
            
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏ {lesson_id}: {e}")
            return None

    def get_lessons_by_subscription_with_marks(self, subscription_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏."""
        try:
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            data = calendar_sheet.get_all_records()
            
            lessons = []
            for lesson in data:
                if lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '') == subscription_id:
                    lessons.append(lesson)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            lessons.sort(key=lambda x: x.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', ''))
            return lessons
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}: {e}")
            return []

    def get_forecast_budget_for_child_circle(self, child_name, circle_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –∏ –∫—Ä—É–∂–∫–∞."""
        try:
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            data = forecast_sheet.get_all_records()
            
            total_budget = 0
            for row in data:
                if (row.get('–†–µ–±–µ–Ω–æ–∫', '') == child_name and 
                    row.get('–ö—Ä—É–∂–æ–∫', '') == circle_name):
                    budget = row.get('–ë—é–¥–∂–µ—Ç', 0)
                    if isinstance(budget, (int, float)):
                        total_budget += budget
                    elif isinstance(budget, str) and budget.replace('.', '').isdigit():
                        total_budget += float(budget)
            
            return total_budget if total_budget > 0 else None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–≥–æ –±—é–¥–∂–µ—Ç–∞: {e}")
            return None

    def get_handbook_items(self, header_name):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ –≤ '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ'."""
        try:
            worksheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            headers = worksheet.row_values(1)
            logging.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {headers}")
            
            if header_name not in headers:
                logging.error(f"Header '{header_name}' not found in '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫'. Available headers: {headers}")
                return []
            
            col_index = headers.index(header_name) + 1
            values = worksheet.col_values(col_index)[1:] 
            logging.info(f"–ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '{header_name}': {values}")
            
            filtered_values = sorted(list(set(filter(None, values))))
            logging.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {filtered_values}")
            return filtered_values
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {e}")
            return []

    def add_handbook_item(self, header_name, value):
        try:
            worksheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            headers = worksheet.row_values(1)
            if header_name not in headers:
                return False, f"–°—Ç–æ–ª–±–µ—Ü '{header_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            col_index = headers.index(header_name) + 1
            all_values = worksheet.col_values(col_index)
            first_empty_row = len(all_values) + 1
            worksheet.update_cell(first_empty_row, col_index, value)
            return True, f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}"

    def edit_handbook_item(self, header_name, old_value, new_value):
        try:
            worksheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            cell = worksheet.find(old_value)
            if not cell:
                return False, f"–ó–Ω–∞—á–µ–Ω–∏–µ '{old_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            worksheet.update_cell(cell.row, cell.col, new_value)
            return True, f"'{old_value}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_value}'."
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"

    def delete_handbook_item(self, header_name, value):
        try:
            worksheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            cell = worksheet.find(value)
            if not cell:
                return False, f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            worksheet.update_cell(cell.row, cell.col, "")
            return True, f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}"

    def get_children_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
        return self.get_handbook_items("–†–µ–±–µ–Ω–æ–∫")

    def get_circles_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä—É–∂–∫–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
        return self.get_handbook_items("–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞")

    def get_subscription_types(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
        return self.get_handbook_items('–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞')
    
    def get_payment_types(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
        return self.get_handbook_items('–û–ø–ª–∞—Ç–∞')
    
    def update_subscription_stats(self, subscription_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            result = self.validate_subscription_data_consistency(subscription_id)
            logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏: {result}")
            
            return result
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {subscription_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    def get_planned_payments(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑' —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'."""
        try:
            logging.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç...")
            
            logging.info("üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–∏—Å—Ç—É '–ü—Ä–æ–≥–Ω–æ–∑'...")
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            
            logging.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞...")
            all_data = forecast_sheet.get_all_values()
            logging.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            if len(all_data) <= 1:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑'")
                return []
            
            headers = all_data[0]
            planned_payments = []
            
            for row_index, row in enumerate(all_data[1:], start=2):
                if len(row) >= 4:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 —Å—Ç–æ–ª–±—Ü–∞ (A, B, C, D)
                    circle_name = str(row[0]).strip()      # A: –ö—Ä—É–∂–æ–∫
                    child_name = str(row[1]).strip()       # B: –†–µ–±–µ–Ω–æ–∫
                    payment_date = str(row[2]).strip()     # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    budget = str(row[3]).strip()           # D: –ë—é–¥–∂–µ—Ç
                    status = str(row[4]).strip() if len(row) >= 5 else ''  # E: –°—Ç–∞—Ç—É—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    
                    # –£–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É - —Å—á–∏—Ç–∞–µ–º –í–°–ï —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏
                    if (circle_name and child_name and payment_date and budget):
                        try:
                            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            budget_clean = budget.replace('\xa0', '').replace(' ', '').replace(',', '.').strip()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ budget —ç—Ç–æ —á–∏—Å–ª–æ
                            budget_value = float(budget_clean) if budget_clean else 0
                            if budget_value > 0:
                                planned_payments.append({
                                    'row_index': row_index,
                                    'circle_name': circle_name,
                                    'child_name': child_name,
                                    'payment_date': payment_date,
                                    'budget': budget_clean,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                                    'status': status,
                                    'key': f"{child_name}|{circle_name}"
                                })
                        except (ValueError, AttributeError):
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º
            
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(planned_payments)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç")
            return planned_payments
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç: {e}")
            return []

    def get_paid_payments(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ª–∏—Å—Ç–∞ '–û–ø–ª–∞—á–µ–Ω–æ' —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–ø–ª–∞—á–µ–Ω–æ'."""
        try:
            logging.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
            
            paid_sheet = self.spreadsheet.worksheet("–û–ø–ª–∞—á–µ–Ω–æ")
            all_data = paid_sheet.get_all_values()
            
            if len(all_data) <= 1:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ '–û–ø–ª–∞—á–µ–Ω–æ'")
                return []
            
            headers = all_data[0]
            paid_payments = []
            
            for row_index, row in enumerate(all_data[1:], start=2):
                if len(row) >= 4:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 —Å—Ç–æ–ª–±—Ü–∞ (A, B, C, D)
                    circle_name = str(row[0]).strip()      # A: –ö—Ä—É–∂–æ–∫
                    child_name = str(row[1]).strip()       # B: –†–µ–±–µ–Ω–æ–∫
                    payment_date = str(row[2]).strip()     # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    amount = str(row[3]).strip()           # D: –ë—é–¥–∂–µ—Ç/–°—É–º–º–∞
                    status = str(row[4]).strip() if len(row) >= 5 else ''  # E: –°—Ç–∞—Ç—É—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    
                    # –£–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É - —Å—á–∏—Ç–∞–µ–º –í–°–ï —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏
                    if (circle_name and child_name and payment_date and amount):
                        try:
                            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            amount_clean = amount.replace('\xa0', '').replace(' ', '').replace(',', '.').strip()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ amount —ç—Ç–æ —á–∏—Å–ª–æ
                            amount_value = float(amount_clean) if amount_clean else 0
                            if amount_value > 0:
                                paid_payments.append({
                                    'row_index': row_index,
                                    'circle_name': circle_name,
                                    'child_name': child_name,
                                    'payment_date': payment_date,
                                    'amount': amount_clean,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                                    'status': status,
                                    'key': f"{child_name}|{circle_name}"
                                })
                        except (ValueError, AttributeError):
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º–æ–π
            
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(paid_payments)} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
            return paid_payments
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []

    def get_budget_forecast_by_weeks(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –Ω–µ–¥–µ–ª—è–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–∏—Å—Ç–æ–≤ '–ü—Ä–æ–≥–Ω–æ–∑' –∏ '–û–ø–ª–∞—á–µ–Ω–æ'."""
        try:
            from datetime import datetime, timedelta
            import calendar
            
            logging.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö –ª–∏—Å—Ç–æ–≤
            planned_payments = self.get_planned_payments()
            paid_payments = self.get_paid_payments()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ —Å–ª–µ–¥—É—é—â–∏–π
            now = datetime.now()
            current_month = now.month
            current_year = now.year
            
            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if current_month == 12:
                next_month = 1
                next_year = current_year + 1
            else:
                next_month = current_month + 1
                next_year = current_year
            
            months_data = {}
            
            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            russian_months = {
                1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
                5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
                9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –º–µ—Å—è—Ü–∞
            for month, year in [(current_month, current_year), (next_month, next_year)]:
                month_name = russian_months[month]
                month_key = f"{year}-{month:02d}"
                
                months_data[month_key] = {
                    'name': f"{month_name} {year}",
                    'weeks': {},
                    'total_planned': 0,
                    'total_paid': 0
                }
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
                _, days_in_month = calendar.monthrange(year, month)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
                for day in range(1, days_in_month + 1):
                    date = datetime(year, month, day)
                    week_number = date.isocalendar()[1]  # –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
                    week_key = f"week_{week_number}"
                    
                    if week_key not in months_data[month_key]['weeks']:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–¥–µ–ª–∏
                        week_start = date - timedelta(days=date.weekday())
                        week_end = week_start + timedelta(days=6)
                        
                        months_data[month_key]['weeks'][week_key] = {
                            'number': week_number,
                            'start_date': week_start.strftime('%d.%m'),
                            'end_date': week_end.strftime('%d.%m'),
                            'planned': 0,
                            'paid': 0
                        }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            for payment in planned_payments:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–π)
                    payment_date_str = payment['payment_date']
                    payment_date = self._parse_date(payment_date_str)
                    
                    if payment_date:
                        month_key = f"{payment_date.year}-{payment_date.month:02d}"
                        if month_key in months_data:
                            week_number = payment_date.isocalendar()[1]
                            week_key = f"week_{week_number}"
                            
                            budget = float(payment['budget']) if payment['budget'] else 0
                            
                            if week_key in months_data[month_key]['weeks']:
                                months_data[month_key]['weeks'][week_key]['planned'] += budget
                                months_data[month_key]['total_planned'] += budget
                                
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            for payment in paid_payments:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    payment_date_str = payment['payment_date']
                    payment_date = self._parse_date(payment_date_str)
                    
                    if payment_date:
                        month_key = f"{payment_date.year}-{payment_date.month:02d}"
                        if month_key in months_data:
                            week_number = payment_date.isocalendar()[1]
                            week_key = f"week_{week_number}"
                            
                            amount = float(payment['amount']) if payment['amount'] else 0
                            
                            if week_key in months_data[month_key]['weeks']:
                                months_data[month_key]['weeks'][week_key]['paid'] += amount
                                months_data[month_key]['total_paid'] += amount
                                
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            
            logging.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(months_data)} –º–µ—Å—è—Ü–∞–º")
            return months_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if "Connection aborted" in str(e) or "Connection reset" in str(e):
                logging.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Google Sheets. –í–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return {}
    
    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = ['%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d.%m.%y']
            
            for fmt in formats:
                try:
                    return datetime.strptime(date_str, fmt)
                except ValueError:
                    continue
            
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
            return None
            
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã '{date_str}': {e}")
            return None

    def mark_payments_as_paid(self, subscription_key):
        """–û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ '–û–ø–ª–∞—á–µ–Ω–æ'."""
        try:
            logging.info(f"üìù –û—Ç–º–µ—á–∞—é –æ–ø–ª–∞—Ç—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–ª—è {subscription_key}")
            
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            all_data = forecast_sheet.get_all_values()
            
            if len(all_data) <= 1:
                return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑'"
            
            updated_count = 0
            
            for row_index, row in enumerate(all_data[1:], start=2):
                if len(row) >= 5:
                    circle_name = str(row[0]).strip()      # A: –ö—Ä—É–∂–æ–∫
                    child_name = str(row[1]).strip()       # B: –†–µ–±–µ–Ω–æ–∫
                    payment_date = str(row[2]).strip()     # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    budget = str(row[3]).strip()           # D: –ë—é–¥–∂–µ—Ç
                    status = str(row[4]).strip()           # E: –°—Ç–∞—Ç—É—Å
                    
                    current_key = f"{child_name}|{circle_name}"
                    
                    if (current_key == subscription_key and 
                        status == "–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"):
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û–ø–ª–∞—á–µ–Ω–æ"
                        forecast_sheet.update_cell(row_index, 5, "–û–ø–ª–∞—á–µ–Ω–æ")
                        updated_count += 1
                        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {payment_date}: –û–ø–ª–∞—á–µ–Ω–æ")
            
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –æ–ø–ª–∞—Ç –¥–ª—è {subscription_key}")
            return True, f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ: {updated_count} –ø–ª–∞—Ç–µ–∂–µ–π"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"

    def mark_single_payment_as_paid(self, row_index):
        """–û—Ç–º–µ—á–∞–µ—Ç –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø–ª–∞—Ç—É –∫–∞–∫ '–û–ø–ª–∞—á–µ–Ω–æ' –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏."""
        try:
            logging.info(f"üìù –û—Ç–º–µ—á–∞—é –æ–ø–ª–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫–µ {row_index} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é")
            
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            current_status = forecast_sheet.cell(row_index, 5).value
            
            if current_status == "–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û–ø–ª–∞—á–µ–Ω–æ"
                forecast_sheet.update_cell(row_index, 5, "–û–ø–ª–∞—á–µ–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                row_data = forecast_sheet.row_values(row_index)
                if len(row_data) >= 3:
                    child_name = row_data[1]
                    circle_name = row_data[0]
                    payment_date = row_data[2]
                    logging.info(f"–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞: {child_name} - {circle_name}, –¥–∞—Ç–∞ {payment_date}")
                
                return True, "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è"
            else:
                return False, f"–û–ø–ª–∞—Ç–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {current_status}"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"

    def move_payment_to_paid(self, row_index):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∏–∑ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑' –≤ –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ'."""
        try:
            logging.info(f"üìù –ü–µ—Ä–µ–º–µ—â–∞—é –æ–ø–ª–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_index} –≤ –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ'")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç "–ü—Ä–æ–≥–Ω–æ–∑"
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            row_data = forecast_sheet.row_values(row_index)
            if len(row_data) < 4:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ"
            
            circle_name = row_data[0]  # A: –ö—Ä—É–∂–æ–∫
            child_name = row_data[1]   # B: –†–µ–±–µ–Ω–æ–∫
            payment_date = row_data[2] # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
            budget = row_data[3]       # D: –ë—é–¥–∂–µ—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞
            current_status = row_data[4] if len(row_data) > 4 else ""
            if current_status != "–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞":
                return False, f"–û–ø–ª–∞—Ç–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{current_status}', –∞ –Ω–µ '–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–û–ø–ª–∞—á–µ–Ω–æ"
            try:
                paid_sheet = self.spreadsheet.worksheet("–û–ø–ª–∞—á–µ–Ω–æ")
            except:
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–û–ø–ª–∞—á–µ–Ω–æ" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                paid_sheet = self.spreadsheet.add_worksheet(title="–û–ø–ª–∞—á–µ–Ω–æ", rows=1000, cols=5)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ["–ö—Ä—É–∂–æ–∫", "–†–µ–±–µ–Ω–æ–∫", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã", "–ë—é–¥–∂–µ—Ç", "–°—Ç–∞—Ç—É—Å"]
                paid_sheet.update('A1:E1', [headers])
                logging.info("–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ' —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç "–û–ø–ª–∞—á–µ–Ω–æ"
            new_row = [circle_name, child_name, payment_date, budget, "–û–ø–ª–∞—á–µ–Ω–æ"]
            paid_sheet.append_row(new_row)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥–Ω–æ–∑"
            forecast_sheet.delete_rows(row_index)
            
            logging.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: {child_name} - {circle_name}, –¥–∞—Ç–∞ {payment_date}")
            return True, f"–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ': {child_name} - {circle_name}, {payment_date}"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"

    def forecast_budget(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥."""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏—Å—Ç "–ü—Ä–æ–≥–Ω–æ–∑"
            try:
                forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
                return self._get_forecast_from_forecast_sheet(forecast_sheet)
            except:
                # –ï—Å–ª–∏ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥–Ω–æ–∑" –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                logging.info("–õ–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞")
                return self._get_forecast_from_calendar()
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞: {e}")
            return None
    
    def _get_forecast_from_forecast_sheet(self, forecast_sheet):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑'."""
        try:
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
            all_values = forecast_sheet.get_all_values()
            if len(all_values) < 2:
                return []
            
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = all_values[0]
            
            current_date = datetime.now()
            end_date = current_date + timedelta(days=60)  # 2 –º–µ—Å—è—Ü–∞
            
            forecast_items = []
            for row in all_values[1:]:
                if len(row) < 4:
                    continue
                
                try:
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ["–ö—Ä—É–∂–æ–∫", "–†–µ–±–µ–Ω–æ–∫", "–î–∞—Ç–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å"]
                    circle = row[0] if len(row) > 0 else ''
                    child = row[1] if len(row) > 1 else ''
                    date_str = row[2] if len(row) > 2 else ''
                    cost_str = row[3] if len(row) > 3 else '0'
                    
                    if not date_str:
                        continue
                    
                    record_date = datetime.strptime(date_str, '%d.%m.%Y')
                    if current_date <= record_date <= end_date:
                        try:
                            cost = float(cost_str) if cost_str else 0
                        except ValueError:
                            cost = 0
                        
                        forecast_items.append({
                            'date': date_str,
                            'child': child,
                            'circle': circle,
                            'cost': cost
                        })
                except (ValueError, TypeError, IndexError):
                    continue
            
            return sorted(forecast_items, key=lambda x: datetime.strptime(x['date'], '%d.%m.%Y'))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑': {e}")
            return []
    
    def _get_forecast_from_calendar(self):
        """–°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π."""
        try:
            from datetime import datetime, timedelta
            
            cal_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            all_cal_values = cal_sheet.get_all_values()
            if not all_cal_values:
                return []
            
            cal_headers = all_cal_values[0]
            cal_records = []
            for row in all_cal_values[1:]:
                record = dict(zip(cal_headers, row))
                cal_records.append(record)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            all_subs_values = subs_sheet.get_all_values()
            if not all_subs_values:
                return []
            
            subs_headers = all_subs_values[0]
            subs_records = {}
            for row in all_subs_values[1:]:
                record = dict(zip(subs_headers, row))
                sub_id = record.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞')
                if sub_id:
                    subs_records[sub_id] = record
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥)
            today = datetime.now()
            end_date = today + timedelta(days=60)
            
            forecasts = []
            for record in cal_records:
                try:
                    class_date_str = record.get('–î–∞—Ç–∞', '')
                    if not class_date_str:
                        continue
                        
                    class_date = datetime.strptime(class_date_str, '%d.%m.%Y')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞
                    if today <= class_date <= end_date:
                        sub_id = record.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
                        if sub_id in subs_records:
                            sub_info = subs_records[sub_id]
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                            try:
                                total_cost = float(sub_info.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0))
                                total_classes = int(sub_info.get('–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π', 1))
                                cost_per_class = total_cost / total_classes if total_classes > 0 else 0
                            except (ValueError, ZeroDivisionError):
                                cost_per_class = 0
                            
                            forecasts.append({
                                'date': class_date_str,
                                'child': record.get('–†–µ–±–µ–Ω–æ–∫', 'N/A'),
                                'circle': sub_info.get('–ö—Ä—É–∂–æ–∫', 'N/A'),
                                'cost': round(cost_per_class, 2)
                            })
                            
                except ValueError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            forecasts.sort(key=lambda x: datetime.strptime(x['date'], '%d.%m.%Y'))
            return forecasts
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞: {e}")
            return None

    def sync_with_google_calendar_DISABLED(self):
        """Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
        logging.info("Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return True

    def _delete_old_sync_events_DISABLED(self, start_date, end_date):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —Ç–µ–≥–æ–º #schedule_sync."""
        try:
            time_min = start_date.isoformat() + 'Z'
            time_max = end_date.isoformat() + 'Z'
            
            events_result = self.calendar_service.events().list(
                calendarId=config.GOOGLE_CALENDAR_ID,
                timeMin=time_min,
                timeMax=time_max,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            deleted_count = 0
            
            for event in events:
                description = event.get('description', '')
                if '#schedule_sync' in description:
                    self.calendar_service.events().delete(
                        calendarId=config.GOOGLE_CALENDAR_ID,
                        eventId=event['id']
                    ).execute()
                    deleted_count += 1
            
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
        except HttpError as e:
            if e.resp.status == 403:
                logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")

    def _get_existing_sync_events(self, start_date, end_date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Ç–µ–≥–æ–º #schedule_sync –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        try:
            time_min = start_date.isoformat() + 'Z'
            time_max = end_date.isoformat() + 'Z'
            
            events_result = self.calendar_service.events().list(
                calendarId=config.GOOGLE_CALENDAR_ID,
                timeMin=time_min,
                timeMax=time_max,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            sync_events = {}
            all_sync_events = []  # –î–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
            
            for event in events:
                description = event.get('description', '')
                if '#schedule_sync' in description:
                    all_sync_events.append(event)
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è
                    event_key = self._extract_event_key_from_event(event)
                    if event_key:
                        # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        if event_key not in sync_events:
                            sync_events[event_key] = event
                        else:
                            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Å—Ç–∞—Ä–æ–µ
                            existing_created = sync_events[event_key].get('created', '')
                            current_created = event.get('created', '')
                            if current_created < existing_created:
                                sync_events[event_key] = event
            
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sync_events)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ {len(all_sync_events)} –æ–±—â–∏—Ö")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
            sync_events['_all_events'] = all_sync_events
            return sync_events
            
        except HttpError as e:
            if e.resp.status == 403:
                logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π.")
                return {}
            else:
                logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
                return {}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            return {}

    def _remove_duplicate_events(self, existing_events):
        """–ù–∞—Ö–æ–¥–∏—Ç –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
        try:
            duplicates_removed = 0
            event_groups = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
            all_events = existing_events.pop('_all_events', [])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á–∞–º
            for event in all_events:
                event_key = self._extract_event_key_from_event(event)
                if event_key:
                    if event_key not in event_groups:
                        event_groups[event_key] = []
                    event_groups[event_key].append(event)
            
            # –ò—â–µ–º –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª—è–º–∏ (–±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–ª—é—á–æ–º)
            for event_key, events in event_groups.items():
                if len(events) > 1:
                    logging.info(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏ –¥–ª—è –∫–ª—é—á–∞ '{event_key}': {len(events)} —Å–æ–±—ã—Ç–∏–π")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) —Å –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–º–µ—Ç–∫–æ–π, 2) –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    best_event = None
                    best_priority = -1
                    
                    for event in events:
                        description = event.get('description', '')
                        mark = ''
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                        for line in description.split('\n'):
                            if line.startswith('–û—Ç–º–µ—Ç–∫–∞:'):
                                mark = line.split(':', 1)[1].strip()
                                break
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è
                        priority = 0
                        if mark and mark not in ['', 'N/A']:
                            priority = 2  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å –æ—Ç–º–µ—Ç–∫–æ–π
                        else:
                            priority = 1  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –æ—Ç–º–µ—Ç–∫–∏
                        
                        # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        if priority > best_priority:
                            best_event = event
                            best_priority = priority
                        elif priority == best_priority:
                            # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ
                            if best_event:
                                best_updated = best_event.get('updated', '')
                                current_updated = event.get('updated', '')
                                if current_updated > best_updated:
                                    best_event = event
                            else:
                                best_event = event
                    
                    logging.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {best_event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_priority})")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫—Ä–æ–º–µ –ª—É—á—à–µ–≥–æ
                    events_to_delete = [e for e in events if e['id'] != best_event['id']]
                    
                    for duplicate_event in events_to_delete:
                        try:
                            self.calendar_service.events().delete(
                                calendarId=config.GOOGLE_CALENDAR_ID,
                                eventId=duplicate_event['id']
                            ).execute()
                            
                            event_title = duplicate_event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            logging.info(f"–£–¥–∞–ª–µ–Ω –¥—É–±–ª—å —Å–æ–±—ã—Ç–∏—è: {event_title}")
                            duplicates_removed += 1
                            
                            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è existing_events
                            if event_key in existing_events and existing_events[event_key]['id'] == duplicate_event['id']:
                                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –ª—É—á—à–µ–µ (—Å –æ—Ç–º–µ—Ç–∫–æ–π)
                                existing_events[event_key] = best_event
                            
                        except HttpError as e:
                            if e.resp.status == 403:
                                logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î—É–±–ª—å –Ω–µ —É–¥–∞–ª–µ–Ω.")
                            elif e.resp.status == 404:
                                logging.warning(f"–°–æ–±—ã—Ç–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ: {duplicate_event.get('id')}")
                            else:
                                logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª—è: {e}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª—è —Å–æ–±—ã—Ç–∏—è: {e}")
            
            if duplicates_removed > 0:
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ {duplicates_removed} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            else:
                logging.info("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return duplicates_removed
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–µ–π: {e}")
            return 0

    def _get_forecast_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –ü—Ä–æ–≥–Ω–æ–∑."""
        try:
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            return forecast_sheet.get_all_records()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return []

    def _get_schedule_templates(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        try:
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return template_sheet.get_all_records()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []

    def _get_subscriptions_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã."""
        try:
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            return subs_sheet.get_all_records()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return []

    def _create_forecast_map(self, forecast_data):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: –∫–ª—é—á '–†–µ–±–µ–Ω–æ–∫|–ö—Ä—É–∂–æ–∫|–¥–∞—Ç–∞', –∑–Ω–∞—á–µ–Ω–∏–µ - –±—é–¥–∂–µ—Ç."""
        forecast_map = {}
        for row in forecast_data:
            child = row.get('–†–µ–±–µ–Ω–æ–∫', '')
            circle = row.get('–ö—Ä—É–∂–æ–∫', '')
            date = row.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '')
            budget = row.get('–ë—é–¥–∂–µ—Ç', 0)
            
            if child and circle and date:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
                try:
                    date_obj = datetime.strptime(date, '%d.%m.%Y')
                    date_key = date_obj.strftime('%Y-%m-%d')
                    key = f"{child}|{circle}|{date_key}"
                    forecast_map[key] = budget
                except ValueError:
                    continue
        
        return forecast_map

    def _create_schedule_map(self, schedule_templates):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        schedule_map = {}
        for row in schedule_templates:
            sub_id = row.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            if sub_id:
                if sub_id not in schedule_map:
                    schedule_map[sub_id] = []
                schedule_map[sub_id].append({
                    'day': row.get('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', ''),
                    'start_time': row.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', ''),
                    'end_time': row.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '')
                })
        
        return schedule_map

    def _create_circle_names_map(self, subscriptions_data):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä—É–∂–∫–æ–≤ –ø–æ ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        circle_map = {}
        for row in subscriptions_data:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π ID
            sub_id = row.get('ID', '') or row.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '') or row.get('‚Ññ', '')
            circle = row.get('–ö—Ä—É–∂–æ–∫', '')
            
            if sub_id and circle:
                circle_map[sub_id] = circle
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫—Ä—É–∂–æ–∫ –≤ –∫–∞—Ä—Ç—É: {sub_id} -> {circle}")
        
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∫—Ä—É–∂–∫–æ–≤: {circle_map}")
        return circle_map

    def _create_lesson_event(self, lesson, forecast_map, schedule_map, circle_names_map, processed_payment_dates):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è."""
        try:
            sub_id = lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            child_name = lesson.get('–†–µ–±–µ–Ω–æ–∫', '')
            lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
            circle_name = circle_names_map.get(sub_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫')
            logging.info(f"–î–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id} –Ω–∞–π–¥–µ–Ω –∫—Ä—É–∂–æ–∫: {circle_name}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ —Å–∞–º–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
            start_time = str(lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '') or lesson.get('–ù–∞—á–∞–ª–æ', '') or lesson.get('Start Time', '')).strip()
            end_time = str(lesson.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '') or lesson.get('–û–∫–æ–Ω—á–∞–Ω–∏–µ', '') or lesson.get('End Time', '') or lesson.get('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è', '')).strip()
            
            logging.info(f"–ü–æ–ª—è –∑–∞–Ω—è—Ç–∏—è: {list(lesson.keys())}")
            logging.info(f"–í—Ä–µ–º—è –∏–∑ –∑–∞–Ω—è—Ç–∏—è: –Ω–∞—á–∞–ª–æ='{start_time}', –æ–∫–æ–Ω—á–∞–Ω–∏–µ='{end_time}'")
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –≤ –∑–∞–Ω—è—Ç–∏–∏, –±–µ—Ä–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if not start_time or not end_time:
                schedule = schedule_map.get(sub_id, [])
                if schedule:
                    template = schedule[0]
                    if not start_time:
                        start_time = str(template.get('start_time', '10:00')).strip()
                    if not end_time:
                        end_time = str(template.get('end_time', '11:00')).strip()
                else:
                    logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
                    if not start_time:
                        start_time = '10:00'
                    if not end_time:
                        end_time = '11:00'
            
            logging.info(f"–í—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {sub_id}: {start_time} - {end_time}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
            try:
                lesson_date_obj = datetime.strptime(lesson_date, '%d.%m.%Y')
            except ValueError:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {lesson_date}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            date_key = lesson_date_obj.strftime('%Y-%m-%d')
            payment_key = f"{child_name}|{circle_name}|{date_key}"
            is_payment_day = payment_key in forecast_map
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if is_payment_day:
                title = f"–û–ü–õ–ê–¢–ê: {circle_name} - {child_name}"
                description = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {forecast_map[payment_key]} —Ä—É–±.\n\n#schedule_sync"
                processed_payment_dates.add(payment_key)
            else:
                title = f"{circle_name} - {child_name}"
                description = "#schedule_sync"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if not start_time or start_time == '':
                start_time = '10:00'
            if not end_time or end_time == '':
                end_time = '11:00'
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            try:
                # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
                start_datetime = datetime.strptime(f"{lesson_date} {start_time}", '%d.%m.%Y %H:%M')
                end_datetime = datetime.strptime(f"{lesson_date} {end_time}", '%d.%m.%Y %H:%M')
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_date}: start_time='{start_time}', end_time='{end_time}'. –û—à–∏–±–∫–∞: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                start_datetime = datetime.strptime(f"{lesson_date} 10:00", '%d.%m.%Y %H:%M')
                end_datetime = datetime.strptime(f"{lesson_date} 11:00", '%d.%m.%Y %H:%M')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = {
                'summary': title,
                'description': description,
                'start': {
                    'dateTime': start_datetime.isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
                'end': {
                    'dateTime': end_datetime.isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
            }
            
            try:
                created_event = self.calendar_service.events().insert(
                    calendarId=config.GOOGLE_CALENDAR_ID,
                    body=event
                ).execute()
                
                logging.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {title} –Ω–∞ {lesson_date}")
                return True
            except HttpError as e:
                if e.resp.status == 403:
                    logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")
                    return False
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                    return False
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return False

    def _create_future_payment_events(self, forecast_map, processed_payment_dates):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–ø–ª–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."""
        created_count = 0
        
        for payment_key, budget in forecast_map.items():
            if payment_key not in processed_payment_dates:
                try:
                    child, circle, date_str = payment_key.split('|')
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                    event = {
                        'summary': f"–û–ü–õ–ê–¢–ê: {circle} - {child}",
                        'description': f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {budget} —Ä—É–±.\n\n#schedule_sync",
                        'start': {
                            'date': date_str,
                        },
                        'end': {
                            'date': date_str,
                        },
                    }
                    
                    try:
                        created_event = self.calendar_service.events().insert(
                            calendarId=config.GOOGLE_CALENDAR_ID,
                            body=event
                        ).execute()
                        
                        logging.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã: {circle} - {child} –Ω–∞ {date_str}")
                        created_count += 1
                    except HttpError as e:
                        if e.resp.status == 403:
                            logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã: {e}")
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã {payment_key}: {e}")
        
        return created_count

    def _generate_event_key(self, lesson, circle_names_map):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∑–∞–Ω—è—Ç–∏—è."""
        lesson_id = lesson.get('‚Ññ', '')  # ID –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A
        
        # –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: "lesson_id_[ID]"
        return f"lesson_id_{lesson_id}"

    def _extract_event_key_from_event(self, event):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        try:
            description = event.get('description', '')
            summary = event.get('summary', '')
            
            # –ò—â–µ–º ID –∑–∞–Ω—è—Ç–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
            if '#schedule_sync' in description:
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "lesson_id:123" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                import re
                lesson_id_match = re.search(r'lesson_id:(\d+)', description)
                if lesson_id_match:
                    lesson_id = lesson_id_match.group(1)
                    return f"lesson_id_{lesson_id}"
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã
                if summary.startswith('–û–ü–õ–ê–¢–ê: ') or summary.startswith('üíµ–û–ü–õ–ê–¢–ê: '):
                    start = event.get('start', {})
                    if 'date' in start:
                        event_date = datetime.strptime(start['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
                        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                        clean_summary = summary.replace('üíµ–û–ü–õ–ê–¢–ê: ', '').replace('–û–ü–õ–ê–¢–ê: ', '')
                        parts = clean_summary.split(' - ')
                        if len(parts) == 2:
                            circle_name, child_name = parts
                            return f"payment_{event_date}|{child_name}|{circle_name}"
                
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑ lesson_id - —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –ø–æ –¥–∞—Ç–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                start = event.get('start', {})
                if 'dateTime' in start:
                    event_date = datetime.fromisoformat(start['dateTime'].replace('Z', '+00:00')).strftime('%d.%m.%Y')
                    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    clean_summary = re.sub(r'^[‚úîÔ∏èüîÑü§í‚úñÔ∏èüíµ]*', '', summary)
                    parts = clean_summary.split(' - ')
                    if len(parts) == 2:
                        circle_name, child_name = parts
                        return f"legacy_{event_date}|{child_name}|{circle_name}"
            
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è: {e}")
            return None

    def _sync_lesson_event(self, lesson, forecast_map, schedule_map, circle_names_map, processed_payment_dates, existing_events):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ)."""
        try:
            event_key = self._generate_event_key(lesson, circle_names_map)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_lesson_event_data(lesson, forecast_map, schedule_map, circle_names_map, processed_payment_dates)
            if not event_data:
                return 'skipped'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
            existing_event = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á—É
            if event_key in existing_events:
                existing_event = existing_events[event_key]
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –∫–ª—é—á—É {event_key}")
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –ø–æ legacy –∫–ª—é—á—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –¥–∞—Ç–æ–π
                lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
                child_name = lesson.get('–†–µ–±–µ–Ω–æ–∫', '')
                circle_name = circle_names_map.get(lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', ''), '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º legacy –∫–ª—é—á
                legacy_key = f"legacy_{lesson_date}|{child_name}|{circle_name}"
                if legacy_key in existing_events:
                    existing_event = existing_events[legacy_key]
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ legacy –∫–ª—é—á—É {legacy_key}")
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
                    for key, event in existing_events.items():
                        if key.startswith(('lesson_id_', 'legacy_')):
                            event_summary = event.get('summary', '')
                            event_start = event.get('start', {})
                            
                            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                            import re
                            clean_summary = re.sub(r'^[‚úîÔ∏èüîÑü§í‚úñÔ∏èüíµ]*', '', event_summary)
                            expected_title = f"{circle_name} - {child_name}"
                            
                            if clean_summary == expected_title:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ
                                if 'dateTime' in event_start:
                                    event_date = datetime.fromisoformat(event_start['dateTime'].replace('Z', '+00:00')).strftime('%d.%m.%Y')
                                    if event_date == lesson_date:
                                        existing_event = event
                                        logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ: {event_summary}")
                                        break
            
            if existing_event:
                # –°–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if self._event_needs_update(existing_event, event_data):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                    self._update_calendar_event(existing_event['id'], event_data)
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_data['summary']}")
                    return 'updated'
                else:
                    logging.info(f"–°–æ–±—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {event_data['summary']}")
                    return 'unchanged'
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                self._create_calendar_event(event_data)
                logging.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_data['summary']}")
                return 'created'
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return 'error'

    def _prepare_lesson_event_data(self, lesson, forecast_map, schedule_map, circle_names_map, processed_payment_dates):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ _create_lesson_event
        # –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            sub_id = lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            child_name = lesson.get('–†–µ–±–µ–Ω–æ–∫', '')
            lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            lesson_id = lesson.get('‚Ññ', '')  # ID –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A
            lesson_mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '')  # –û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
            lesson_status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')  # –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
            circle_name = circle_names_map.get(sub_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫')
            logging.info(f"–î–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id} –Ω–∞–π–¥–µ–Ω –∫—Ä—É–∂–æ–∫: {circle_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
            start_time = str(lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '') or lesson.get('–ù–∞—á–∞–ª–æ', '') or lesson.get('Start Time', '')).strip()
            end_time = str(lesson.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '') or lesson.get('–û–∫–æ–Ω—á–∞–Ω–∏–µ', '') or lesson.get('End Time', '') or lesson.get('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è', '')).strip()
            
            logging.info(f"–ü–æ–ª—è –∑–∞–Ω—è—Ç–∏—è: {list(lesson.keys())}")
            logging.info(f"–í—Ä–µ–º—è –∏–∑ –∑–∞–Ω—è—Ç–∏—è: –Ω–∞—á–∞–ª–æ='{start_time}', –æ–∫–æ–Ω—á–∞–Ω–∏–µ='{end_time}'")
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –≤ –∑–∞–Ω—è—Ç–∏–∏, –±–µ—Ä–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if not start_time or not end_time:
                schedule = schedule_map.get(sub_id, [])
                if schedule:
                    template = schedule[0]
                    if not start_time:
                        start_time = str(template.get('start_time', '10:00')).strip()
                    if not end_time:
                        end_time = str(template.get('end_time', '11:00')).strip()
                else:
                    logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}")
                    if not start_time:
                        start_time = '10:00'
                    if not end_time:
                        end_time = '11:00'
            
            logging.info(f"–í—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {sub_id}: {start_time} - {end_time}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
            try:
                lesson_date_obj = datetime.strptime(lesson_date, '%d.%m.%Y')
            except ValueError:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {lesson_date}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            date_key = lesson_date_obj.strftime('%Y-%m-%d')
            payment_key = f"{child_name}|{circle_name}|{date_key}"
            is_payment_day = payment_key in forecast_map
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = self._get_status_emoji(lesson_mark, lesson_status, is_payment_day)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if is_payment_day:
                title = f"{status_emoji}–û–ü–õ–ê–¢–ê: {circle_name} - {child_name}"
                description = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {forecast_map[payment_key]} —Ä—É–±.\n\nlesson_id:{lesson_id}\n#schedule_sync"
                processed_payment_dates.add(payment_key)
            else:
                title = f"{status_emoji}{circle_name} - {child_name}".strip()
                description = f"lesson_id:{lesson_id}\n#schedule_sync"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if not start_time or start_time == '':
                start_time = '10:00'
            if not end_time or end_time == '':
                end_time = '11:00'
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            try:
                # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
                start_datetime = datetime.strptime(f"{lesson_date} {start_time}", '%d.%m.%Y %H:%M')
                end_datetime = datetime.strptime(f"{lesson_date} {end_time}", '%d.%m.%Y %H:%M')
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_date}: start_time='{start_time}', end_time='{end_time}'. –û—à–∏–±–∫–∞: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                start_datetime = datetime.strptime(f"{lesson_date} 10:00", '%d.%m.%Y %H:%M')
                end_datetime = datetime.strptime(f"{lesson_date} 11:00", '%d.%m.%Y %H:%M')
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            return {
                'summary': title,
                'description': description,
                'start': {
                    'dateTime': start_datetime.isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
                'end': {
                    'dateTime': end_datetime.isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è: {e}")
            return None

    def _event_needs_update(self, existing_event, new_event_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
        try:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if existing_event.get('summary') != new_event_data.get('summary'):
                return True
            
            if existing_event.get('description') != new_event_data.get('description'):
                return True
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            existing_start = existing_event.get('start', {}).get('dateTime', '')
            new_start = new_event_data.get('start', {}).get('dateTime', '')
            if existing_start != new_start:
                return True
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            existing_end = existing_event.get('end', {}).get('dateTime', '')
            new_end = new_event_data.get('end', {}).get('dateTime', '')
            if existing_end != new_end:
                return True
            
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –æ–±–Ω–æ–≤–∏—Ç—å

    def _create_calendar_event_DISABLED(self, event_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
        try:
            created_event = self.calendar_service.events().insert(
                calendarId=config.GOOGLE_CALENDAR_ID,
                body=event_data
            ).execute()
            return True
        except HttpError as e:
            if e.resp.status == 403:
                logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")
                return False
            else:
                logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                return False

    def _update_calendar_event_DISABLED(self, event_id, event_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
        try:
            updated_event = self.calendar_service.events().update(
                calendarId=config.GOOGLE_CALENDAR_ID,
                eventId=event_id,
                body=event_data
            ).execute()
            return True
        except HttpError as e:
            if e.resp.status == 403:
                logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                return False
            else:
                logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                return False

    def _sync_future_payment_events(self, forecast_map, processed_payment_dates, existing_events, events_to_keep):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—â–∏—Ö –æ–ø–ª–∞—Ç."""
        created_count = 0
        updated_count = 0
        
        for payment_key, budget in forecast_map.items():
            if payment_key not in processed_payment_dates:
                try:
                    child, circle, date_str = payment_key.split('|')
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    event_date = date_obj.strftime('%d.%m.%Y')
                    event_key = f"payment_{event_date}|{child}|{circle}"
                    events_to_keep.add(event_key)
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å —Å —ç–º–æ–¥–∑–∏ –æ–ø–ª–∞—Ç—ã
                    payment_emoji = self._get_status_emoji(None, None, is_payment=True)
                    event_data = {
                        'summary': f"{payment_emoji}–û–ü–õ–ê–¢–ê: {circle} - {child}",
                        'description': f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {budget} —Ä—É–±.\n\n#schedule_sync",
                        'start': {
                            'date': date_str,
                        },
                        'end': {
                            'date': date_str,
                        },
                    }
                    
                    if event_key in existing_events:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        existing_event = existing_events[event_key]
                        if self._event_needs_update(existing_event, event_data):
                            self._update_calendar_event(existing_event['id'], event_data)
                            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã: {circle} - {child} –Ω–∞ {date_str}")
                            updated_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        self._create_calendar_event(event_data)
                        logging.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã: {circle} - {child} –Ω–∞ {date_str}")
                        created_count += 1
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã {payment_key}: {e}")
        
        return {'created': created_count, 'updated': updated_count}

    def _delete_obsolete_events(self, existing_events, events_to_keep):
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
        deleted_count = 0
        
        for event_key, event in existing_events.items():
            if event_key not in events_to_keep:
                try:
                    self.calendar_service.events().delete(
                        calendarId=config.GOOGLE_CALENDAR_ID,
                        eventId=event['id']
                    ).execute()
                    logging.info(f"–£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    deleted_count += 1
                except HttpError as e:
                    if e.resp.status == 403:
                        logging.error("Google Calendar API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–±—ã—Ç–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ Calendar API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        
        return deleted_count

    def _get_status_emoji(self, lesson_mark, lesson_status, is_payment=False):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–Ω—è—Ç–∏—è –∏–ª–∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è."""
        if is_payment:
            return "üí∞"  # –û–ø–ª–∞—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–µ—â–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if lesson_mark and lesson_mark.strip():
            mark_lower = lesson_mark.lower().strip()
            if '–ø–æ—Å–µ—â–µ–Ω–∏–µ' in mark_lower:
                return "‚úîÔ∏è"  # –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
            elif '–ø–µ—Ä–µ–Ω–æ—Å' in mark_lower:
                return "üîÑ"  # –°—Ç—Ä–µ–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            elif '–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)' in mark_lower or '–±–æ–ª–µ–∑–Ω—å' in mark_lower:
                return "ü§í"  # –ë–æ–ª—å–Ω–æ–π —Å–º–∞–π–ª–∏–∫ –¥–ª—è –±–æ–ª–µ–∑–Ω–∏
            elif '–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)' in mark_lower or '–ø—Ä–æ–ø—É—Å–∫' in mark_lower:
                return "üö´"  # –ó–Ω–∞–∫ –∑–∞–ø—Ä–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ –≤–∏–Ω–µ
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç–æ "–æ—Ç–º–µ–Ω–∞" - —Ç–∞–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        
        # –ï—Å–ª–∏ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
        if lesson_status and lesson_status.strip():
            status_lower = lesson_status.lower().strip()
            if status_lower == '–∑–∞–≤–µ—Ä—à–µ–Ω':
                return "‚úîÔ∏è"  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            elif status_lower == '–ø—Ä–æ–ø—É—Å–∫':
                return "üö´"  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            elif status_lower == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
                return ""  # –ë–ï–ó —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        
        return ""  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–ï–ó —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π

    def _extract_lesson_variables_from_event(self, event):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Å–æ–±—ã—Ç–∏—è Google Calendar –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        try:
            summary = event.get('summary', '')
            description = event.get('description', '')
            start = event.get('start', {})
            end = event.get('end', {})
            
            logging.info(f"    üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è:")
            logging.info(f"      üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {summary}")
            logging.info(f"      üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            lesson_id = ''
            event_date = ''
            start_time = ''
            end_time = ''
            status = ''
            mark = ''
            
            # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if description:
                logging.info(f"      üîç –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ:")
                for line in description.split('\n'):
                    line = line.strip()
                    logging.info(f"        üìÑ –°—Ç—Ä–æ–∫–∞: '{line}'")
                    if line.startswith('lesson_id:'):
                        lesson_id = line.split('lesson_id:')[1].strip()
                        logging.info(f"          üÜî –ù–∞–π–¥–µ–Ω lesson_id: '{lesson_id}'")
                    elif line.startswith('date:'):
                        event_date = line.split('date:')[1].strip()
                        logging.info(f"          üìÖ –ù–∞–π–¥–µ–Ω–∞ date: '{event_date}'")
                    elif line.startswith('start_time:'):
                        start_time = line.split('start_time:')[1].strip()
                        logging.info(f"          üïê –ù–∞–π–¥–µ–Ω–æ start_time: '{start_time}'")
                    elif line.startswith('end_time:'):
                        end_time = line.split('end_time:')[1].strip()
                        logging.info(f"          üïê –ù–∞–π–¥–µ–Ω–æ end_time: '{end_time}'")
                    elif line.startswith('status:'):
                        status = line.split('status:')[1].strip()
                        logging.info(f"          üìä –ù–∞–π–¥–µ–Ω status: '{status}'")
                    elif line.startswith('mark:'):
                        mark = line.split('mark:')[1].strip()
                        logging.info(f"          ‚úèÔ∏è –ù–∞–π–¥–µ–Ω–∞ mark: '{mark}'")
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            if not event_date and 'dateTime' in start:
                from datetime import datetime
                start_dt = datetime.fromisoformat(start['dateTime'].replace('Z', '+00:00'))
                event_date = start_dt.strftime('%d.%m.%Y')
            elif not event_date and 'date' in start:
                from datetime import datetime
                date_obj = datetime.strptime(start['date'], '%Y-%m-%d')
                event_date = date_obj.strftime('%d.%m.%Y')
            
            if not start_time and 'dateTime' in start:
                from datetime import datetime
                start_dt = datetime.fromisoformat(start['dateTime'].replace('Z', '+00:00'))
                end_dt = datetime.fromisoformat(end['dateTime'].replace('Z', '+00:00'))
                start_time = start_dt.strftime('%H:%M')
                end_time = end_dt.strftime('%H:%M')
            
            return {
                'lesson_id': lesson_id,
                'date': event_date,
                'start_time': start_time,
                'end_time': end_time,
                'status': status,
                'mark': mark,
                'summary': summary,
                'description': description
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å–æ–±—ã—Ç–∏—è: {e}")
            return None

    def _extract_forecast_variables_from_event(self, event):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è Google Calendar –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        try:
            summary = event.get('summary', '')
            description = event.get('description', '')
            start = event.get('start', {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            circle_name = ''
            child_name = ''
            event_date = ''
            budget = ''
            status = ''
            
            # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if description:
                for line in description.split('\n'):
                    line = line.strip()
                    if line.startswith('circle_name:'):
                        circle_name = line.split('circle_name:')[1].strip()
                    elif line.startswith('child_name:'):
                        child_name = line.split('child_name:')[1].strip()
                    elif line.startswith('date:'):
                        event_date = line.split('date:')[1].strip()
                    elif line.startswith('budget:'):
                        budget = line.split('budget:')[1].strip()
                    elif line.startswith('status:'):
                        status = line.split('status:')[1].strip()
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            if not event_date and 'date' in start:
                from datetime import datetime
                date_obj = datetime.strptime(start['date'], '%Y-%m-%d')
                event_date = date_obj.strftime('%d.%m.%Y')
            
            if not circle_name or not child_name:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ fallback
                if '–û–ü–õ–ê–¢–ê: ' in summary:
                    parts = summary.split('–û–ü–õ–ê–¢–ê: ')[1].split(' - ')
                    if len(parts) == 2:
                        if not circle_name:
                            circle_name = parts[0].strip()
                        if not child_name:
                            child_name = parts[1].strip()
            
            return {
                'circle_name': circle_name,
                'child_name': child_name,
                'date': event_date,
                'budget': budget,
                'status': status,
                'summary': summary,
                'description': description
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è: {e}")
            return None

    def _compare_lesson_variables(self, lesson_sheet_data, event_data):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –ª–∏—Å—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏—è Google Calendar."""
        if not lesson_sheet_data or not event_data:
            return False
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        sheet_date = lesson_sheet_data.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '').strip()
        sheet_start = lesson_sheet_data.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '').strip()
        sheet_end = lesson_sheet_data.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '').strip()
        sheet_status = lesson_sheet_data.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '').strip().lower()
        sheet_mark = lesson_sheet_data.get('–û—Ç–º–µ—Ç–∫–∞', '').strip()
        
        event_date = event_data.get('date', '').strip()
        event_start = event_data.get('start_time', '').strip()
        event_end = event_data.get('end_time', '').strip()
        event_status = event_data.get('status', '').strip().lower()
        event_mark = event_data.get('mark', '').strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        variables_match = (
            sheet_date == event_date and
            sheet_start == event_start and
            sheet_end == event_end and
            sheet_status == event_status and
            sheet_mark == event_mark
        )
        
        if not variables_match:
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∑–∞–Ω—è—Ç–∏–∏:")
            logging.info(f"  –î–∞—Ç–∞: '{sheet_date}' vs '{event_date}'")
            logging.info(f"  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: '{sheet_start}' vs '{event_start}'")
            logging.info(f"  –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: '{sheet_end}' vs '{event_end}'")
            logging.info(f"  –°—Ç–∞—Ç—É—Å: '{sheet_status}' vs '{event_status}'")
            logging.info(f"  –û—Ç–º–µ—Ç–∫–∞: '{sheet_mark}' vs '{event_mark}'")
        
        return variables_match

    def _compare_forecast_variables(self, forecast_sheet_data, event_data):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –ª–∏—Å—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏—è Google Calendar."""
        if not forecast_sheet_data or not event_data:
            return False
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        sheet_circle = forecast_sheet_data.get('–ö—Ä—É–∂–æ–∫', '').strip()
        sheet_child = forecast_sheet_data.get('–†–µ–±–µ–Ω–æ–∫', '').strip()
        sheet_date = forecast_sheet_data.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '').strip()
        sheet_budget = str(forecast_sheet_data.get('–ë—é–¥–∂–µ—Ç', '')).strip()
        sheet_status = forecast_sheet_data.get('–°—Ç–∞—Ç—É—Å', '').strip().lower()
        
        event_circle = event_data.get('circle_name', '').strip()
        event_child = event_data.get('child_name', '').strip()
        event_date = event_data.get('date', '').strip()
        event_budget = event_data.get('budget', '').strip()
        event_status = event_data.get('status', '').strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        variables_match = (
            sheet_circle == event_circle and
            sheet_child == event_child and
            sheet_date == event_date and
            sheet_budget == event_budget and
            sheet_status == event_status
        )
        
        if not variables_match:
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ:")
            logging.info(f"  –ö—Ä—É–∂–æ–∫: '{sheet_circle}' vs '{event_circle}'")
            logging.info(f"  –†–µ–±–µ–Ω–æ–∫: '{sheet_child}' vs '{event_child}'")
            logging.info(f"  –î–∞—Ç–∞: '{sheet_date}' vs '{event_date}'")
            logging.info(f"  –ë—é–¥–∂–µ—Ç: '{sheet_budget}' vs '{event_budget}'")
            logging.info(f"  –°—Ç–∞—Ç—É—Å: '{sheet_status}' vs '{event_status}'")
        
        return variables_match

    def professional_calendar_sync_DISABLED(self):
        """Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
        logging.info("Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return True

    def sync_calendar_with_google_calendar(self):
        """
        –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ª–∏—Å—Ç–æ–º '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'
        
        –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
        1. –ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π"
        2. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –∏—â–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar –ø–æ ID –∑–∞–Ω—è—Ç–∏—è
        3. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        4. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ
        5. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ
        6. –ï—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
        """
        try:
            import time
            start_time = time.time()
            
            if not self.calendar_service:
                return "‚ùå Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CALENDAR_ID –≤ .env —Ñ–∞–π–ª–µ."
            
            logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Google Calendar...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π"
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            try:
                calendar_data = calendar_sheet.get_all_values()
            except Exception as e:
                if "429" in str(e) or "Quota exceeded" in str(e):
                    logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
                    return "‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã API"
                raise e
            
            if len(calendar_data) <= 1:
                return "‚ùå –õ–∏—Å—Ç '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π' –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏."
            
            headers = calendar_data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            required_columns = {
                'lesson_id': '‚Ññ',
                'subscription_id': 'ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', 
                'date': '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è',
                'start_time': '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞',
                'status': '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
                'child': '–†–µ–±–µ–Ω–æ–∫',
                'mark': '–û—Ç–º–µ—Ç–∫–∞',
                'end_time': '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'
            }
            
            col_indices = {}
            for key, header in required_columns.items():
                try:
                    col_indices[key] = headers.index(header)
                except ValueError:
                    return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{header}' –≤ –ª–∏—Å—Ç–µ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä—É–∂–∫–æ–≤
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            subs_data = subs_sheet.get_all_values()
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ -> –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
            circle_names_map = {}
            if len(subs_data) > 1:
                subs_headers = subs_data[0]
                logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã': {subs_headers}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (B = ID, D = –ö—Ä—É–∂–æ–∫)
                try:
                    id_col_index = 1  # –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1)
                    circle_col_index = 3  # –°—Ç–æ–ª–±–µ—Ü D (–∏–Ω–¥–µ–∫—Å 3)
                    
                    for row in subs_data[1:]:
                        if len(row) > max(id_col_index, circle_col_index):
                            sub_id = str(row[id_col_index]).strip()
                            circle_name = str(row[circle_col_index]).strip()
                            if sub_id and circle_name:
                                circle_names_map[sub_id] = circle_name
                                logging.info(f"üìù –ú–∞–ø–ø–∏–Ω–≥: ID {sub_id} -> {circle_name}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
            
            logging.info(f"üìä –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –∫—Ä—É–∂–∫–æ–≤: {circle_names_map}")
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            created_count = 0
            updated_count = 0
            ignored_count = 0
            errors = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π
            for row_index, row in enumerate(calendar_data[1:], start=2):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    lesson_data = {
                        'lesson_id': str(row[col_indices['lesson_id']]).strip(),
                        'subscription_id': str(row[col_indices['subscription_id']]).strip(),
                        'date': str(row[col_indices['date']]).strip(),
                        'start_time': str(row[col_indices['start_time']]).strip(),
                        'status': str(row[col_indices['status']]).strip(),
                        'child': str(row[col_indices['child']]).strip(),
                        'mark': str(row[col_indices['mark']]).strip(),
                        'end_time': str(row[col_indices['end_time']]).strip()
                    }
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ ID –∑–∞–Ω—è—Ç–∏—è
                    if not lesson_data['lesson_id']:
                        continue
                    
                    # –†–∞–∑–æ–≤—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Google Calendar
                    # (—É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
                    circle_name = circle_names_map.get(lesson_data['subscription_id'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫')
                    
                    # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar –ø–æ ID –∑–∞–Ω—è—Ç–∏—è
                    existing_event = None
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID –∑–∞–Ω—è—Ç–∏—è (–µ—Å–ª–∏ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ N/A)
                    if lesson_data['lesson_id'] and lesson_data['lesson_id'] not in ['', 'N/A']:
                        existing_event = self.calendar_service.find_event_by_lesson_id(lesson_data['lesson_id'])
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –∏—â–µ–º –ø–æ –¥–µ—Ç–∞–ª—è–º (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Ä–µ–±–µ–Ω–æ–∫, –∫—Ä—É–∂–æ–∫)
                    if not existing_event:
                        existing_event = self.calendar_service.find_event_by_lesson_details(lesson_data, circle_name)
                        if existing_event:
                            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ –¥–µ—Ç–∞–ª—è–º –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data['lesson_id']}")
                    
                    if existing_event:
                        # –°–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                        event_variables = self.calendar_service.extract_lesson_variables_from_event(existing_event)
                        
                        logging.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data['lesson_id']}:")
                        logging.info(f"   üìä –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {lesson_data}")
                        logging.info(f"   üìÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {event_variables}")
                        
                        if self.calendar_service.compare_lesson_variables(lesson_data, event_variables):
                            # –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                            ignored_count += 1
                            logging.info(f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ {lesson_data['lesson_id']}: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        else:
                            # –ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                            logging.info(f"üîÑ –ó–∞–Ω—è—Ç–∏–µ {lesson_data['lesson_id']}: –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ")
                            if self.calendar_service.update_event(existing_event['id'], lesson_data, circle_name):
                                updated_count += 1
                                logging.info(f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ {lesson_data['lesson_id']}: —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                            else:
                                errors.append(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data['lesson_id']}")
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data['lesson_id']}")
                    else:
                        # –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        logging.info(f"üÜï –ó–∞–Ω—è—Ç–∏–µ {lesson_data['lesson_id']}: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ")
                        logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {lesson_data}")
                        logging.info(f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞: {circle_name}")
                        
                        event_id = self.calendar_service.create_event(lesson_data, circle_name)
                        if event_id:
                            created_count += 1
                            logging.info(f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ {lesson_data['lesson_id']}: —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å ID {event_id}")
                        else:
                            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data['lesson_id']}"
                            errors.append(error_msg)
                            logging.error(f"‚ùå {error_msg}")
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_index}: {e}"
                    errors.append(error_msg)
                    logging.error(error_msg)
            
            # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏ –∑–∞–Ω—è—Ç–∏–π –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            logging.info("üßπ –ü—Ä–æ–≤–µ—Ä—è—é –∏ —É–¥–∞–ª—è—é –¥—É–±–ª–∏ –∑–∞–Ω—è—Ç–∏–π...")
            duplicates_removed = self.calendar_service.remove_duplicate_lesson_events()
            if duplicates_removed > 0:
                logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {duplicates_removed} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –∑–∞–Ω—è—Ç–∏–π")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            end_time = time.time()
            execution_time = round(end_time - start_time, 2)
            total_api_calls = 3 + created_count + updated_count + duplicates_removed  # 3 –±–∞–∑–æ–≤—ã—Ö + —Å–æ–∑–¥–∞–Ω–∏–µ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ + —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            result = f"""üìÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Calendar –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {created_count}
‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {updated_count}  
‚Ä¢ ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): {ignored_count}
‚Ä¢ üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {duplicates_removed}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {len(errors)}

‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} —Å–µ–∫
‚Ä¢ üì° API –∑–∞–ø—Ä–æ—Å–æ–≤: {total_api_calls}"""

            if errors:
                result += f"\n\n‚ùå **–û—à–∏–±–∫–∏:**\n" + "\n".join(f"‚Ä¢ {error}" for error in errors[:5])
                if len(errors) > 5:
                    result += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"
            
            logging.info(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {ignored_count}, —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π {duplicates_removed}, –≤—Ä–µ–º—è: {execution_time}—Å, API: {total_api_calls}")
            return result
            
        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}"
            logging.error(error_msg, exc_info=True)
            return error_msg

    def sync_forecast_with_google_calendar(self):
        """
        –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç —Å Google Calendar
        
        –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
        1. –ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥–Ω–æ–∑"
        2. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –∏—â–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
        3. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        4. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ
        5. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ (–Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å)
        6. –ï—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
        """
        try:
            import time
            start_time = time.time()
            
            if not self.calendar_service:
                return "‚ùå Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CALENDAR_ID –≤ .env —Ñ–∞–π–ª–µ."
            
            logging.info("üí∞ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç —Å Google Calendar...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–ü—Ä–æ–≥–Ω–æ–∑"
            try:
                forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
                forecast_data = forecast_sheet.get_all_values()
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑': {e}"
            
            if len(forecast_data) <= 1:
                # –õ–∏—Å—Ç –ø—É—Å—Ç - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                logging.info("üì≠ –õ–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑' –ø—É—Å—Ç, —É–¥–∞–ª—è—é –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
                deleted_count = self.calendar_service.delete_all_forecast_events()
                
                if deleted_count > 0:
                    return f"üóëÔ∏è **–õ–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑' –ø—É—Å—Ç**\n\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\nüìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—á–∏—â–µ–Ω –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ–ø–ª–∞—Ç"
                else:
                    return "‚ÑπÔ∏è **–õ–∏—Å—Ç '–ü—Ä–æ–≥–Ω–æ–∑' –ø—É—Å—Ç**\n\nüìÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(forecast_data)-1} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑'")
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            created_count = 0
            updated_count = 0
            ignored_count = 0
            deleted_count = 0
            errors = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            all_calendar_events = self.calendar_service.get_all_events()
            existing_forecast_events = []
            for event in all_calendar_events:
                description = event.get('description', '')
                if "ID –ø—Ä–æ–≥–Ω–æ–∑–∞:" in description:
                    existing_forecast_events.append(event)
            
            logging.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_forecast_events)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            
            # –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            table_forecast_ids = set()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
            for row_index, row in enumerate(forecast_data[1:], 2):
                try:
                    if len(row) < 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å—Ç–æ–ª–±—Ü–æ–≤: –ö—Ä—É–∂–æ–∫, –†–µ–±–µ–Ω–æ–∫, –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã, –ë—é–¥–∂–µ—Ç, –°—Ç–∞—Ç—É—Å
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    circle = str(row[0]).strip()
                    child = str(row[1]).strip()
                    payment_date = str(row[2]).strip()
                    budget = str(row[3]).strip()
                    status = str(row[4]).strip()
                    
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏)
                    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å—Ç—Ä–æ–∫
                    import hashlib
                    unique_key = f"{circle}_{child}_{payment_date}_{budget}"
                    forecast_id = f"forecast_{hashlib.md5(unique_key.encode()).hexdigest()[:8]}"
                    
                    forecast_data_item = {
                        'circle': circle,                   # A: –ö—Ä—É–∂–æ–∫
                        'child': child,                     # B: –†–µ–±–µ–Ω–æ–∫
                        'payment_date': payment_date,       # C: –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                        'budget': budget,                   # D: –ë—é–¥–∂–µ—Ç
                        'status': status,                   # E: –°—Ç–∞—Ç—É—Å
                        'forecast_id': forecast_id          # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                    }
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    if not forecast_data_item['child'] or not forecast_data_item['payment_date']:
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    table_forecast_ids.add(forecast_data_item['forecast_id'])
                    
                    logging.info(f"üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑: {forecast_data_item['child']} - {forecast_data_item['circle']} –Ω–∞ {forecast_data_item['payment_date']} (ID: {forecast_data_item['forecast_id']})")
                    
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ ID –ø—Ä–æ–≥–Ω–æ–∑–∞
                    existing_event = None
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID –ø—Ä–æ–≥–Ω–æ–∑–∞
                    existing_event = self.calendar_service.find_forecast_event_by_id(forecast_data_item['forecast_id'])
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –∏—â–µ–º –ø–æ –¥–µ—Ç–∞–ª—è–º (–¥–∞—Ç–∞, —Ä–µ–±–µ–Ω–æ–∫, –∫—Ä—É–∂–æ–∫)
                    if not existing_event:
                        existing_event = self.calendar_service.find_forecast_event_by_details(forecast_data_item)
                        if existing_event:
                            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–µ—Ç–∞–ª—è–º –¥–ª—è {forecast_data_item['child']} - {forecast_data_item['circle']}")
                    
                    if existing_event:
                        # –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        event_variables = self.calendar_service.extract_forecast_variables_from_event(existing_event)
                        
                        logging.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data_item['forecast_id']}:")
                        logging.info(f"   üìä –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {forecast_data_item}")
                        logging.info(f"   üìÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {event_variables}")
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                        if self.calendar_service.compare_forecast_variables(forecast_data_item, event_variables):
                            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            ignored_count += 1
                            logging.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ {forecast_data_item['forecast_id']}: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        else:
                            # –ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                            logging.info(f"üîÑ –ü—Ä–æ–≥–Ω–æ–∑ {forecast_data_item['forecast_id']}: –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ")
                            if self.calendar_service.update_forecast_event(existing_event['id'], forecast_data_item):
                                updated_count += 1
                                logging.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ {forecast_data_item['forecast_id']}: —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                            else:
                                errors.append(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data_item['forecast_id']}")
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data_item['forecast_id']}")
                    else:
                        # –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        logging.info(f"üÜï –ü—Ä–æ–≥–Ω–æ–∑ {forecast_data_item['forecast_id']}: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ")
                        logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {forecast_data_item}")
                        
                        event_id = self.calendar_service.create_forecast_event(forecast_data_item)
                        if event_id:
                            created_count += 1
                            logging.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ {forecast_data_item['forecast_id']}: —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å ID {event_id}")
                        else:
                            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data_item['forecast_id']}"
                            errors.append(error_msg)
                            logging.error(f"‚ùå {error_msg}")
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ {row_index}: {e}"
                    errors.append(error_msg)
                    logging.error(error_msg)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
            logging.info(f"üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
            logging.info(f"üìä ID –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(table_forecast_ids)} —à—Ç—É–∫")
            
            for event in existing_forecast_events:
                try:
                    event_variables = self.calendar_service.extract_forecast_variables_from_event(event)
                    event_forecast_id = event_variables.get('forecast_id', '')
                    
                    if event_forecast_id and event_forecast_id not in table_forecast_ids:
                        # –°–æ–±—ã—Ç–∏–µ –µ—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –Ω–æ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ - —É–¥–∞–ª—è–µ–º
                        event_summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        logging.info(f"üóëÔ∏è –£–¥–∞–ª—è—é –ª–∏—à–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {event_summary} (ID: {event_forecast_id})")
                        
                        try:
                            self.calendar_service.service.events().delete(
                                calendarId=self.calendar_service.calendar_id,
                                eventId=event['id']
                            ).execute()
                            
                            deleted_count += 1
                            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ª–∏—à–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event_summary}")
                            
                        except Exception as delete_error:
                            error_msg = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_forecast_id}: {delete_error}"
                            errors.append(error_msg)
                            logging.error(error_msg)
                            
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            end_time = time.time()
            execution_time = round(end_time - start_time, 2)
            total_api_calls = 3 + created_count + updated_count  # 3 –±–∞–∑–æ–≤—ã—Ö + —Å–æ–∑–¥–∞–Ω–∏–µ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            result = f"""üí∞ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {created_count}
‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {updated_count}  
‚Ä¢ ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): {ignored_count}
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ª–∏—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π: {deleted_count}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {len(errors)}

‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time} —Å–µ–∫
‚Ä¢ üì° API –∑–∞–ø—Ä–æ—Å–æ–≤: {total_api_calls}"""

            if errors:
                result += f"\n\n‚ùå **–û—à–∏–±–∫–∏:**\n" + "\n".join(f"‚Ä¢ {error}" for error in errors[:5])
                if len(errors) > 5:
                    result += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"
            
            logging.info(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {ignored_count}, —É–¥–∞–ª–µ–Ω–æ {deleted_count}, –≤—Ä–µ–º—è: {execution_time}—Å, API: {total_api_calls}")
            return result
            
        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}"
            logging.error(error_msg, exc_info=True)
            return error_msg

    def professional_calendar_sync_DISABLED_OLD(self):
        """
        –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø
        
        –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
        1. –ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∏—Å—Ç–æ–≤ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π" –∏ "–ü—Ä–æ–≥–Ω–æ–∑"
        2. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ (—Å—Ç–æ–ª–±–µ—Ü I/E)
        3. –ï—Å–ª–∏ ID –µ—Å—Ç—å - –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        4. –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –ò–ì–ù–û–†–ò–†–£–ï–¢
        5. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è - –û–ë–ù–û–í–õ–Ø–ï–¢ —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
        6. –ï—Å–ª–∏ ID –Ω–µ—Ç –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –°–û–ó–î–ê–ï–¢ –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç ID
        7. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –∏—Ö –ø—Ä–∏–≤—è–∑–∫—É –∫ –¥–∞–Ω–Ω—ã–º
        """
        try:
            logging.info("üîÑ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É...")
            
            if not config.GOOGLE_CALENDAR_ID:
                logging.error("GOOGLE_CALENDAR_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
            from datetime import datetime, timedelta
            now = datetime.now()
            start_date = now.replace(day=1)
            end_date = now.replace(month=now.month + 6, day=1) if now.month <= 6 else now.replace(year=now.year + 1, month=6, day=1)
            
            existing_events_map = self._get_existing_events_map(start_date, end_date)
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar: {len(existing_events_map)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if existing_events_map:
                logging.info(f"üîç –°–ü–ò–°–û–ö –í–°–ï–• –ù–ê–ô–î–ï–ù–ù–´–• –°–û–ë–´–¢–ò–ô –í GOOGLE CALENDAR:")
                for event_id, event in existing_events_map.items():
                    logging.info(f"  üÜî ID: {event_id}")
                    logging.info(f"    üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    logging.info(f"    üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...")
            else:
                logging.info(f"‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –ù–ò –û–î–ù–û–ì–û –°–û–ë–´–¢–ò–Ø –í GOOGLE CALENDAR!")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            subscriptions_data = self._get_subscriptions_data()
            circle_names_map = self._create_circle_names_map(subscriptions_data)
            
            stats = {'lessons_created': 0, 'lessons_updated': 0, 'lessons_ignored': 0, 
                    'forecast_created': 0, 'forecast_updated': 0, 'forecast_ignored': 0, 'errors': 0}
            
            # === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø –ó–ê–ù–Ø–¢–ò–ô ===
            logging.info("üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π...")
            
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            calendar_data = calendar_sheet.get_all_values()
            
            if len(calendar_data) <= 1:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π")
            else:
                # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: ‚Ññ, ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞, –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è, –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è, –†–µ–±–µ–Ω–æ–∫, –û—Ç–º–µ—Ç–∫–∞, –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ
                headers = calendar_data[0]
                logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {headers}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                col_indices = {}
                expected_columns = {
                    'lesson_num': '‚Ññ',
                    'subscription_id': 'ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', 
                    'lesson_date': '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è',
                    'start_time': '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞',
                    'status': '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
                    'child_name': '–†–µ–±–µ–Ω–æ–∫',
                    'mark': '–û—Ç–º–µ—Ç–∫–∞',
                    'end_time': '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
                    'event_id': 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ'
                }
                
                for key, expected_header in expected_columns.items():
                    try:
                        col_indices[key] = headers.index(expected_header)
                    except ValueError:
                        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{expected_header}' –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π")
                        return False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π
                for row_index, row in enumerate(calendar_data[1:], start=2):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        lesson_data = {}
                        for key, col_index in col_indices.items():
                            lesson_data[key] = row[col_index] if col_index < len(row) else ''
                        
                        logging.info(f"üîç –°–¢–†–û–ö–ê {row_index}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ")
                        logging.info(f"  üìã –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {lesson_data}")
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
                        if not lesson_data['lesson_date'] or not lesson_data['lesson_date'].strip():
                            logging.info(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {row_index} - –Ω–µ—Ç –¥–∞—Ç—ã")
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
                        circle_name = circle_names_map.get(lesson_data['subscription_id'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫')
                        logging.info(f"  üé® –ö—Ä—É–∂–æ–∫: {circle_name}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Å–æ–±—ã—Ç–∏—è
                        current_event_id = lesson_data['event_id'].strip()
                        logging.info(f"  üÜî ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ: '{current_event_id}' (–¥–ª–∏–Ω–∞: {len(current_event_id)})")
                        
                        if current_event_id and current_event_id in existing_events_map:
                            logging.info(f"  ‚úÖ –°–õ–£–ß–ê–ô 1: ID –Ω–∞–π–¥–µ–Ω –≤ Google Calendar - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
                            # –ï–°–¢–¨ ID –ò –°–û–ë–´–¢–ò–ï –°–£–©–ï–°–¢–í–£–ï–¢ - –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï
                            event = existing_events_map[current_event_id]
                            logging.info(f"  üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                            
                            event_variables = self._extract_lesson_variables_from_event(event)
                            logging.info(f"  üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è: {event_variables}")
                            
                            if event_variables and self._compare_lesson_data_with_event(lesson_data, circle_name, event_variables):
                                # –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–í–ü–ê–î–ê–Æ–¢ - –ò–ì–ù–û–†–ò–†–£–ï–ú
                                stats['lessons_ignored'] += 1
                                logging.info(f"  ‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –ò–ì–ù–û–†–ò–†–£–ï–ú")
                            else:
                                # –ï–°–¢–¨ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø - –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û ID
                                logging.info(f"  üîÑ –ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è - –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û ID")
                                if self._update_lesson_event_by_id(current_event_id, lesson_data, circle_name):
                                    stats['lessons_updated'] += 1
                                    logging.info(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è {lesson_data['lesson_num']} –ø–æ ID {current_event_id}")
                                else:
                                    stats['errors'] += 1
                                    logging.error(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {current_event_id}")
                                    
                        elif current_event_id and current_event_id not in existing_events_map:
                            logging.info(f"  ‚ö†Ô∏è –°–õ–£–ß–ê–ô 2: ID –µ—Å—Ç—å, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ Google Calendar")
                            logging.info(f"  üßπ –û—á–∏—â–∞–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
                            # –ï–°–¢–¨ ID, –ù–û –°–û–ë–´–¢–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û - –û–ß–ò–©–ê–ï–ú ID –ò –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï
                            calendar_sheet.update_cell(row_index, col_indices['event_id'] + 1, '')
                            logging.info(f"  üóëÔ∏è –û—á–∏—â–µ–Ω ID –≤ —Å—Ç—Ä–æ–∫–µ {row_index}, —Å—Ç–æ–ª–±–µ—Ü {col_indices['event_id'] + 1}")
                            
                            new_event_id = self._create_lesson_event(lesson_data, circle_name)
                            if new_event_id:
                                calendar_sheet.update_cell(row_index, col_indices['event_id'] + 1, new_event_id)
                                stats['lessons_created'] += 1
                                logging.info(f"  ‚ú® –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {new_event_id} –∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É {row_index}")
                            else:
                                stats['errors'] += 1
                                logging.error(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index}")
                                
                        else:
                            logging.info(f"  üÜï –°–õ–£–ß–ê–ô 3: –ù–ï–¢ ID - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
                            # –ù–ï–¢ ID - –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï –°–û–ë–´–¢–ò–ï
                            new_event_id = self._create_lesson_event(lesson_data, circle_name)
                            if new_event_id:
                                logging.info(f"  üíæ –ó–ê–ü–ò–°–´–í–ê–ï–ú ID –í GOOGLE SHEETS:")
                                logging.info(f"    üìç –°—Ç—Ä–æ–∫–∞: {row_index}")
                                logging.info(f"    üìç –°—Ç–æ–ª–±–µ—Ü: {col_indices['event_id'] + 1}")
                                logging.info(f"    üÜî ID –¥–ª—è –∑–∞–ø–∏—Å–∏: {new_event_id}")
                                
                                calendar_sheet.update_cell(row_index, col_indices['event_id'] + 1, new_event_id)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è
                                updated_value = calendar_sheet.cell(row_index, col_indices['event_id'] + 1).value
                                logging.info(f"    ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏: –≤ —è—á–µ–π–∫–µ —Ç–µ–ø–µ—Ä—å '{updated_value}'")
                                
                                stats['lessons_created'] += 1
                                logging.info(f"  ‚ú® –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {new_event_id} –∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É {row_index}, —Å—Ç–æ–ª–±–µ—Ü {col_indices['event_id'] + 1}")
                            else:
                                stats['errors'] += 1
                                logging.error(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index}")
                                
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_index} –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π: {e}")
                        stats['errors'] += 1
            
            # === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–ì–ù–û–ó–ê ===
            logging.info("üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç...")
            
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            forecast_data = forecast_sheet.get_all_values()
            
            if len(forecast_data) <= 1:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ")
            else:
                # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: –ö—Ä—É–∂–æ–∫, –†–µ–±–µ–Ω–æ–∫, –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã, –ë—é–¥–∂–µ—Ç, ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ, –°—Ç–∞—Ç—É—Å
                forecast_headers = forecast_data[0]
                logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_headers}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                forecast_col_indices = {}
                expected_forecast_columns = {
                    'circle_name': '–ö—Ä—É–∂–æ–∫',
                    'child_name': '–†–µ–±–µ–Ω–æ–∫',
                    'payment_date': '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã',
                    'budget': '–ë—é–¥–∂–µ—Ç',
                    'event_id': 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ',
                    'status': '–°—Ç–∞—Ç—É—Å'
                }
                
                for key, expected_header in expected_forecast_columns.items():
                    try:
                        forecast_col_indices[key] = forecast_headers.index(expected_header)
                    except ValueError:
                        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{expected_header}' –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ")
                        return False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
                for row_index, row in enumerate(forecast_data[1:], start=2):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        forecast_row_data = {}
                        for key, col_index in forecast_col_indices.items():
                            forecast_row_data[key] = row[col_index] if col_index < len(row) else ''
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã –∏–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ª–∏—á–Ω—ã–º –æ—Ç "–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
                        if (not forecast_row_data['payment_date'] or not forecast_row_data['payment_date'].strip() or
                            forecast_row_data['status'].strip() != '–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Å–æ–±—ã—Ç–∏—è
                        current_event_id = forecast_row_data['event_id'].strip()
                        
                        if current_event_id and current_event_id in existing_events_map:
                            # –ï–°–¢–¨ ID –ò –°–û–ë–´–¢–ò–ï –°–£–©–ï–°–¢–í–£–ï–¢ - –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï
                            event = existing_events_map[current_event_id]
                            event_variables = self._extract_forecast_variables_from_event(event)
                            
                            if event_variables and self._compare_forecast_data_with_event(forecast_row_data, event_variables):
                                # –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–í–ü–ê–î–ê–Æ–¢ - –ò–ì–ù–û–†–ò–†–£–ï–ú
                                stats['forecast_ignored'] += 1
                                logging.debug(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ {forecast_row_data['payment_date']}: –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                            else:
                                # –ï–°–¢–¨ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø - –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û ID
                                if self._update_forecast_event_by_id(current_event_id, forecast_row_data):
                                    stats['forecast_updated'] += 1
                                    logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_row_data['payment_date']} –ø–æ ID {current_event_id}")
                                else:
                                    stats['errors'] += 1
                                    
                        elif current_event_id and current_event_id not in existing_events_map:
                            # –ï–°–¢–¨ ID, –ù–û –°–û–ë–´–¢–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û - –û–ß–ò–©–ê–ï–ú ID –ò –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï
                            forecast_sheet.update_cell(row_index, forecast_col_indices['event_id'] + 1, '')
                            new_event_id = self._create_forecast_event(forecast_row_data)
                            if new_event_id:
                                forecast_sheet.update_cell(row_index, forecast_col_indices['event_id'] + 1, new_event_id)
                                stats['forecast_created'] += 1
                                logging.info(f"‚ú® –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_row_data['payment_date']} (—Å—Ç–∞—Ä–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                            else:
                                stats['errors'] += 1
                                
                        else:
                            # –ù–ï–¢ ID - –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï –°–û–ë–´–¢–ò–ï
                            new_event_id = self._create_forecast_event(forecast_row_data)
                            if new_event_id:
                                forecast_sheet.update_cell(row_index, forecast_col_indices['event_id'] + 1, new_event_id)
                                stats['forecast_created'] += 1
                                logging.info(f"‚ú® –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_row_data['payment_date']}")
                            else:
                                stats['errors'] += 1
                                
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_index} –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
                        stats['errors'] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logging.info(f"üìä –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:")
            logging.info(f"  üìÖ –ó–∞–Ω—è—Ç–∏—è: —Å–æ–∑–¥–∞–Ω–æ {stats['lessons_created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {stats['lessons_updated']}, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {stats['lessons_ignored']}")
            logging.info(f"  üí∞ –ü—Ä–æ–≥–Ω–æ–∑—ã: —Å–æ–∑–¥–∞–Ω–æ {stats['forecast_created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {stats['forecast_updated']}, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {stats['forecast_ignored']}")
            logging.info(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
            
            return stats['errors'] == 0
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            return False
            
            # === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–ì–ù–û–ó–û–í ===
            if forecast_data:
                logging.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
                forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
                forecast_data_raw = forecast_sheet.get_all_values()
                
                forecast_headers = forecast_data_raw[0]
                forecast_event_id_col = None
                
                for i, header in enumerate(forecast_headers):
                    if header == 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ':
                        forecast_event_id_col = i
                        break
                
                if forecast_event_id_col is not None:
                    for forecast in forecast_data:
                        forecast_date = forecast.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '')
                        
                        if not forecast_date or not forecast_date.strip():
                            continue
                        
                        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        row_index = None
                        current_event_id = ''
                        
                        for i, row in enumerate(forecast_data_raw[1:], start=2):
                            if (len(row) >= 3 and 
                                str(row[0]).strip() == forecast.get('–ö—Ä—É–∂–æ–∫', '').strip() and
                                str(row[1]).strip() == forecast.get('–†–µ–±–µ–Ω–æ–∫', '').strip() and
                                str(row[2]).strip() == forecast_date.strip()):
                                row_index = i
                                current_event_id = row[forecast_event_id_col] if forecast_event_id_col < len(row) else ''
                                break
                        
                        if not row_index:
                            continue
                        
                        # –õ–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ ID
                        if current_event_id and current_event_id in existing_events_map:
                            # –ï–°–¢–¨ ID –ò –°–û–ë–´–¢–ò–ï –°–£–©–ï–°–¢–í–£–ï–¢ - –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï
                            event = existing_events_map[current_event_id]
                            event_variables = self._extract_forecast_variables_from_event(event)
                            
                            if event_variables and self._compare_forecast_variables(forecast, event_variables):
                                # –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–í–ü–ê–î–ê–Æ–¢ - –ò–ì–ù–û–†–ò–†–£–ï–ú
                                stats['ignored'] += 1
                                logging.debug(f"–ü—Ä–æ–≥–Ω–æ–∑ {forecast_date}: –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                            else:
                                # –ï–°–¢–¨ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø - –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û ID
                                result = self._update_event_by_id(current_event_id, forecast, None, None, 'forecast')
                                if result:
                                    stats['updated'] += 1
                                    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_date} –ø–æ ID {current_event_id}")
                                else:
                                    stats['errors'] += 1
                                    
                        elif current_event_id and current_event_id not in existing_events_map:
                            # –ï–°–¢–¨ ID, –ù–û –°–û–ë–´–¢–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û - –û–ß–ò–©–ê–ï–ú ID –ò –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï
                            forecast_sheet.update_cell(row_index, forecast_event_id_col + 1, '')
                            new_event_id = self._create_new_forecast_event(forecast)
                            if new_event_id:
                                forecast_sheet.update_cell(row_index, forecast_event_id_col + 1, new_event_id)
                                stats['created'] += 1
                                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_date} (—Å—Ç–∞—Ä–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                            else:
                                stats['errors'] += 1
                                
                        else:
                            # –ù–ï–¢ ID - –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï –°–û–ë–´–¢–ò–ï
                            new_event_id = self._create_new_forecast_event(forecast)
                            if new_event_id:
                                forecast_sheet.update_cell(row_index, forecast_event_id_col + 1, new_event_id)
                                stats['created'] += 1
                                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_date}")
                            else:
                                stats['errors'] += 1
            
            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            logging.info(f"  –°–æ–∑–¥–∞–Ω–æ: {stats['created']}")
            logging.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
            logging.info(f"  –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å–æ–≤–ø–∞–¥–∞—é—Ç): {stats['ignored']}")
            logging.info(f"  –û—à–∏–±–æ–∫: {stats['errors']}")
            
            return stats['errors'] == 0
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            return False

    def _compare_lesson_data_with_event(self, lesson_data, circle_name, event_variables):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ Google Sheets —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è Google Calendar."""
        try:
            logging.info(f"    üîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            sheet_lesson_num = str(lesson_data.get('lesson_num', '')).strip()
            sheet_date = str(lesson_data.get('lesson_date', '')).strip()
            sheet_start_time = str(lesson_data.get('start_time', '')).strip()
            sheet_end_time = str(lesson_data.get('end_time', '')).strip()
            sheet_status = str(lesson_data.get('status', '')).strip()
            sheet_mark = str(lesson_data.get('mark', '')).strip()
            sheet_child_name = str(lesson_data.get('child_name', '')).strip()
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            event_lesson_num = str(event_variables.get('lesson_id', '')).strip()
            event_date = str(event_variables.get('date', '')).strip()
            event_start_time = str(event_variables.get('start_time', '')).strip()
            event_end_time = str(event_variables.get('end_time', '')).strip()
            event_status = str(event_variables.get('status', '')).strip()
            event_mark = str(event_variables.get('mark', '')).strip()
            
            logging.info(f"      üìä –î–ê–ù–ù–´–ï –ò–ó GOOGLE SHEETS:")
            logging.info(f"        üÜî –ù–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è: '{sheet_lesson_num}'")
            logging.info(f"        üìÖ –î–∞—Ç–∞: '{sheet_date}'")
            logging.info(f"        üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: '{sheet_start_time}'")
            logging.info(f"        üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: '{sheet_end_time}'")
            logging.info(f"        üìä –°—Ç–∞—Ç—É—Å: '{sheet_status}'")
            logging.info(f"        ‚úèÔ∏è –û—Ç–º–µ—Ç–∫–∞: '{sheet_mark}'")
            
            logging.info(f"      üìä –î–ê–ù–ù–´–ï –ò–ó GOOGLE CALENDAR:")
            logging.info(f"        üÜî –ù–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è: '{event_lesson_num}'")
            logging.info(f"        üìÖ –î–∞—Ç–∞: '{event_date}'")
            logging.info(f"        üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: '{event_start_time}'")
            logging.info(f"        üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: '{event_end_time}'")
            logging.info(f"        üìä –°—Ç–∞—Ç—É—Å: '{event_status}'")
            logging.info(f"        ‚úèÔ∏è –û—Ç–º–µ—Ç–∫–∞: '{event_mark}'")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ—Ç–¥–µ–ª—å–Ω–æ
            lesson_num_match = sheet_lesson_num == event_lesson_num
            date_match = sheet_date == event_date
            start_time_match = sheet_start_time == event_start_time
            end_time_match = sheet_end_time == event_end_time
            status_match = sheet_status == event_status
            mark_match = sheet_mark == event_mark
            
            logging.info(f"      ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:")
            logging.info(f"        üÜî –ù–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è: {lesson_num_match} ({'‚úÖ' if lesson_num_match else '‚ùå'})")
            logging.info(f"        üìÖ –î–∞—Ç–∞: {date_match} ({'‚úÖ' if date_match else '‚ùå'})")
            logging.info(f"        üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time_match} ({'‚úÖ' if start_time_match else '‚ùå'})")
            logging.info(f"        üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time_match} ({'‚úÖ' if end_time_match else '‚ùå'})")
            logging.info(f"        üìä –°—Ç–∞—Ç—É—Å: {status_match} ({'‚úÖ' if status_match else '‚ùå'})")
            logging.info(f"        ‚úèÔ∏è –û—Ç–º–µ—Ç–∫–∞: {mark_match} ({'‚úÖ' if mark_match else '‚ùå'})")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            variables_match = (
                lesson_num_match and
                date_match and
                start_time_match and
                end_time_match and
                status_match and
                mark_match
            )
            
            logging.info(f"      üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {variables_match} ({'‚úÖ –í–°–ï –°–û–í–ü–ê–î–ê–ï–¢' if variables_match else '‚ùå –ï–°–¢–¨ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø'})")
            
            return variables_match
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è: {e}")
            return False

    def _compare_forecast_data_with_event(self, forecast_data, event_variables):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ Google Sheets —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è Google Calendar."""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            sheet_circle = str(forecast_data.get('circle_name', '')).strip()
            sheet_child = str(forecast_data.get('child_name', '')).strip()
            sheet_date = str(forecast_data.get('payment_date', '')).strip()
            sheet_budget = str(forecast_data.get('budget', '')).strip()
            sheet_status = str(forecast_data.get('status', '')).strip()
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            event_circle = str(event_variables.get('circle_name', '')).strip()
            event_child = str(event_variables.get('child_name', '')).strip()
            event_date = str(event_variables.get('date', '')).strip()
            event_budget = str(event_variables.get('budget', '')).strip()
            event_status = str(event_variables.get('status', '')).strip()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            variables_match = (
                sheet_circle == event_circle and
                sheet_child == event_child and
                sheet_date == event_date and
                sheet_budget == event_budget and
                sheet_status == event_status
            )
            
            if not variables_match:
                logging.info(f"–ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ {sheet_date}:")
                logging.info(f"  –ö—Ä—É–∂–æ–∫: '{sheet_circle}' vs '{event_circle}'")
                logging.info(f"  –†–µ–±–µ–Ω–æ–∫: '{sheet_child}' vs '{event_child}'")
                logging.info(f"  –î–∞—Ç–∞: '{sheet_date}' vs '{event_date}'")
                logging.info(f"  –ë—é–¥–∂–µ—Ç: '{sheet_budget}' vs '{event_budget}'")
                logging.info(f"  –°—Ç–∞—Ç—É—Å: '{sheet_status}' vs '{event_status}'")
            
            return variables_match
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return False

    def _update_event_by_id(self, event_id, data, circle_names_map, forecast_map, event_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        try:
            if event_type == 'lesson':
                event_data = self._prepare_lesson_event_data(data, circle_names_map, forecast_map)
            else:  # forecast
                event_data = self._prepare_forecast_event_data(data)
            
            if not event_data:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
            updated_event = self.calendar_service.events().update(
                calendarId=config.GOOGLE_CALENDAR_ID,
                eventId=event_id,
                body=event_data
            ).execute()
            
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ ID {event_id}: {updated_event.get('summary')}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            return False

    def _update_lesson_event_by_id(self, event_id, lesson_data, circle_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ ID."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_lesson_event_data_from_row(lesson_data, circle_name)
            if not event_data:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            updated_event = self.calendar_service.events().update(
                calendarId=config.GOOGLE_CALENDAR_ID,
                eventId=event_id,
                body=event_data
            ).execute()
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è {event_id}: {e}")
            return False

    def _update_forecast_event_by_id(self, event_id, forecast_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ ID."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_forecast_event_data_from_row(forecast_data)
            if not event_data:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            updated_event = self.calendar_service.events().update(
                calendarId=config.GOOGLE_CALENDAR_ID,
                eventId=event_id,
                body=event_data
            ).execute()
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {event_id}: {e}")
            return False

    def _create_lesson_event(self, lesson_data, circle_name):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è."""
        try:
            logging.info(f"    üÜï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –°–û–ë–´–¢–ò–Ø:")
            logging.info(f"      üìã –î–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: {lesson_data}")
            logging.info(f"      üé® –ö—Ä—É–∂–æ–∫: {circle_name}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_lesson_event_data_from_row(lesson_data, circle_name)
            if not event_data:
                logging.error(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
                return None
            
            logging.info(f"      üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:")
            logging.info(f"        üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data.get('summary', '')}")
            logging.info(f"        üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {event_data.get('description', '')}")
            logging.info(f"        üïê –ù–∞—á–∞–ª–æ: {event_data.get('start', {})}")
            logging.info(f"        üïê –ö–æ–Ω–µ—Ü: {event_data.get('end', {})}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            logging.info(f"      üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar...")
            created_event = self.calendar_service.events().insert(
                calendarId=config.GOOGLE_CALENDAR_ID,
                body=event_data
            ).execute()
            
            event_id = created_event.get('id')
            logging.info(f"      ‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {event_id}")
            logging.info(f"      üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {created_event.get('summary', '')}")
            
            return event_id
            
        except Exception as e:
            logging.error(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return None

    def _create_forecast_event(self, forecast_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_forecast_event_data_from_row(forecast_data)
            if not event_data:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            created_event = self.calendar_service.events().insert(
                calendarId=config.GOOGLE_CALENDAR_ID,
                body=event_data
            ).execute()
            
            return created_event.get('id')
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return None

    def _prepare_lesson_event_data_from_row(self, lesson_data, circle_name):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã."""
        try:
            from datetime import datetime
            
            lesson_num = lesson_data.get('lesson_num', '')
            lesson_date = lesson_data.get('lesson_date', '')
            start_time = lesson_data.get('start_time', '')
            end_time = lesson_data.get('end_time', '')
            status = lesson_data.get('status', '')
            mark = lesson_data.get('mark', '')
            child_name = lesson_data.get('child_name', '')
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = self._get_status_emoji(mark, status, False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            title = f"{status_emoji}{circle_name} - {child_name}".strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ü–û–õ–ù–´–ú–ò –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
            description = ""
            if mark:
                description = f"–û—Ç–º–µ—Ç–∫–∞: {mark}\n\n"
            
            description += f"lesson_id:{lesson_num}\n"
            description += f"date:{lesson_date}\n"
            description += f"start_time:{start_time}\n"
            description += f"end_time:{end_time}\n"
            description += f"status:{status}\n"
            description += f"mark:{mark}\n"
            description += f"#schedule_sync"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            lesson_date_obj = datetime.strptime(lesson_date, '%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if start_time and start_time.strip():
                try:
                    start_hour, start_minute = map(int, start_time.split(':'))
                    start_datetime = lesson_date_obj.replace(hour=start_hour, minute=start_minute)
                except:
                    start_datetime = lesson_date_obj.replace(hour=9, minute=0)
            else:
                start_datetime = lesson_date_obj.replace(hour=9, minute=0)
            
            if end_time and end_time.strip():
                try:
                    end_hour, end_minute = map(int, end_time.split(':'))
                    end_datetime = lesson_date_obj.replace(hour=end_hour, minute=end_minute)
                except:
                    end_datetime = start_datetime.replace(hour=start_datetime.hour + 1)
            else:
                end_datetime = start_datetime.replace(hour=start_datetime.hour + 1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = {
                'summary': title,
                'description': description,
                'start': {
                    'dateTime': start_datetime.isoformat(),
                    'timeZone': 'Asia/Almaty',
                },
                'end': {
                    'dateTime': end_datetime.isoformat(),
                    'timeZone': 'Asia/Almaty',
                },
            }
            
            return event_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return None

    def _prepare_forecast_event_data_from_row(self, forecast_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã."""
        try:
            from datetime import datetime
            
            circle_name = forecast_data.get('circle_name', '')
            child_name = forecast_data.get('child_name', '')
            payment_date = forecast_data.get('payment_date', '')
            budget = str(forecast_data.get('budget', ''))
            status = forecast_data.get('status', '–æ–∂–∏–¥–∞–µ—Ç—Å—è')
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
            payment_date_obj = datetime.strptime(payment_date, '%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ü–û–õ–ù–´–ú–ò –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            description = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {budget} —Ä—É–±.\n\n"
            description += f"circle_name:{circle_name}\n"
            description += f"child_name:{child_name}\n"
            description += f"date:{payment_date}\n"
            description += f"budget:{budget}\n"
            description += f"status:{status}\n"
            description += f"#schedule_sync"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
            event_data = {
                'summary': f"üí∞–û–ü–õ–ê–¢–ê: {circle_name} - {child_name}",
                'description': description,
                'start': {
                    'date': payment_date_obj.strftime('%Y-%m-%d'),
                },
                'end': {
                    'date': payment_date_obj.strftime('%Y-%m-%d'),
                },
            }
            
            return event_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return None

    def update_calendar_events_after_attendance_mark_DISABLED(self, lesson_id):
        """Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
        logging.info("Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return True

    def update_calendar_events_after_attendance_mark_DISABLED_OLD(self, lesson_id):
        """
        –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π Google Calendar —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –º–µ–∂–¥—É Google Sheets –∏ Google Calendar.
        """
        try:
            logging.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
            
            if not config.GOOGLE_CALENDAR_ID:
                logging.error("GOOGLE_CALENDAR_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–æ–≤
            calendar_lessons = self.get_calendar_lessons()
            forecast_data = self._get_forecast_data()
            
            if not calendar_lessons:
                logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
            from datetime import datetime, timedelta
            now = datetime.now()
            start_date = now.replace(day=1)  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            end_date = now.replace(month=now.month + 2, day=1) - timedelta(days=1) if now.month <= 10 else now.replace(year=now.year + 1, month=2, day=1) - timedelta(days=1)
            
            existing_events_map = self._get_existing_events_map(start_date, end_date)
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar: {len(existing_events_map)}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            subscriptions_data = self._get_subscriptions_data()
            circle_names_map = self._create_circle_names_map(subscriptions_data)
            forecast_map = self._create_forecast_map(forecast_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID —Å–æ–±—ã—Ç–∏–π
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ ID —Å–æ–±—ã—Ç–∏–π
            calendar_data = calendar_sheet.get_all_values()
            forecast_data_raw = forecast_sheet.get_all_values()
            
            calendar_headers = calendar_data[0]
            forecast_headers = forecast_data_raw[0]
            
            calendar_event_id_col = None
            forecast_event_id_col = None
            
            for i, header in enumerate(calendar_headers):
                if header == 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ':
                    calendar_event_id_col = i
                    break
            
            for i, header in enumerate(forecast_headers):
                if header == 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ':
                    forecast_event_id_col = i
                    break
            
            if calendar_event_id_col is None:
                logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ' –≤ –ª–∏—Å—Ç–µ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'")
                return False
            
            stats = {'lessons_updated': 0, 'lessons_created': 0, 'forecasts_updated': 0, 'forecasts_created': 0, 'deleted': 0, 'ignored': 0}
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            processed_event_ids = set()
            
            # === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–ù–Ø–¢–ò–ô ===
            logging.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π –∏–∑ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'...")
            
            for lesson in calendar_lessons:
                lesson_num = lesson.get('‚Ññ', '')
                lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
                
                if not lesson_date or not lesson_date.strip():
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
                row_index = None
                for i, row in enumerate(calendar_data[1:], start=2):
                    if len(row) > 0 and str(row[0]).strip() == str(lesson_num):
                        row_index = i
                        break
                
                if not row_index:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                event_id = calendar_data[row_index - 1][calendar_event_id_col] if calendar_event_id_col < len(calendar_data[row_index - 1]) else ''
                
                if event_id and event_id in existing_events_map:
                    # –°–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    event = existing_events_map[event_id]
                    event_variables = self._extract_lesson_variables_from_event(event)
                    
                    if event_variables and self._compare_lesson_variables(lesson, event_variables):
                        # –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                        stats['ignored'] += 1
                        processed_event_ids.add(event_id)
                        logging.debug(f"–ó–∞–Ω—è—Ç–∏–µ {lesson_num}: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                    else:
                        # –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º
                        result = self._update_existing_lesson_event(lesson, event_id, event, circle_names_map, forecast_map)
                        if result:
                            stats['lessons_updated'] += 1
                            processed_event_ids.add(event_id)
                            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è {lesson_num} –∏–∑-–∑–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π")
                        
                elif event_id and event_id not in existing_events_map:
                    # ID –µ—Å—Ç—å, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—á–∏—â–∞–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    calendar_sheet.update_cell(row_index, calendar_event_id_col + 1, '')
                    new_event_id = self._create_new_lesson_event(lesson, circle_names_map, forecast_map)
                    if new_event_id:
                        calendar_sheet.update_cell(row_index, calendar_event_id_col + 1, new_event_id)
                        stats['lessons_created'] += 1
                        processed_event_ids.add(new_event_id)
                        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è {lesson_num} (—Å—Ç–∞—Ä–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                        
                else:
                    # ID –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    new_event_id = self._create_new_lesson_event(lesson, circle_names_map, forecast_map)
                    if new_event_id:
                        calendar_sheet.update_cell(row_index, calendar_event_id_col + 1, new_event_id)
                        stats['lessons_created'] += 1
                        processed_event_ids.add(new_event_id)
                        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è {lesson_num}")
            
            # === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–ì–ù–û–ó–û–í ===
            if forecast_event_id_col is not None:
                logging.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ '–ü—Ä–æ–≥–Ω–æ–∑'...")
                
                for forecast in forecast_data:
                    forecast_date = forecast.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '')
                    
                    if not forecast_date or not forecast_date.strip():
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    row_index = None
                    for i, row in enumerate(forecast_data_raw[1:], start=2):
                        if (len(row) >= 3 and 
                            str(row[0]).strip() == forecast.get('–ö—Ä—É–∂–æ–∫', '').strip() and
                            str(row[1]).strip() == forecast.get('–†–µ–±–µ–Ω–æ–∫', '').strip() and
                            str(row[2]).strip() == forecast_date.strip()):
                            row_index = i
                            break
                    
                    if not row_index:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                    event_id = forecast_data_raw[row_index - 1][forecast_event_id_col] if forecast_event_id_col < len(forecast_data_raw[row_index - 1]) else ''
                    
                    if event_id and event_id in existing_events_map:
                        # –°–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                        event = existing_events_map[event_id]
                        event_variables = self._extract_forecast_variables_from_event(event)
                        
                        if event_variables and self._compare_forecast_variables(forecast, event_variables):
                            # –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                            stats['ignored'] += 1
                            processed_event_ids.add(event_id)
                            logging.debug(f"–ü—Ä–æ–≥–Ω–æ–∑ {forecast_date}: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        else:
                            # –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º
                            result = self._update_existing_forecast_event(forecast, event_id, event)
                            if result:
                                stats['forecasts_updated'] += 1
                                processed_event_ids.add(event_id)
                                logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_date} –∏–∑-–∑–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π")
                                
                    elif event_id and event_id not in existing_events_map:
                        # ID –µ—Å—Ç—å, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—á–∏—â–∞–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        forecast_sheet.update_cell(row_index, forecast_event_id_col + 1, '')
                        new_event_id = self._create_new_forecast_event(forecast)
                        if new_event_id:
                            forecast_sheet.update_cell(row_index, forecast_event_id_col + 1, new_event_id)
                            stats['forecasts_created'] += 1
                            processed_event_ids.add(new_event_id)
                            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_date} (—Å—Ç–∞—Ä–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                            
                    else:
                        # ID –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        new_event_id = self._create_new_forecast_event(forecast)
                        if new_event_id:
                            forecast_sheet.update_cell(row_index, forecast_event_id_col + 1, new_event_id)
                            stats['forecasts_created'] += 1
                            processed_event_ids.add(new_event_id)
                            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_date}")
            
            # === –£–î–ê–õ–ï–ù–ò–ï –õ–ò–®–ù–ò–• –°–û–ë–´–¢–ò–ô ===
            logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π...")
            
            for event_id, event in existing_events_map.items():
                if event_id not in processed_event_ids:
                    # –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö - —É–¥–∞–ª—è–µ–º
                    try:
                        self.calendar_service.events().delete(
                            calendarId=config.GOOGLE_CALENDAR_ID,
                            eventId=event_id
                        ).execute()
                        stats['deleted'] += 1
                        logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ª–∏—à–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            
            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            logging.info(f"  –ó–∞–Ω—è—Ç–∏—è: —Å–æ–∑–¥–∞–Ω–æ {stats['lessons_created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {stats['lessons_updated']}")
            logging.info(f"  –ü—Ä–æ–≥–Ω–æ–∑—ã: —Å–æ–∑–¥–∞–Ω–æ {stats['forecasts_created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {stats['forecasts_updated']}")
            logging.info(f"  –£–¥–∞–ª–µ–Ω–æ –ª–∏—à–Ω–∏—Ö: {stats['deleted']}")
            logging.info(f"  –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (—Å–æ–≤–ø–∞–¥–∞—é—Ç): {stats['ignored']}")
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            return False

    def fix_duplicate_lesson_ids(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –∑–∞–Ω—è—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID."""
        try:
            logging.info("üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID –∑–∞–Ω—è—Ç–∏–π...")
            
            cal_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            data = cal_sheet.get_all_values()
            
            if len(data) < 2:
                logging.info("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                return True
            
            headers = data[0]
            rows = data[1:]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏ –Ω–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏
            id_counts = {}
            existing_ids = set()
            
            for row in rows:
                if len(row) > 0 and row[0] and str(row[0]).strip():
                    try:
                        lesson_id = int(row[0])
                        id_counts[lesson_id] = id_counts.get(lesson_id, 0) + 1
                        existing_ids.add(lesson_id)
                    except ValueError:
                        pass
            
            # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏
            duplicates = {id_val: count for id_val, count in id_counts.items() if count > 1}
            
            if not duplicates:
                logging.info("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
            
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏ ID: {duplicates}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            max_id = max(existing_ids) if existing_ids else 0
            next_available_id = max_id + 1
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ –ª–∏—Å—Ç–µ)
            fixed_data = []
            used_ids = set()
            
            for row in rows:
                if len(row) > 0:
                    fixed_row = row.copy()
                    
                    try:
                        current_id = int(row[0]) if row[0] and str(row[0]).strip() else None
                        
                        # –ï—Å–ª–∏ ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–¥—É–±–ª—å) –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                        if current_id is None or current_id in used_ids:
                            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                            while next_available_id in existing_ids or next_available_id in used_ids:
                                next_available_id += 1
                            fixed_row[0] = str(next_available_id)
                            used_ids.add(next_available_id)
                            next_available_id += 1
                            logging.info(f"üîß –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω ID {current_id} ‚Üí {fixed_row[0]}")
                        else:
                            # ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                            used_ids.add(current_id)
                            
                    except ValueError:
                        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
                        while next_available_id in existing_ids or next_available_id in used_ids:
                            next_available_id += 1
                        fixed_row[0] = str(next_available_id)
                        used_ids.add(next_available_id)
                        next_available_id += 1
                        logging.info(f"üîß –ü—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–≤—ã–π ID: {fixed_row[0]}")
                    
                    fixed_data.append(fixed_row)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID, –ù–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
            logging.info("üîí –ó–ê–©–ò–¢–ê ID: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID —Ç–æ—á–µ—á–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ ID –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
            updates_made = 0
            for i, (original_row, fixed_row) in enumerate(zip(rows, fixed_data)):
                if original_row[0] != fixed_row[0]:  # ID –∏–∑–º–µ–Ω–∏–ª—Å—è
                    row_number = i + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1, –∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    try:
                        cal_sheet.update_cell(row_number, 1, fixed_row[0])  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±–µ—Ü A (ID)
                        updates_made += 1
                        logging.info(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω ID –≤ —Å—Ç—Ä–æ–∫–µ {row_number}: {original_row[0]} ‚Üí {fixed_row[0]}")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {row_number}: {e}")
            
            logging.info(f"‚úÖ –¢–æ—á–µ—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updates_made} ID (–≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã)")
            
            logging.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {len(duplicates)} —Ç–∏–ø–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID")
            logging.info(f"üìä –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {len(rows)}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(used_ids)}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID: {e}")
            return False

    def _force_remove_duplicates_by_content(self, existing_events):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–Ω–∞–∑–≤–∞–Ω–∏–µ + –¥–∞—Ç–∞ + –≤—Ä–µ–º—è)."""
        try:
            content_groups = {}
            duplicates_removed = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            for event_key, event in existing_events.items():
                if event_key == '_all_events':
                    continue
                    
                summary = event.get('summary', '')
                start = event.get('start', {})
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if 'dateTime' in start:
                    content_key = f"{summary}|{start['dateTime']}"
                elif 'date' in start:
                    content_key = f"{summary}|{start['date']}"
                else:
                    continue
                
                if content_key not in content_groups:
                    content_groups[content_key] = []
                content_groups[content_key].append((event_key, event))
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ - —Å –æ—Ç–º–µ—Ç–∫–æ–π)
            for content_key, events_list in content_groups.items():
                if len(events_list) > 1:
                    logging.info(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É '{content_key}': {len(events_list)} —Å–æ–±—ã—Ç–∏–π")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) —Å –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–º–µ—Ç–∫–æ–π, 2) –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    best_event = None
                    best_event_key = None
                    best_priority = -1
                    
                    for event_key, event in events_list:
                        description = event.get('description', '')
                        mark = ''
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                        for line in description.split('\n'):
                            if line.startswith('–û—Ç–º–µ—Ç–∫–∞:'):
                                mark = line.split(':', 1)[1].strip()
                                break
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è
                        priority = 0
                        if mark and mark not in ['', 'N/A']:
                            priority = 2  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å –æ—Ç–º–µ—Ç–∫–æ–π
                        else:
                            priority = 1  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –æ—Ç–º–µ—Ç–∫–∏
                        
                        # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        if priority > best_priority:
                            best_event = event
                            best_event_key = event_key
                            best_priority = priority
                        elif priority == best_priority:
                            # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ
                            if best_event:
                                best_updated = best_event.get('updated', '')
                                current_updated = event.get('updated', '')
                                if current_updated > best_updated:
                                    best_event = event
                                    best_event_key = event_key
                            else:
                                best_event = event
                                best_event_key = event_key
                    
                    logging.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {best_event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {best_priority})")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ª—É—á—à–µ–≥–æ
                    for event_key, event in events_list:
                        if event_key == best_event_key:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        try:
                            self.calendar_service.events().delete(
                                calendarId=config.GOOGLE_CALENDAR_ID,
                                eventId=event['id']
                            ).execute()
                            logging.info(f"–£–¥–∞–ª–µ–Ω –¥—É–±–ª—å —Å–æ–±—ã—Ç–∏—è: {event.get('summary', '')}")
                            duplicates_removed += 1
                            
                            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è existing_events
                            if event_key in existing_events:
                                del existing_events[event_key]
                                
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª—è: {e}")
            
            return duplicates_removed
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–µ–π: {e}")
            return 0

    def auto_sync_calendar_after_changes_DISABLED(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Google Sheets."""
        try:
            logging.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            result = self.sync_with_google_calendar()
            
            if result:
                logging.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logging.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
            return result
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return False

    def _get_existing_events_map(self, start_date, end_date):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar —Å —Ç–µ–≥–æ–º #schedule_sync.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {event_id: event_object}.
        """
        try:
            events_map = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Calendar API
            if not self.calendar_service:
                logging.warning("Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {}
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
            events_result = self.calendar_service.service.events().list(
                calendarId=config.GOOGLE_CALENDAR_ID,
                timeMin=start_date.isoformat() + 'Z',
                timeMax=end_date.isoformat() + 'Z',
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            
            for event in events:
                description = event.get('description', '')
                if '#schedule_sync' in description:
                    event_id = event.get('id')
                    if event_id:
                        events_map[event_id] = event
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(events_map)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å —Ç–µ–≥–æ–º #schedule_sync")
            return events_map
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            return {}

    def _sync_calendar_lessons_DISABLED(self, calendar_lessons, circle_names_map, forecast_map, existing_events_map):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞–Ω—è—Ç–∏—è –∏–∑ –ª–∏—Å—Ç–∞ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π' —Å Google Calendar.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü I 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
        """
        stats = {'created': 0, 'updated': 0, 'errors': 0}
        
        try:
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            all_data = calendar_sheet.get_all_values()
            
            if len(all_data) <= 1:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π")
                return stats
            
            headers = all_data[0]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            event_id_col_index = None
            for i, header in enumerate(headers):
                if header == 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ':
                    event_id_col_index = i
                    break
            
            if event_id_col_index is None:
                logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ' –≤ –ª–∏—Å—Ç–µ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'")
                return stats
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–Ω—è—Ç–∏–π
            for row_index, lesson in enumerate(calendar_lessons, start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
                try:
                    lesson_status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '').lower()
                    lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –í–°–ï –∑–∞–Ω—è—Ç–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏)
                    if not lesson_date or not lesson_date.strip():
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ I
                    if row_index - 2 < len(all_data) - 1:
                        event_id = all_data[row_index - 1][event_id_col_index] if event_id_col_index < len(all_data[row_index - 1]) else ''
                    else:
                        event_id = ''
                    
                    if event_id and event_id in existing_events_map:
                        # –°—Ü–µ–Ω–∞—Ä–∏–π –ê: ID –µ—Å—Ç—å –∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º
                        result = self._update_existing_lesson_event(lesson, event_id, existing_events_map[event_id], circle_names_map, forecast_map)
                        if result:
                            stats['updated'] += 1
                            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã - —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                            del existing_events_map[event_id]
                        else:
                            stats['errors'] += 1
                    
                    elif event_id and event_id not in existing_events_map:
                        # ID –µ—Å—Ç—å, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é) - –æ—á–∏—â–∞–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        logging.info(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
                        calendar_sheet.update_cell(row_index, event_id_col_index + 1, '')  # –û—á–∏—â–∞–µ–º ID
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        new_event_id = self._create_new_lesson_event(lesson, circle_names_map, forecast_map)
                        if new_event_id:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π ID –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É
                            calendar_sheet.update_cell(row_index, event_id_col_index + 1, new_event_id)
                            stats['created'] += 1
                        else:
                            stats['errors'] += 1
                    
                    else:
                        # –°—Ü–µ–Ω–∞—Ä–∏–π –ë: ID –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        new_event_id = self._create_new_lesson_event(lesson, circle_names_map, forecast_map)
                        if new_event_id:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π ID –≤ —Ç–∞–±–ª–∏—Ü—É
                            calendar_sheet.update_cell(row_index, event_id_col_index + 1, new_event_id)
                            stats['created'] += 1
                        else:
                            stats['errors'] += 1
                
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–Ω—è—Ç–∏—è –≤ —Å—Ç—Ä–æ–∫–µ {row_index}: {e}")
                    stats['errors'] += 1
            
            logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π: —Å–æ–∑–¥–∞–Ω–æ {stats['created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {stats['updated']}, –æ—à–∏–±–æ–∫ {stats['errors']}")
            return stats
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω—è—Ç–∏–π: {e}")
            return stats

    def _sync_forecast_events(self, forecast_data, existing_events_map):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç –∏–∑ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑' —Å Google Calendar.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü E 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
        """
        stats = {'created': 0, 'updated': 0, 'errors': 0}
        
        try:
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            all_data = forecast_sheet.get_all_values()
            
            if len(all_data) <= 1:
                logging.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ")
                return stats
            
            headers = all_data[0]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ E 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ'
            event_id_col_index = None
            for i, header in enumerate(headers):
                if header == 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ':
                    event_id_col_index = i
                    break
            
            if event_id_col_index is None:
                logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ' –≤ –ª–∏—Å—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑'")
                return stats
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
            for row_index, forecast in enumerate(forecast_data, start=2):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ E
                    if row_index - 2 < len(all_data) - 1:
                        event_id = all_data[row_index - 1][event_id_col_index] if event_id_col_index < len(all_data[row_index - 1]) else ''
                    else:
                        event_id = ''
                    
                    if event_id and event_id in existing_events_map:
                        # ID –µ—Å—Ç—å –∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º
                        result = self._update_existing_forecast_event(forecast, event_id, existing_events_map[event_id])
                        if result:
                            stats['updated'] += 1
                            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã - —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                            del existing_events_map[event_id]
                        else:
                            stats['errors'] += 1
                    
                    elif event_id and event_id not in existing_events_map:
                        # ID –µ—Å—Ç—å, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—á–∏—â–∞–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        logging.info(f"–°–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
                        forecast_sheet.update_cell(row_index, event_id_col_index + 1, '')
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        new_event_id = self._create_new_forecast_event(forecast)
                        if new_event_id:
                            forecast_sheet.update_cell(row_index, event_id_col_index + 1, new_event_id)
                            stats['created'] += 1
                        else:
                            stats['errors'] += 1
                    
                    else:
                        # ID –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        new_event_id = self._create_new_forecast_event(forecast)
                        if new_event_id:
                            forecast_sheet.update_cell(row_index, event_id_col_index + 1, new_event_id)
                            stats['created'] += 1
                        else:
                            stats['errors'] += 1
                
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_index}: {e}")
                    stats['errors'] += 1
            
            logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: —Å–æ–∑–¥–∞–Ω–æ {stats['created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {stats['updated']}, –æ—à–∏–±–æ–∫ {stats['errors']}")
            return stats
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
            return stats

    def _cleanup_unused_events(self, existing_events_map):
        """
        –£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö.
        """
        deleted_count = 0
        
        try:
            for event_id, event in existing_events_map.items():
                try:
                    self.calendar_service.events().delete(
                        calendarId=config.GOOGLE_CALENDAR_ID,
                        eventId=event_id
                    ).execute()
                    
                    deleted_count += 1
                    logging.info(f"–£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            
            return deleted_count
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            return deleted_count

    def _update_existing_lesson_event(self, lesson, event_id, existing_event, circle_names_map, forecast_map):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ Google Calendar."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_lesson_event_data(lesson, circle_names_map, forecast_map)
            if not event_data:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            updated_event = self.calendar_service.events().update(
                calendarId=config.GOOGLE_CALENDAR_ID,
                eventId=event_id,
                body=event_data
            ).execute()
            
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è: {updated_event.get('summary')}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è {event_id}: {e}")
            return False

    def _update_existing_forecast_event(self, forecast, event_id, existing_event):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã –≤ Google Calendar."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã
            event_data = self._prepare_forecast_event_data(forecast)
            if not event_data:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            updated_event = self.calendar_service.events().update(
                calendarId=config.GOOGLE_CALENDAR_ID,
                eventId=event_id,
                body=event_data
            ).execute()
            
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã: {updated_event.get('summary')}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã {event_id}: {e}")
            return False

    def _create_new_lesson_event(self, lesson, circle_names_map, forecast_map):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ Google Calendar –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = self._prepare_lesson_event_data(lesson, circle_names_map, forecast_map)
            if not event_data:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            created_event = self.calendar_service.events().insert(
                calendarId=config.GOOGLE_CALENDAR_ID,
                body=event_data
            ).execute()
            
            event_id = created_event.get('id')
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω—è—Ç–∏—è: {created_event.get('summary')} (ID: {event_id})")
            return event_id
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return None

    def _create_new_forecast_event(self, forecast):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã –≤ Google Calendar –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã
            event_data = self._prepare_forecast_event_data(forecast)
            if not event_data:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
            created_event = self.calendar_service.events().insert(
                calendarId=config.GOOGLE_CALENDAR_ID,
                body=event_data
            ).execute()
            
            event_id = created_event.get('id')
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã: {created_event.get('summary')} (ID: {event_id})")
            return event_id
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã: {e}")
            return None

    def _prepare_lesson_event_data(self, lesson, circle_names_map, forecast_map):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è."""
        try:
            from datetime import datetime
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            lesson_id = lesson.get('‚Ññ', '')
            sub_id = lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            child_name = lesson.get('–†–µ–±–µ–Ω–æ–∫', '')
            lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            lesson_mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '')
            lesson_status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')
            start_time = lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '')
            end_time = lesson.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
            circle_name = circle_names_map.get(sub_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            date_key = lesson_date.replace('.', '')
            if len(date_key) == 8:  # ddmmyyyy
                formatted_date = f"{date_key[0:2]}.{date_key[2:4]}.{date_key[4:8]}"
            else:
                formatted_date = lesson_date
            
            payment_key = f"{child_name}|{circle_name}|{formatted_date}"
            is_payment_day = payment_key in forecast_map
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = self._get_status_emoji(lesson_mark, lesson_status, is_payment_day)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –ü–û–õ–ù–´–ú–ò –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if is_payment_day:
                title = f"{status_emoji}–û–ü–õ–ê–¢–ê: {circle_name} - {child_name}"
                description = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {forecast_map[payment_key]} —Ä—É–±.\n\n"
            else:
                title = f"{status_emoji}{circle_name} - {child_name}".strip()
                description = ""
                if lesson_mark:
                    description = f"–û—Ç–º–µ—Ç–∫–∞: {lesson_mark}\n\n"
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
            description += f"lesson_id:{lesson_id}\n"
            description += f"date:{lesson_date}\n"
            description += f"start_time:{start_time}\n"
            description += f"end_time:{end_time}\n"
            description += f"status:{lesson_status}\n"
            description += f"mark:{lesson_mark}\n"
            description += f"#schedule_sync"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            lesson_date_obj = datetime.strptime(lesson_date, '%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if start_time and start_time.strip():
                try:
                    start_hour, start_minute = map(int, start_time.split(':'))
                    start_datetime = lesson_date_obj.replace(hour=start_hour, minute=start_minute)
                except:
                    start_datetime = lesson_date_obj.replace(hour=9, minute=0)
            else:
                start_datetime = lesson_date_obj.replace(hour=9, minute=0)
            
            if end_time and end_time.strip():
                try:
                    end_hour, end_minute = map(int, end_time.split(':'))
                    end_datetime = lesson_date_obj.replace(hour=end_hour, minute=end_minute)
                except:
                    end_datetime = start_datetime.replace(hour=start_datetime.hour + 1)
            else:
                end_datetime = start_datetime.replace(hour=start_datetime.hour + 1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = {
                'summary': title,
                'description': description,
                'start': {
                    'dateTime': start_datetime.isoformat(),
                    'timeZone': 'Asia/Almaty',
                },
                'end': {
                    'dateTime': end_datetime.isoformat(),
                    'timeZone': 'Asia/Almaty',
                },
            }
            
            return event_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return None

    def _prepare_forecast_event_data(self, forecast):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã (–Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å)."""
        try:
            from datetime import datetime
            
            child_name = forecast.get('–†–µ–±–µ–Ω–æ–∫', '')
            circle_name = forecast.get('–ö—Ä—É–∂–æ–∫', '')
            payment_date = forecast.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '')
            budget = str(forecast.get('–ë—é–¥–∂–µ—Ç', ''))
            status = forecast.get('–°—Ç–∞—Ç—É—Å', '–æ–∂–∏–¥–∞–µ—Ç—Å—è')
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
            payment_date_obj = datetime.strptime(payment_date, '%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ü–û–õ–ù–´–ú–ò –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            description = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {budget} —Ä—É–±.\n\n"
            description += f"circle_name:{circle_name}\n"
            description += f"child_name:{child_name}\n"
            description += f"date:{payment_date}\n"
            description += f"budget:{budget}\n"
            description += f"status:{status}\n"
            description += f"#schedule_sync"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
            event_data = {
                'summary': f"üí∞–û–ü–õ–ê–¢–ê: {circle_name} - {child_name}",
                'description': description,
                'start': {
                    'date': payment_date_obj.strftime('%Y-%m-%d'),
                },
                'end': {
                    'date': payment_date_obj.strftime('%Y-%m-%d'),
                },
            }
            
            return event_data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã: {e}")
            return None

    def update_single_lesson_in_calendar_DISABLED(self, lesson_id):
        """Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
        logging.info("Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return True

    def update_single_lesson_in_calendar_DISABLED_OLD(self, lesson_id):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ lesson_id.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å ID —Å–æ–±—ã—Ç–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ I.
        """
        try:
            logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è ID {lesson_id} (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)...")
            
            if not config.GOOGLE_CALENDAR_ID:
                logging.error("GOOGLE_CALENDAR_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
            lesson_data = self.get_lesson_info_by_id(lesson_id)
            if not lesson_data:
                logging.error(f"–ó–∞–Ω—è—Ç–∏–µ —Å ID {lesson_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ I "ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ"
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            all_data = calendar_sheet.get_all_values()
            
            if len(all_data) <= 1:
                logging.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π")
                return False
            
            headers = all_data[0]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ I "ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ"
            event_id_col_index = None
            for i, header in enumerate(headers):
                if header == 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ':
                    event_id_col_index = i
                    break
            
            if event_id_col_index is None:
                logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'ID –°–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ' –≤ –ª–∏—Å—Ç–µ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'")
                return False
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º lesson_id
            lesson_row_index = None
            event_id = None
            
            for row_index, row in enumerate(all_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(row) > 0 and str(row[0]).strip() == str(lesson_id).strip():  # –°—Ç–æ–ª–±–µ—Ü A - ‚Ññ (ID –∑–∞–Ω—è—Ç–∏—è)
                    lesson_row_index = row_index
                    if event_id_col_index < len(row):
                        event_id = row[event_id_col_index].strip()
                    break
            
            if lesson_row_index is None:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è ID {lesson_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
            subscriptions_data = self._get_subscriptions_data()
            forecast_data = self._get_forecast_data()
            circle_names_map = self._create_circle_names_map(subscriptions_data)
            forecast_map = self._create_forecast_map(forecast_data)
            
            if event_id:
                # ID —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google Calendar
                    existing_event = self.calendar_service.events().get(
                        calendarId=config.GOOGLE_CALENDAR_ID,
                        eventId=event_id
                    ).execute()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                    result = self._update_existing_lesson_event(lesson_data, event_id, existing_event, circle_names_map, forecast_map)
                    if result:
                        logging.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
                        return False
                        
                except Exception as e:
                    if 'not found' in str(e).lower():
                        # –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—á–∏—â–∞–µ–º ID –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        logging.info(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
                        calendar_sheet.update_cell(lesson_row_index, event_id_col_index + 1, '')
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        new_event_id = self._create_new_lesson_event(lesson_data, circle_names_map, forecast_map)
                        if new_event_id:
                            calendar_sheet.update_cell(lesson_row_index, event_id_col_index + 1, new_event_id)
                            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} (ID: {new_event_id})")
                            return True
                        else:
                            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
                            return False
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
                        return False
            else:
                # ID —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                new_event_id = self._create_new_lesson_event(lesson_data, circle_names_map, forecast_map)
                if new_event_id:
                    calendar_sheet.update_cell(lesson_row_index, event_id_col_index + 1, new_event_id)
                    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} (ID: {new_event_id})")
                    return True
                else:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
                    return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}: {e}")
            return False

    def _prepare_single_lesson_event_data(self, lesson_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏—è."""
        try:
            from datetime import datetime
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            lesson_id = lesson_data.get('‚Ññ', '')
            sub_id = lesson_data.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            child_name = lesson_data.get('–†–µ–±–µ–Ω–æ–∫', '')
            lesson_date = lesson_data.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            lesson_mark = lesson_data.get('–û—Ç–º–µ—Ç–∫–∞', '')
            lesson_status = lesson_data.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')
            start_time = lesson_data.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '')
            end_time = lesson_data.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞ –∏–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            sub_details = self.get_subscription_details(sub_id)
            circle_name = sub_details.get('circle_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫') if sub_details else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—Ä—É–∂–æ–∫'
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = self._get_status_emoji(lesson_mark, lesson_status, False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è
            title = f"{status_emoji}{circle_name} - {child_name}".strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å lesson_id
            description = f"lesson_id:{lesson_id}\n#schedule_sync"
            if lesson_mark:
                description = f"–û—Ç–º–µ—Ç–∫–∞: {lesson_mark}\n\n{description}"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
            try:
                lesson_date_obj = datetime.strptime(lesson_date, '%d.%m.%Y')
            except ValueError:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {lesson_date}")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if start_time and start_time.strip():
                try:
                    start_hour, start_minute = map(int, start_time.split(':'))
                    start_datetime = lesson_date_obj.replace(hour=start_hour, minute=start_minute)
                except:
                    start_datetime = lesson_date_obj.replace(hour=9, minute=0)
            else:
                start_datetime = lesson_date_obj.replace(hour=9, minute=0)
            
            if end_time and end_time.strip():
                try:
                    end_hour, end_minute = map(int, end_time.split(':'))
                    end_datetime = lesson_date_obj.replace(hour=end_hour, minute=end_minute)
                except:
                    end_datetime = start_datetime.replace(hour=start_datetime.hour + 1)
            else:
                end_datetime = start_datetime.replace(hour=start_datetime.hour + 1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = {
                'summary': title,
                'description': description,
                'start': {
                    'dateTime': start_datetime.isoformat(),
                    'timeZone': 'Asia/Almaty',
                },
                'end': {
                    'dateTime': end_datetime.isoformat(),
                    'timeZone': 'Asia/Almaty',
                },
            }
            
            logging.info(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {title}")
            return event_data
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è: {e}")
            return None

    def get_subscription_full_stats(self, sub_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤."""
        try:
            stats = {
                'subscription': {},
                'schedule_template': [],
                'calendar_lessons': [],
                'forecast_payments': []
            }
            
            # 1. –î–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            subs_data = subs_sheet.get_all_records()
            for sub in subs_data:
                if str(sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')).strip() == str(sub_id).strip():
                    stats['subscription'] = sub
                    break
            
            # 2. –®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            template_sheet = self.spreadsheet.worksheet("–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            template_data = template_sheet.get_all_records()
            for template in template_data:
                if str(template.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')).strip() == str(sub_id).strip():
                    stats['schedule_template'].append(template)
            
            # 3. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π
            calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            calendar_data = calendar_sheet.get_all_records()
            for lesson in calendar_data:
                if str(lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')).strip() == str(sub_id).strip():
                    stats['calendar_lessons'].append(lesson)
            
            # 4. –ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç
            if stats['subscription']:
                child_name = stats['subscription'].get('–†–µ–±–µ–Ω–æ–∫', '')
                circle_name = stats['subscription'].get('–ö—Ä—É–∂–æ–∫', '')
                
                forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
                forecast_data = forecast_sheet.get_all_records()
                for forecast in forecast_data:
                    if (str(forecast.get('–†–µ–±–µ–Ω–æ–∫', '')).strip() == str(child_name).strip() and
                        str(forecast.get('–ö—Ä—É–∂–æ–∫', '')).strip() == str(circle_name).strip()):
                        stats['forecast_payments'].append(forecast)
            
            return stats
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}: {e}")
            return None

    def get_notification_time(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —è—á–µ–π–∫–∏ N2 –ª–∏—Å—Ç–∞ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫."""
        try:
            handbook_sheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            notification_time = handbook_sheet.acell('N2').value
            
            if notification_time and notification_time.strip():
                return notification_time.strip()
            else:
                return None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None
    
    def set_notification_time(self, time_str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —è—á–µ–π–∫—É N2 –ª–∏—Å—Ç–∞ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫."""
        try:
            handbook_sheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            handbook_sheet.update('N2', [[time_str]])
            logging.info(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def set_notification_chat_id(self, chat_id):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —è—á–µ–π–∫—É O2 –ª–∏—Å—Ç–∞ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫."""
        try:
            handbook_sheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            handbook_sheet.update('O2', [[str(chat_id)]])
            logging.info(f"Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ chat_id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def get_notification_chat_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —è—á–µ–π–∫–∏ O2 –ª–∏—Å—Ç–∞ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫."""
        try:
            handbook_sheet = self.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            chat_id = handbook_sheet.acell('O2').value
            
            if chat_id and chat_id.strip():
                return chat_id.strip()
            else:
                return None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None

    def get_weekly_summary(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."""
        try:
            from datetime import datetime, timedelta
            import time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
            time.sleep(2)
            
            logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            # –í–ê–ñ–ù–û: –û–±–Ω—É–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            monday = today - timedelta(days=today.weekday())
            sunday = monday + timedelta(days=6)
            
            logging.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –Ω–µ–¥–µ–ª–∏: {monday.strftime('%d.%m.%Y')} - {sunday.strftime('%d.%m.%Y')}")
            
            summary = {
                'week_start': monday.strftime('%d.%m.%Y'),
                'week_end': sunday.strftime('%d.%m.%Y'),
                'lessons_this_week': [],
                'payments_this_week': [],
                'attendance_stats': {},
                'total_budget': 0
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ)
            try:
                calendar_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets (–æ—á–∏—â–∞–µ–º –∫—ç—à)
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    raw_data = calendar_sheet.get_all_values()
                    # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    calendar_data = calendar_sheet.get_all_records()
                    logging.info(f"üìã –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(calendar_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ö–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π")
                except Exception as e:
                    if "429" in str(e) or "Quota exceeded" in str(e):
                        logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –í–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É.")
                        return None
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
                    # Fallback - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    calendar_data = calendar_sheet.get_all_records()
                    logging.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(calendar_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ö–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π (fallback)")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–∂–∫–æ–≤
                subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
                subs_data = subs_sheet.get_all_records()
            except Exception as e:
                if "429" in str(e) or "Quota exceeded" in str(e):
                    logging.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É.")
                    return None
                else:
                    raise e
            subs_dict = {str(sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')): sub for sub in subs_data}
            logging.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(subs_data)} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
            
            for lesson in calendar_data:
                lesson_date_str = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
                lesson_mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '').strip()  # –°—Ç–æ–ª–±–µ—Ü G - –æ—Ç–º–µ—Ç–∫–∞
                lesson_status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '').strip()  # –°—Ç–æ–ª–±–µ—Ü E - —Å—Ç–∞—Ç—É—Å
                
                if lesson_date_str:
                    try:
                        lesson_date = datetime.strptime(lesson_date_str, '%d.%m.%Y')
                        if monday <= lesson_date <= sunday:
                            sub_id = str(lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', ''))
                            sub_info = subs_dict.get(sub_id, {})
                            
                            lesson_info = {
                                'date': lesson_date_str,
                                'child': sub_info.get('–†–µ–±–µ–Ω–æ–∫', lesson.get('–†–µ–±–µ–Ω–æ–∫', '')),
                                'circle': sub_info.get('–ö—Ä—É–∂–æ–∫', 'N/A'),
                                'time': f"{lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '')}-{lesson.get('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è', '')}",
                                'mark': lesson_mark,  # –°—Ç–æ–ª–±–µ—Ü G
                                'status': lesson_status,  # –°—Ç–æ–ª–±–µ—Ü E
                                'sub_id': sub_id
                            }
                            
                            summary['lessons_this_week'].append(lesson_info)
                            logging.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {lesson_date_str} - {lesson_info['child']} ({lesson_info['circle']}) - –°—Ç–∞—Ç—É—Å E: '{lesson_status}', –û—Ç–º–µ—Ç–∫–∞ G: '{lesson_mark}'")
                    except ValueError:
                        continue
            
            logging.info(f"üìä –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é: {len(summary['lessons_this_week'])}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            forecast_data = forecast_sheet.get_all_records()
            
            for payment in forecast_data:
                payment_date_str = payment.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '')
                if payment_date_str:
                    try:
                        payment_date = datetime.strptime(payment_date_str, '%d.%m.%Y')
                        if monday <= payment_date <= sunday:
                            budget = float(payment.get('–ë—é–¥–∂–µ—Ç', 0) or 0)
                            summary['payments_this_week'].append({
                                'date': payment_date_str,
                                'child': payment.get('–†–µ–±–µ–Ω–æ–∫', ''),
                                'circle': payment.get('–ö—Ä—É–∂–æ–∫', ''),
                                'amount': budget
                            })
                            summary['total_budget'] += budget
                    except (ValueError, TypeError):
                        continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
            total_lessons = len(summary['lessons_this_week'])
            
            # ‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: —Å—Ç–æ–ª–±–µ—Ü G —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "–ü–æ—Å–µ—â–µ–Ω–∏–µ"
            attended = sum(1 for l in summary['lessons_this_week'] 
                          if l['mark'].lower() == '–ø–æ—Å–µ—â–µ–Ω–∏–µ')
            
            # ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—Ç–æ–ª–±–µ—Ü G —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ "–ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)", "–û—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)", "–ü–µ—Ä–µ–Ω–æ—Å"
            missed_marks = ['–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)', '–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)', '–ø–µ—Ä–µ–Ω–æ—Å']
            missed = sum(1 for l in summary['lessons_this_week'] 
                        if l['mark'].lower() in missed_marks)
            
            # üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ç–æ–ª–±–µ—Ü E —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            planned = sum(1 for l in summary['lessons_this_week'] 
                         if l['status'].lower() == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')
            
            # üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: –ü–æ—Å–µ—â–µ–Ω–æ / (–ü–æ—Å–µ—â–µ–Ω–æ + –ü—Ä–æ–ø—É—â–µ–Ω–æ) * 100%
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö (–ø–æ—Å–µ—â–µ–Ω–æ + –ø—Ä–æ–ø—É—â–µ–Ω–æ)
            total_actual = attended + missed  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            attendance_rate = round((attended / max(total_actual, 1)) * 100, 1) if total_actual > 0 else 0
            
            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞):")
            logging.info(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_lessons}")
            logging.info(f"  ‚Ä¢ ‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ (G='–ü–æ—Å–µ—â–µ–Ω–∏–µ'): {attended}")
            logging.info(f"  ‚Ä¢ ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (G='–ü—Ä–æ–ø—É—Å–∫/–û—Ç–º–µ–Ω–∞/–ü–µ—Ä–µ–Ω–æ—Å'): {missed}")
            logging.info(f"  ‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (E='–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'): {planned}")
            logging.info(f"  ‚Ä¢ üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {attended}/{total_actual} = {attendance_rate}% (–ü–æ—Å–µ—â–µ–Ω–æ/–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ)")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for l in summary['lessons_this_week']:
                logging.info(f"  üìÖ {l['date']} - {l['child']}: E='{l['status']}', G='{l['mark']}'")
            
            summary['attendance_stats'] = {
                'total': total_lessons,
                'attended': attended,
                'missed': missed,
                'planned': planned,
                'attendance_rate': attendance_rate
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö
            summary['active_subscriptions'] = self.get_active_subscriptions_info()
            
            logging.info(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞")
            
            return summary
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return None

    def get_active_subscriptions_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö —Å –¥–∞—Ç–∞–º–∏ –æ–ø–ª–∞—Ç."""
        try:
            logging.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            subs_data = subs_sheet.get_all_records()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –¥–∞—Ç –æ–ø–ª–∞—Ç
            forecast_sheet = self.spreadsheet.worksheet("–ü—Ä–æ–≥–Ω–æ–∑")
            forecast_data = forecast_sheet.get_all_records()
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Ä–µ–±–µ–Ω–∫—É –∏ –∫—Ä—É–∂–∫—É
            forecast_dict = {}
            for forecast in forecast_data:
                child = str(forecast.get('–†–µ–±–µ–Ω–æ–∫', '')).strip()
                circle = str(forecast.get('–ö—Ä—É–∂–æ–∫', '')).strip()
                payment_date = str(forecast.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '')).strip()
                
                if child and circle and payment_date:
                    key = f"{child}_{circle}"
                    if key not in forecast_dict:
                        forecast_dict[key] = []
                    forecast_dict[key].append(payment_date)
            
            active_subs = []
            
            for sub in subs_data:
                status = str(sub.get('–°—Ç–∞—Ç—É—Å', '')).strip()
                remaining_lessons = sub.get('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π', 0)
                
                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ê–∫—Ç–∏–≤–µ–Ω" –∏–ª–∏ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∑–∞–Ω—è—Ç–∏—è–º–∏ > 0
                if status.lower() == '–∞–∫—Ç–∏–≤–µ–Ω' or (remaining_lessons and int(remaining_lessons) > 0):
                    child = str(sub.get('–†–µ–±–µ–Ω–æ–∫', '')).strip()
                    circle = str(sub.get('–ö—Ä—É–∂–æ–∫', '')).strip()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    completed_lessons = sub.get('–ü—Ä–æ—à–ª–æ –∑–∞–Ω—è—Ç–∏–π', 0)  # –°—Ç–æ–ª–±–µ—Ü H
                    remaining = sub.get('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π', 0)  # –°—Ç–æ–ª–±–µ—Ü I
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: –ø—Ä–æ—à–ª–æ + –æ—Å—Ç–∞–ª–æ—Å—å
                    completed = int(completed_lessons) if completed_lessons else 0
                    remaining_int = int(remaining) if remaining else 0
                    total_lessons = completed + remaining_int
                    
                    # –ò—â–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
                    key = f"{child}_{circle}"
                    payment_dates = forecast_dict.get(key, [])
                    next_payment = payment_dates[0] if payment_dates else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    
                    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à—É—é
                    if len(payment_dates) > 1:
                        try:
                            from datetime import datetime
                            today = datetime.now()
                            future_dates = []
                            
                            for date_str in payment_dates:
                                try:
                                    date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                                    if date_obj >= today:
                                        future_dates.append((date_obj, date_str))
                                except:
                                    continue
                            
                            if future_dates:
                                future_dates.sort(key=lambda x: x[0])
                                next_payment = future_dates[0][1]
                        except:
                            pass
                    
                    sub_info = {
                        'child': child,
                        'circle': circle,
                        'total_lessons': total_lessons,
                        'remaining_lessons': remaining_int,
                        'completed_lessons': completed,
                        'next_payment_date': next_payment,
                        'status': status
                    }
                    
                    active_subs.append(sub_info)
                    logging.info(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {child} - {circle} ({remaining} –∑–∞–Ω—è—Ç–∏–π –æ—Å—Ç–∞–ª–æ—Å—å, –æ–ø–ª–∞—Ç–∞: {next_payment})")
            
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(active_subs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
            return active_subs
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö: {e}")
            return []

    def clean_duplicate_events(self):
        """–ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar."""
        try:
            logging.info("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Calendar API
            if not hasattr(self, 'calendar_service') or not self.calendar_service:
                logging.warning("‚ö†Ô∏è Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π")
                return "‚ö†Ô∏è Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            from datetime import datetime, timedelta
            now = datetime.now()
            start_date = now - timedelta(days=180)  # 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥
            end_date = now + timedelta(days=180)    # 6 –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥
            
            existing_events_map = self._get_existing_events_map(start_date, end_date)
            if not existing_events_map:
                logging.info("‚ÑπÔ∏è –°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return "‚ÑπÔ∏è –°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π
            duplicates_removed = self._remove_duplicate_events(list(existing_events_map.values()))
            
            if duplicates_removed > 0:
                result_message = f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {duplicates_removed}"
                logging.info(result_message)
                return result_message
            else:
                result_message = "‚ÑπÔ∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–∏—Å—Ç"
                logging.info(result_message)
                return result_message
                
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {str(e)}"
            logging.error(error_message)
            return error_message

    def validate_subscription_data_consistency(self, subscription_id=None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏.
        –ï—Å–ª–∏ subscription_id —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
        –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã.
        """
        try:
            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {'–≤—Å–µ—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤' if not subscription_id else f'–∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}'}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            cal_sheet = self.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            cal_data = cal_sheet.get_all_values()
            
            if len(cal_data) <= 1:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞–Ω—è—Ç–∏–π"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            calendar_stats = {}
            for i, row in enumerate(cal_data[1:], 2):
                if len(row) > 6:
                    sub_id = row[1] if len(row) > 1 else ''
                    status = row[4] if len(row) > 4 else ''
                    
                    if sub_id and (not subscription_id or sub_id == subscription_id):
                        if sub_id not in calendar_stats:
                            calendar_stats[sub_id] = {'zaversheno': 0, 'zaplanirovanno': 0, 'propusk': 0}
                        
                        status_lower = status.lower()
                        if status_lower == '–∑–∞–≤–µ—Ä—à–µ–Ω':
                            calendar_stats[sub_id]['zaversheno'] += 1
                        elif status_lower == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
                            calendar_stats[sub_id]['zaplanirovanno'] += 1
                        elif status_lower == '–ø—Ä–æ–ø—É—Å–∫':
                            calendar_stats[sub_id]['propusk'] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            subs_sheet = self.spreadsheet.worksheet("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
            subs_data = subs_sheet.get_all_values()
            
            if len(subs_data) <= 1:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            fixed_count = 0
            checked_count = 0
            
            for sub_id in calendar_stats:
                cal_stats = calendar_stats[sub_id]
                
                # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                expected_h = cal_stats['zaversheno']
                expected_i = cal_stats['zaplanirovanno']
                expected_m = cal_stats['propusk']
                
                # –ò—â–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –ª–∏—Å—Ç–µ
                for i, row in enumerate(subs_data[1:], 2):
                    if len(row) > 1 and row[1] == sub_id:
                        current_h = row[7] if len(row) > 7 else ''
                        current_i = row[8] if len(row) > 8 else ''
                        current_m = row[12] if len(row) > 12 else ''
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å
                        h_match = str(current_h) == str(expected_h)
                        i_match = str(current_i) == str(expected_i)
                        m_match = str(current_m) == str(expected_m)
                        
                        checked_count += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (—Å—Ç–æ–ª–±–µ—Ü J)
                        current_status = row[9] if len(row) > 9 else ''  # J - –°—Ç–∞—Ç—É—Å
                        expected_status = '–ó–∞–≤–µ—Ä—à–µ–Ω' if expected_i == 0 else '–ê–∫—Ç–∏–≤–µ–Ω'
                        status_match = str(current_status).strip().lower() == expected_status.lower()
                        
                        if not (h_match and i_match and m_match and status_match):
                            logging.info(f"üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {sub_id}:")
                            logging.info(f"   H={current_h}‚Üí{expected_h}, I={current_i}‚Üí{expected_i}, M={current_m}‚Üí{expected_m}, J={current_status}‚Üí{expected_status}")
                            
                            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            if not h_match and len(row) > 7:
                                subs_sheet.update_cell(i, 8, expected_h)  # H - —Å—Ç–æ–ª–±–µ—Ü 8
                            if not i_match and len(row) > 8:
                                subs_sheet.update_cell(i, 9, expected_i)  # I - —Å—Ç–æ–ª–±–µ—Ü 9
                            if not m_match and len(row) > 12:
                                subs_sheet.update_cell(i, 13, expected_m)  # M - —Å—Ç–æ–ª–±–µ—Ü 13
                            if not status_match and len(row) > 9:
                                subs_sheet.update_cell(i, 10, expected_status)  # J - —Å—Ç–æ–ª–±–µ—Ü 10
                            
                            fixed_count += 1
                        break
            
            if fixed_count > 0:
                logging.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∏–∑ {checked_count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
                return f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"
            else:
                logging.info(f"‚úÖ –í—Å–µ {checked_count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ({checked_count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤)"
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
def initialize_sheets_service_with_retry():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ 429"""
    import time
    max_retries = 5
    base_delay = 60  # 60 —Å–µ–∫—É–Ω–¥ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    for attempt in range(max_retries):
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets...")
            service = GoogleSheetsService(config.GOOGLE_CREDENTIALS_PATH, config.GOOGLE_SHEET_NAME)
            logging.info("‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return service
            
        except Exception as e:
            if "429" in str(e) or "Quota exceeded" in str(e):
                if attempt < max_retries - 1:
                    delay = base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay)
                    continue
                else:
                    logging.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets")
                    return None
            else:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
                return None
    
    return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
sheets_service = initialize_sheets_service_with_retry()

if sheets_service is None:
    logging.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GoogleSheetsService –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
else:
    logging.info("‚úÖ GoogleSheetsService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

