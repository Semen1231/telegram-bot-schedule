import logging
import asyncio
from telegram.ext import Application
from telegram import BotCommand
import config
from bot_handlers import create_conversation_handler
from google_sheets_service import sheets_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def clear_webhook_and_setup(application):
    """–û—á–∏—â–∞–µ—Ç webhook –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞."""
    try:
        # –û—á–∏—â–∞–µ–º webhook
        logger.info("üîß –û—á–∏—â–∞—é webhook...")
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(2)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        
        await application.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")

async def post_init_handler(application):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º webhook –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await clear_webhook_and_setup(application)
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    try:
        if sheets_service:
            from notification_scheduler import get_notification_scheduler
            notification_scheduler = get_notification_scheduler(application.bot)
            
            notification_time = sheets_service.get_notification_time()
            notification_chat_id = sheets_service.get_notification_chat_id()
            
            if notification_time and notification_chat_id:
                logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
                notification_scheduler.set_chat_id(notification_chat_id)
                await asyncio.create_task(notification_scheduler.start_scheduler())
            else:
                logger.info("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            logger.info("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω - Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    # 0. –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê WEBHOOK –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
    logger.info("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
    try:
        import requests
        import config
        url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/deleteWebhook?drop_pending_updates=true"
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: {url}")
        response = requests.post(url)
        logger.info(f"‚úÖ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: {response.json()}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ webhook: {e}")
    
    logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å Google Sheets —Ä–∞–±–æ—Ç–∞–µ—Ç
    if not sheets_service:
        logging.warning("‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –Ω–µ–≥–æ")
        # –í–†–ï–ú–ï–ù–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º Google Sheets –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
        pass

    # 2. –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    logger.info("–°–æ–∑–¥–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞...")
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    conv_handler = create_conversation_handler()
    application.add_handler(conv_handler)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    
    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    application.post_init = post_init_handler
    
    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫–∞—é polling...")
    try:
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    main()

