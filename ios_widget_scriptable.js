/**
 * üì± iOS SCRIPTABLE WIDGET - –ü–†–û–ì–†–ï–°–° –ü–û –ê–ö–¢–ò–í–ù–´–ú –ê–ë–û–ù–ï–ú–ï–ù–¢–ê–ú
 * 
 * –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ iOS
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –≤–∞—à–µ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:
 * 1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Scriptable –∏–∑ App Store
 * 2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
 * 3. –ò–∑–º–µ–Ω–∏—Ç–µ API_BASE_URL –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
 * 4. –î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–∂–µ—Ç Scriptable –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
 * 5. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∏–¥–∂–µ—Ç–∞
 */

// ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
const API_BASE_URL = "https://disabled-temporarily.local"; // –û–¢–ö–õ–Æ–ß–ï–ù–û: –í–∞—à Railway URL
const REFRESH_INTERVAL = 15; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö

// ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========
async function createWidget() {
    const widget = new ListWidget();
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const data = await fetchDashboardData();
        
        if (data && data.subscriptions && data.subscriptions.length > 0) {
            await setupSuccessWidget(widget, data);
        } else {
            setupEmptyWidget(widget);
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
        setupErrorWidget(widget, error.message);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
    widget.refreshAfterDate = new Date(Date.now() + REFRESH_INTERVAL * 60 * 1000);
    widget.backgroundColor = new Color("#151634"); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –∫–∞–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ
    
    return widget;
}

// ========== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ==========
async function fetchDashboardData() {
    console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...");
    console.log("API Base URL:", API_BASE_URL);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
    const subscriptionsUrl = `${API_BASE_URL}/api/subscriptions?student=–í—Å–µ`;
    console.log("Subscriptions URL:", subscriptionsUrl);
    
    const subscriptionsRequest = new Request(subscriptionsUrl);
    subscriptionsRequest.timeoutInterval = 10;
    
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...");
    const subscriptionsResponse = await subscriptionsRequest.loadJSON();
    console.log("–û—Ç–≤–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:", subscriptionsResponse);
    
    if (!subscriptionsResponse.success) {
        throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const metricsUrl = `${API_BASE_URL}/api/metrics?student=–í—Å–µ`;
    console.log("Metrics URL:", metricsUrl);
    
    const metricsRequest = new Request(metricsUrl);
    metricsRequest.timeoutInterval = 10;
    
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...");
    const metricsResponse = await metricsRequest.loadJSON();
    console.log("–û—Ç–≤–µ—Ç –º–µ—Ç—Ä–∏–∫:", metricsResponse);
    
    return {
        subscriptions: subscriptionsResponse.subscriptions || [],
        metrics: metricsResponse || {}
    };
}

// ========== –£–°–ü–ï–®–ù–´–ô –í–ò–î–ñ–ï–¢ ==========
async function setupSuccessWidget(widget, data) {
    const subscriptions = data.subscriptions;
    const metrics = data.metrics;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const titleStack = widget.addStack();
    titleStack.layoutHorizontally();
    
    const titleText = titleStack.addText("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã");
    titleText.font = Font.boldSystemFont(14);
    titleText.textColor = Color.white();
    
    const spacer = titleStack.addSpacer();
    
    // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const timeText = titleStack.addText(formatTime(new Date()));
    timeText.font = Font.systemFont(10);
    timeText.textColor = new Color("#94A3B8");
    
    widget.addSpacer(8);
    
    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (metrics.planned !== undefined) {
        const metricsStack = widget.addStack();
        metricsStack.layoutHorizontally();
        metricsStack.spacing = 12;
        
        // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
        const plannedStack = metricsStack.addStack();
        plannedStack.layoutVertically();
        const plannedLabel = plannedStack.addText("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ");
        plannedLabel.font = Font.systemFont(9);
        plannedLabel.textColor = new Color("#94A3B8");
        const plannedValue = plannedStack.addText(`${metrics.planned || 0}`);
        plannedValue.font = Font.boldSystemFont(12);
        plannedValue.textColor = Color.white();
        
        // –ü–æ—Å–µ—â–µ–Ω–æ
        const attendedStack = metricsStack.addStack();
        attendedStack.layoutVertically();
        const attendedLabel = attendedStack.addText("–ü–æ—Å–µ—â–µ–Ω–æ");
        attendedLabel.font = Font.systemFont(9);
        attendedLabel.textColor = new Color("#94A3B8");
        const attendedValue = attendedStack.addText(`${metrics.attended || 0}`);
        attendedValue.font = Font.boldSystemFont(12);
        attendedValue.textColor = new Color("#00C1FF");
        
        // –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        const rateStack = metricsStack.addStack();
        rateStack.layoutVertically();
        const rateLabel = rateStack.addText("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å");
        rateLabel.font = Font.systemFont(9);
        rateLabel.textColor = new Color("#94A3B8");
        const rateValue = rateStack.addText(`${Math.round(metrics.attendance_rate || 0)}%`);
        rateValue.font = Font.boldSystemFont(12);
        rateValue.textColor = new Color("#FDDD00");
        
        widget.addSpacer(10);
    }
    
    // –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3-4 —à—Ç—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞)
    const maxSubscriptions = config.widgetFamily === "large" ? 4 : 3;
    const displaySubscriptions = subscriptions.slice(0, maxSubscriptions);
    
    for (let i = 0; i < displaySubscriptions.length; i++) {
        const sub = displaySubscriptions[i];
        await addSubscriptionRow(widget, sub);
        
        if (i < displaySubscriptions.length - 1) {
            widget.addSpacer(6);
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
    if (subscriptions.length > maxSubscriptions) {
        widget.addSpacer(4);
        const moreText = widget.addText(`+${subscriptions.length - maxSubscriptions} –µ—â–µ...`);
        moreText.font = Font.systemFont(10);
        moreText.textColor = new Color("#94A3B8");
        moreText.centerAlignText();
    }
}

// ========== –°–¢–†–û–ö–ê –ê–ë–û–ù–ï–ú–ï–ù–¢–ê ==========
async function addSubscriptionRow(widget, subscription) {
    const subStack = widget.addStack();
    subStack.layoutVertically();
    subStack.backgroundColor = new Color("#2A344A", 0.5);
    subStack.cornerRadius = 8;
    subStack.setPadding(8, 10, 8, 10);
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    const nameStack = subStack.addStack();
    nameStack.layoutHorizontally();
    
    const nameText = nameStack.addText(subscription.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç");
    nameText.font = Font.boldSystemFont(11);
    nameText.textColor = Color.white();
    nameText.lineLimit = 1;
    
    const nameSpacer = nameStack.addSpacer();
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    const progressPercent = Math.round(subscription.progress_percent || 0);
    const percentText = nameStack.addText(`${progressPercent}%`);
    percentText.font = Font.boldSystemFont(11);
    percentText.textColor = new Color("#FDDD00");
    
    subStack.addSpacer(4);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    const progressStack = subStack.addStack();
    progressStack.layoutHorizontally();
    progressStack.spacing = 2;
    
    const totalLessons = subscription.total_lessons || 0;
    const completedLessons = subscription.completed_lessons || 0;
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const maxSegments = 10; // –ú–∞–∫—Å–∏–º—É–º —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const segmentsToShow = Math.min(totalLessons, maxSegments);
    
    if (segmentsToShow > 0) {
        const segmentWidth = Math.floor(segmentsToShow > 0 ? segmentsToShow : 1);
        
        for (let i = 0; i < segmentsToShow; i++) {
            const segment = progressStack.addStack();
            segment.size = new Size(segmentWidth * 2, 4);
            segment.cornerRadius = 2;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞
            if (i < completedLessons) {
                // –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è - –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –≥–æ–ª—É–±–æ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
                const ratio = segmentsToShow > 1 ? i / (segmentsToShow - 1) : 1;
                const r = Math.round(0 * (1 - ratio) + 106 * ratio);
                const g = Math.round(193 * (1 - ratio) + 0 * ratio);
                const b = Math.round(255 * (1 - ratio) + 255 * ratio);
                segment.backgroundColor = new Color(`rgb(${r}, ${g}, ${b})`);
            } else {
                // –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
                segment.backgroundColor = new Color("#4B5563");
            }
        }
    }
    
    subStack.addSpacer(3);
    
    // –î–µ—Ç–∞–ª–∏
    const detailsStack = subStack.addStack();
    detailsStack.layoutHorizontally();
    detailsStack.spacing = 12;
    
    // –ü—Ä–æ—à–ª–æ/–í—Å–µ–≥–æ
    const completedText = detailsStack.addText(`–ü—Ä–æ—à–ª–æ: ${completedLessons}/${totalLessons}`);
    completedText.font = Font.systemFont(9);
    completedText.textColor = new Color("#94A3B8");
    
    const detailsSpacer = detailsStack.addSpacer();
    
    // –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
    const missedThisMonth = subscription.missed_this_month || 0;
    if (missedThisMonth > 0) {
        const missedText = detailsStack.addText(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${missedThisMonth}`);
        missedText.font = Font.systemFont(9);
        missedText.textColor = new Color("#FD7000");
    }
}

// ========== –ü–£–°–¢–û–ô –í–ò–î–ñ–ï–¢ ==========
function setupEmptyWidget(widget) {
    widget.addSpacer();
    
    const titleText = widget.addText("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã");
    titleText.font = Font.boldSystemFont(16);
    titleText.textColor = Color.white();
    titleText.centerAlignText();
    
    widget.addSpacer(8);
    
    const emptyText = widget.addText("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");
    emptyText.font = Font.systemFont(14);
    emptyText.textColor = new Color("#94A3B8");
    emptyText.centerAlignText();
    
    widget.addSpacer();
}

// ========== –í–ò–î–ñ–ï–¢ –û–®–ò–ë–ö–ò ==========
function setupErrorWidget(widget, errorMessage) {
    widget.addSpacer();
    
    const titleText = widget.addText("‚ùå –û—à–∏–±–∫–∞");
    titleText.font = Font.boldSystemFont(16);
    titleText.textColor = new Color("#FF6B6B");
    titleText.centerAlignText();
    
    widget.addSpacer(8);
    
    const errorText = widget.addText(errorMessage || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
    errorText.font = Font.systemFont(12);
    errorText.textColor = new Color("#94A3B8");
    errorText.centerAlignText();
    
    widget.addSpacer(4);
    
    const retryText = widget.addText("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
    retryText.font = Font.systemFont(10);
    retryText.textColor = new Color("#6B7280");
    retryText.centerAlignText();
    
    widget.addSpacer();
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
function formatTime(date) {
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
}

// ========== –ó–ê–ü–£–°–ö ==========
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∫ –≤–∏–¥–∂–µ—Ç –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
if (config.runsInWidget) {
    // –ó–∞–ø—É—Å–∫ –∫–∞–∫ –≤–∏–¥–∂–µ—Ç
    const widget = await createWidget();
    Script.setWidget(widget);
} else {
    // –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const widget = await createWidget();
    
    if (config.widgetFamily === "medium") {
        widget.presentMedium();
    } else if (config.widgetFamily === "large") {
        widget.presentLarge();
    } else {
        widget.presentSmall();
    }
}

Script.complete();
