import logging
from datetime import datetime, timedelta
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import config
import pytz

class GoogleCalendarService:
    def __init__(self, credentials_path, calendar_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Calendar."""
        try:
            scope = [
                'https://www.googleapis.com/auth/calendar',
                'https://www.googleapis.com/auth/calendar.events'
            ]
            creds = service_account.Credentials.from_service_account_file(credentials_path, scopes=scope)
            self.service = build('calendar', 'v3', credentials=creds)
            self.calendar_id = calendar_id
            
            logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Calendar API")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar: {e}")
            raise

    def get_all_events(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        import time
        
        max_retries = 3
        retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
        
        for attempt in range(max_retries):
            try:
                events_result = self.service.events().list(
                    calendarId=self.calendar_id,
                    maxResults=2500,
                    singleEvents=True,
                    orderBy='startTime'
                ).execute()
                events = events_result.get('items', [])
                
                logging.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                return events
                
            except (ConnectionResetError, ConnectionError, BrokenPipeError) as network_error:
                attempt_num = attempt + 1
                if attempt_num < max_retries:
                    logging.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt_num}/{max_retries}): {network_error}")
                    logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(retry_delay)
                    retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    continue
                else:
                    logging.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {network_error}")
                    return []
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    return []
                time.sleep(retry_delay)
                retry_delay *= 2
        
        return []

    def find_event_by_lesson_id(self, lesson_id):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID –∑–∞–Ω—è—Ç–∏—è."""
        try:
            events = self.get_all_events()
            
            for event in events:
                description = event.get('description', '')
                if f"ID –∑–∞–Ω—è—Ç–∏—è: {lesson_id}" in description:
                    return event
            
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–æ ID {lesson_id}: {e}")
            return None

    def get_status_emoji(self, mark):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è."""
        mark = str(mark).strip()
        
        emoji_map = {
            '–ü–æ—Å–µ—â–µ–Ω–∏–µ': '‚úîÔ∏è',
            '–ü–µ—Ä–µ–Ω–æ—Å': 'üîÑ',
            '–û—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)': 'ü§í',
            '–ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)': 'üö´'
        }
        
        return emoji_map.get(mark, 'üìÖ')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

    def create_event(self, lesson_data, circle_name):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        import time
        
        max_retries = 3
        retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
        
        for attempt in range(max_retries):
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ—Å–µ—â–µ–Ω–∏—è
                mark = lesson_data.get('mark', '')
                emoji = self.get_status_emoji(mark)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –≠–º–æ–¥–∑–∏ –†–µ–±–µ–Ω–æ–∫ - –ö—Ä—É–∂–æ–∫
                summary = f"{emoji} {lesson_data['child']} - {circle_name}"
                
                logging.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –æ—Ç–º–µ—Ç–∫–∞='{mark}', —ç–º–æ–¥–∑–∏='{emoji}', –Ω–∞–∑–≤–∞–Ω–∏–µ='{summary}'")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                logging.info(f"üïê –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏: –¥–∞—Ç–∞='{lesson_data['date']}', –Ω–∞—á–∞–ª–æ='{lesson_data['start_time']}', –∫–æ–Ω–µ—Ü='{lesson_data['end_time']}'")
                
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    lesson_date = datetime.strptime(lesson_data['date'], '%d.%m.%Y')
                    
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    start_time_str = lesson_data['start_time'].strip()
                    end_time_str = lesson_data['end_time'].strip()
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
                    start_time = datetime.strptime(start_time_str, '%H:%M').time()
                    end_time = datetime.strptime(end_time_str, '%H:%M').time()
                    
                except ValueError as ve:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: –Ω–∞—á–∞–ª–æ='{lesson_data['start_time']}', –∫–æ–Ω–µ—Ü='{lesson_data['end_time']}', –æ—à–∏–±–∫–∞: {ve}")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –ë–ï–ó —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                start_datetime_naive = datetime.combine(lesson_date.date(), start_time)
                end_datetime_naive = datetime.combine(lesson_date.date(), end_time)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–≤–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Asia/Yekaterinburg (UTC+5) –≤–º–µ—Å—Ç–æ Europe/Moscow (UTC+3)
                local_timezone = pytz.timezone('Asia/Yekaterinburg')
                
                # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
                start_datetime = local_timezone.localize(start_datetime_naive)
                end_datetime = local_timezone.localize(end_datetime_naive)
                
                logging.info(f"üïê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: {start_datetime} - {end_datetime}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                lesson_id = lesson_data.get('lesson_id', 'N/A')
                subscription_id = lesson_data.get('subscription_id', 'N/A')
                status = lesson_data.get('status', 'N/A')
                child = lesson_data.get('child', 'N/A')
                mark = lesson_data.get('mark', '')
                date = lesson_data.get('date', 'N/A')
                start_time = lesson_data.get('start_time', 'N/A')
                
                description = f"""ID –∑–∞–Ω—è—Ç–∏—è: {lesson_id}
ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {subscription_id}
–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è: {status}
–†–µ–±–µ–Ω–æ–∫: {child}
–û—Ç–º–µ—Ç–∫–∞: {mark}
–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è: {date}
–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}
–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {lesson_data.get('end_time', 'N/A')}"""

                event = {
                    'summary': summary,
                    'description': description,
                    'start': {
                        'dateTime': start_datetime.isoformat(),
                        'timeZone': 'Asia/Yekaterinburg',
                    },
                    'end': {
                        'dateTime': end_datetime.isoformat(),
                        'timeZone': 'Asia/Yekaterinburg',
                    },
                }

                created_event = self.service.events().insert(
                    calendarId=self.calendar_id, 
                    body=event
                ).execute()
                
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} –Ω–∞ {lesson_data['date']}")
                return created_event['id']
                
            except (ConnectionResetError, ConnectionError, TimeoutError) as network_error:
                attempt_num = attempt + 1
                if attempt_num < max_retries:
                    logging.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data.get('lesson_id', 'N/A')} (–ø–æ–ø—ã—Ç–∫–∞ {attempt_num}/{max_retries}): {network_error}")
                    logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(retry_delay)
                    retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    continue
                else:
                    logging.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data.get('lesson_id', 'N/A')} –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {network_error}")
                    return None
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_data.get('lesson_id', 'N/A')}: {e}")
                logging.error(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: {lesson_data}")
                logging.error(f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞: {circle_name}")
                import traceback
                logging.error(f"üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                return None
        
        return None

    def update_event(self, event_id, lesson_data, circle_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ—Å–µ—â–µ–Ω–∏—è
            mark = lesson_data.get('mark', '')
            emoji = self.get_status_emoji(mark)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –≠–º–æ–¥–∑–∏ –†–µ–±–µ–Ω–æ–∫ - –ö—Ä—É–∂–æ–∫
            summary = f"{emoji} {lesson_data['child']} - {circle_name}"
            
            logging.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –æ—Ç–º–µ—Ç–∫–∞='{mark}', —ç–º–æ–¥–∑–∏='{emoji}', –Ω–∞–∑–≤–∞–Ω–∏–µ='{summary}'")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            logging.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: –¥–∞—Ç–∞='{lesson_data['date']}', –Ω–∞—á–∞–ª–æ='{lesson_data['start_time']}', –∫–æ–Ω–µ—Ü='{lesson_data['end_time']}'")
            
            lesson_date = datetime.strptime(lesson_data['date'], '%d.%m.%Y')
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            try:
                start_time_str = lesson_data['start_time'].strip()
                end_time_str = lesson_data['end_time'].strip()
                
                start_time = datetime.strptime(start_time_str, '%H:%M').time()
                end_time = datetime.strptime(end_time_str, '%H:%M').time()
                
            except ValueError as ve:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: –Ω–∞—á–∞–ª–æ='{lesson_data['start_time']}', –∫–æ–Ω–µ—Ü='{lesson_data['end_time']}', –æ—à–∏–±–∫–∞: {ve}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –ë–ï–ó —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            start_datetime_naive = datetime.combine(lesson_date.date(), start_time)
            end_datetime_naive = datetime.combine(lesson_date.date(), end_time)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–≤–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π)
            local_timezone = pytz.timezone('Asia/Yekaterinburg')
            
            # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            start_datetime = local_timezone.localize(start_datetime_naive)
            end_datetime = local_timezone.localize(end_datetime_naive)
            
            logging.info(f"üïê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: {start_datetime} - {end_datetime}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            description = f"""ID –∑–∞–Ω—è—Ç–∏—è: {lesson_data['lesson_id']}
ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {lesson_data['subscription_id']}
–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è: {lesson_data['status']}
–†–µ–±–µ–Ω–æ–∫: {lesson_data['child']}
–û—Ç–º–µ—Ç–∫–∞: {lesson_data['mark']}
–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è: {lesson_data['date']}
–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {lesson_data['start_time']}
–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {lesson_data['end_time']}"""

            event = {
                'summary': summary,
                'description': description,
                'start': {
                    'dateTime': start_datetime.isoformat(),
                    'timeZone': 'Asia/Yekaterinburg',
                },
                'end': {
                    'dateTime': end_datetime.isoformat(),
                    'timeZone': 'Asia/Yekaterinburg',
                },
            }

            updated_event = self.service.events().update(
                calendarId=self.calendar_id,
                eventId=event_id,
                body=event
            ).execute()
            
            logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} –Ω–∞ {lesson_data['date']}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            return False

    def delete_event(self, event_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        try:
            self.service.events().delete(
                calendarId=self.calendar_id,
                eventId=event_id
            ).execute()
            logging.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            return False

    def delete_subscription_events(self, child_name, circle_name, subscription_id):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ Google Calendar."""
        if not self.service:
            logging.warning("‚ö†Ô∏è Google Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
            return {'success': True, 'deleted_count': 0, 'message': 'Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            logging.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id} ({child_name} - {circle_name})")
            
            deleted_count = 0
            errors = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            events_result = self.service.events().list(
                calendarId=self.calendar_id,
                maxResults=2500,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            
            # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            for event in events:
                try:
                    summary = event.get('summary', '')
                    description = event.get('description', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫ —É–¥–∞–ª—è–µ–º–æ–º—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É
                    if (child_name in summary and circle_name in summary) or \
                       (child_name in description and circle_name in description) or \
                       (subscription_id in description):
                        
                        event_id = event['id']
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                        self.service.events().delete(
                            calendarId=self.calendar_id,
                            eventId=event_id
                        ).execute()
                        
                        deleted_count += 1
                        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                        import time
                        time.sleep(0.1)
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event.get('id', 'unknown')}: {e}"
                    logging.error(f"‚ùå {error_msg}")
                    errors.append(error_msg)
                    continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if deleted_count > 0:
                message = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar"
                if errors:
                    message += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(errors)}"
            else:
                message = "‚ÑπÔ∏è –°–æ–±—ã—Ç–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Google Calendar"
            
            logging.info(f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π: {deleted_count} —É–¥–∞–ª–µ–Ω–æ, {len(errors)} –æ—à–∏–±–æ–∫")
            
            return {
                'success': True,
                'deleted_count': deleted_count,
                'errors': errors,
                'message': message
            }
            
        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}"
            logging.error(error_msg)
            return {
                'success': False,
                'deleted_count': 0,
                'errors': [str(e)],
                'message': error_msg
            }

    def extract_lesson_variables_from_event(self, event):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
        try:
            description = event.get('description', '')
            variables = {}
            
            for line in description.split('\n'):
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    if key == 'ID –∑–∞–Ω—è—Ç–∏—è':
                        variables['lesson_id'] = value
                    elif key == 'ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞':
                        variables['subscription_id'] = value
                    elif key == '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è':
                        variables['status'] = value
                    elif key == '–†–µ–±–µ–Ω–æ–∫':
                        variables['child'] = value
                    elif key == '–û—Ç–º–µ—Ç–∫–∞':
                        variables['mark'] = value
                    elif key == '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è':
                        variables['date'] = value
                    elif key == '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞':
                        variables['start_time'] = value
                    elif key == '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è':
                        variables['end_time'] = value
            
            return variables
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å–æ–±—ã—Ç–∏—è: {e}")
            return {}

    def compare_lesson_variables(self, sheet_data, event_variables):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisons = {
                'lesson_id': str(sheet_data.get('lesson_id', '')).strip() == str(event_variables.get('lesson_id', '')).strip(),
                'subscription_id': str(sheet_data.get('subscription_id', '')).strip() == str(event_variables.get('subscription_id', '')).strip(),
                'status': str(sheet_data.get('status', '')).strip() == str(event_variables.get('status', '')).strip(),
                'child': str(sheet_data.get('child', '')).strip() == str(event_variables.get('child', '')).strip(),
                'mark': str(sheet_data.get('mark', '')).strip() == str(event_variables.get('mark', '')).strip(),
                'date': str(sheet_data.get('date', '')).strip() == str(event_variables.get('date', '')).strip(),
                'start_time': str(sheet_data.get('start_time', '')).strip() == str(event_variables.get('start_time', '')).strip(),
                'end_time': str(sheet_data.get('end_time', '')).strip() == str(event_variables.get('end_time', '')).strip(),
            }
            
            all_match = all(comparisons.values())
            
            if not all_match:
                logging.info("üîç –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è:")
                for key, match in comparisons.items():
                    if not match:
                        sheet_val = sheet_data.get(key, '')
                        event_val = event_variables.get(key, '')
                        logging.info(f"  {key}: –¢–∞–±–ª–∏—Ü–∞='{sheet_val}' vs –ö–∞–ª–µ–Ω–¥–∞—Ä—å='{event_val}'")
            
            return all_match
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return False

    def find_forecast_event_by_id(self, forecast_id):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ ID –≤ –æ–ø–∏—Å–∞–Ω–∏–∏."""
        try:
            events = self.get_all_events()
            
            for event in events:
                description = event.get('description', '')
                if f"ID –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_id}" in description:
                    return event
            
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ ID {forecast_id}: {e}")
            return None

    def create_forecast_event(self, forecast_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å)."""
        import time
        
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
                emoji = self.get_forecast_status_emoji(forecast_data.get('status', ''))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –≠–º–æ–¥–∑–∏ –û–ø–ª–∞—Ç–∞ - –†–µ–±–µ–Ω–æ–∫ - –ö—Ä—É–∂–æ–∫
                summary = f"{emoji} –û–ø–ª–∞—Ç–∞ - {forecast_data['child']} - {forecast_data['circle']}"
                
                logging.info(f"üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: —Å—Ç–∞—Ç—É—Å='{forecast_data.get('status', '')}', —ç–º–æ–¥–∑–∏='{emoji}', –Ω–∞–∑–≤–∞–Ω–∏–µ='{summary}'")
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
                try:
                    from datetime import datetime
                    payment_date = datetime.strptime(forecast_data['payment_date'], '%d.%m.%Y')
                except ValueError as ve:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã: '{forecast_data['payment_date']}', –æ—à–∏–±–∫–∞: {ve}")
                    return None
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                description = f"""ID –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_data['forecast_id']}
–ö—Ä—É–∂–æ–∫: {forecast_data['circle']}
–†–µ–±–µ–Ω–æ–∫: {forecast_data['child']}
–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {forecast_data['payment_date']}
–ë—é–¥–∂–µ—Ç: {forecast_data['budget']}
–°—Ç–∞—Ç—É—Å: {forecast_data['status']}"""

                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                event = {
                    'summary': summary,
                    'description': description,
                    'start': {
                        'date': payment_date.strftime('%Y-%m-%d'),
                        'timeZone': 'Europe/Moscow',
                    },
                    'end': {
                        'date': payment_date.strftime('%Y-%m-%d'),
                        'timeZone': 'Europe/Moscow',
                    },
                }

                created_event = self.service.events().insert(
                    calendarId=self.calendar_id, 
                    body=event
                ).execute()
                
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {summary} –Ω–∞ {forecast_data['payment_date']}")
                return created_event['id']
                
            except (ConnectionResetError, ConnectionError, TimeoutError) as network_error:
                attempt_num = attempt + 1
                if attempt_num < max_retries:
                    logging.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data.get('forecast_id', 'N/A')} (–ø–æ–ø—ã—Ç–∫–∞ {attempt_num}/{max_retries}): {network_error}")
                    logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(retry_delay)
                    retry_delay *= 2
                    continue
                else:
                    logging.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data.get('forecast_id', 'N/A')} –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {network_error}")
                    return None
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {forecast_data.get('forecast_id', 'N/A')}: {e}")
                logging.error(f"üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_data}")
                import traceback
                logging.error(f"üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                return None
        
        return None

    def update_forecast_event(self, event_id, forecast_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            emoji = self.get_forecast_status_emoji(forecast_data.get('status', ''))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –≠–º–æ–¥–∑–∏ –û–ø–ª–∞—Ç–∞ - –†–µ–±–µ–Ω–æ–∫ - –ö—Ä—É–∂–æ–∫
            summary = f"{emoji} –û–ø–ª–∞—Ç–∞ - {forecast_data['child']} - {forecast_data['circle']}"
            
            logging.info(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: —Å—Ç–∞—Ç—É—Å='{forecast_data.get('status', '')}', —ç–º–æ–¥–∑–∏='{emoji}', –Ω–∞–∑–≤–∞–Ω–∏–µ='{summary}'")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
            try:
                from datetime import datetime
                payment_date = datetime.strptime(forecast_data['payment_date'], '%d.%m.%Y')
            except ValueError as ve:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: '{forecast_data['payment_date']}', –æ—à–∏–±–∫–∞: {ve}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            description = f"""ID –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_data['forecast_id']}
–ö—Ä—É–∂–æ–∫: {forecast_data['circle']}
–†–µ–±–µ–Ω–æ–∫: {forecast_data['child']}
–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {forecast_data['payment_date']}
–ë—é–¥–∂–µ—Ç: {forecast_data['budget']}
–°—Ç–∞—Ç—É—Å: {forecast_data['status']}"""

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
            event = {
                'summary': summary,
                'description': description,
                'start': {
                    'date': payment_date.strftime('%Y-%m-%d'),
                    'timeZone': 'Europe/Moscow',
                },
                'end': {
                    'date': payment_date.strftime('%Y-%m-%d'),
                    'timeZone': 'Europe/Moscow',
                },
            }

            updated_event = self.service.events().update(
                calendarId=self.calendar_id,
                eventId=event_id,
                body=event
            ).execute()
            
            logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {summary} –Ω–∞ {forecast_data['payment_date']}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {event_id}: {e}")
            return False

    def get_forecast_status_emoji(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        status = str(status).strip()
        
        emoji_map = {
            '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ': 'üìÖ',
            '–û–ø–ª–∞—á–µ–Ω–æ': '‚úÖ',
            '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ': '‚ö†Ô∏è',
            '–û—Ç–º–µ–Ω–µ–Ω–æ': '‚ùå'
        }
        
        return emoji_map.get(status, 'üí∞')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–Ω—å–≥–∏

    def extract_forecast_variables_from_event(self, event):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
        try:
            description = event.get('description', '')
            variables = {}
            
            for line in description.split('\n'):
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    if key == 'ID –ø—Ä–æ–≥–Ω–æ–∑–∞':
                        variables['forecast_id'] = value
                    elif key == '–ö—Ä—É–∂–æ–∫':
                        variables['circle'] = value
                    elif key == '–†–µ–±–µ–Ω–æ–∫':
                        variables['child'] = value
                    elif key == '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã':
                        variables['payment_date'] = value
                    elif key == '–ë—é–¥–∂–µ—Ç':
                        variables['budget'] = value
                    elif key == '–°—Ç–∞—Ç—É—Å':
                        variables['status'] = value
            
            return variables
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è: {e}")
            return {}

    def compare_forecast_variables(self, sheet_data, event_variables):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparisons = {
                'forecast_id': str(sheet_data.get('forecast_id', '')).strip() == str(event_variables.get('forecast_id', '')).strip(),
                'circle': str(sheet_data.get('circle', '')).strip() == str(event_variables.get('circle', '')).strip(),
                'child': str(sheet_data.get('child', '')).strip() == str(event_variables.get('child', '')).strip(),
                'payment_date': str(sheet_data.get('payment_date', '')).strip() == str(event_variables.get('payment_date', '')).strip(),
                'budget': str(sheet_data.get('budget', '')).strip() == str(event_variables.get('budget', '')).strip(),
                'status': str(sheet_data.get('status', '')).strip() == str(event_variables.get('status', '')).strip(),
            }
            
            all_match = all(comparisons.values())
            
            if not all_match:
                logging.info("üîç –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ:")
                for key, match in comparisons.items():
                    if not match:
                        sheet_val = sheet_data.get(key, '')
                        event_val = event_variables.get(key, '')
                        logging.info(f"  {key}: –¢–∞–±–ª–∏—Ü–∞='{sheet_val}' vs –ö–∞–ª–µ–Ω–¥–∞—Ä—å='{event_val}'")
            
            return all_match
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return False

    def delete_all_forecast_events(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤."""
        import time
        
        try:
            deleted_count = 0
            max_retries = 3
            retry_delay = 2
            
            for attempt in range(max_retries):
                try:
                    events = self.get_all_events()
                    
                    logging.info(f"üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å—Ä–µ–¥–∏ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})...")
                    
                    forecast_events = []
                    for event in events:
                        description = event.get('description', '')
                        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å "ID –ø—Ä–æ–≥–Ω–æ–∑–∞:" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                        if "ID –ø—Ä–æ–≥–Ω–æ–∑–∞:" in description:
                            forecast_events.append(event)
                    
                    if not forecast_events:
                        logging.info("üìÖ –°–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        return 0
                    
                    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(forecast_events)} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞—É–∑–∞–º–∏
                    for i, event in enumerate(forecast_events):
                        try:
                            event_id = event['id']
                            event_summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            
                            logging.info(f"üóëÔ∏è –£–¥–∞–ª—è—é —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ ({i+1}/{len(forecast_events)}): {event_summary}")
                            
                            self.service.events().delete(
                                calendarId=self.calendar_id,
                                eventId=event_id
                            ).execute()
                            
                            deleted_count += 1
                            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {event_summary}")
                            
                            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                            if i < len(forecast_events) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                                time.sleep(0.5)
                                
                        except (ConnectionResetError, ConnectionError, TimeoutError) as network_error:
                            logging.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event.get('id', 'N/A')}: {network_error}")
                            continue
                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {event.get('id', 'N/A')}: {e}")
                            continue
                    
                    logging.info(f"üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞")
                    return deleted_count
                    
                except (ConnectionResetError, ConnectionError, TimeoutError) as network_error:
                    attempt_num = attempt + 1
                    if attempt_num < max_retries:
                        logging.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt_num}/{max_retries}): {network_error}")
                        logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        time.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    else:
                        logging.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {network_error}")
                        return deleted_count
                        
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        return deleted_count
                    time.sleep(retry_delay)
                    retry_delay *= 2
            
            return deleted_count
            
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return 0

    def remove_duplicate_lesson_events(self):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è –∑–∞–Ω—è—Ç–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º ID –∑–∞–Ω—è—Ç–∏—è."""
        try:
            deleted_count = 0
            events = self.get_all_events()
            
            logging.info(f"üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–µ–π –∑–∞–Ω—è—Ç–∏–π —Å—Ä–µ–¥–∏ {len(events)} —Å–æ–±—ã—Ç–∏–π...")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ ID –∑–∞–Ω—è—Ç–∏—è
            lesson_events = {}
            for event in events:
                description = event.get('description', '')
                if "ID –∑–∞–Ω—è—Ç–∏—è:" in description:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è
                    for line in description.split('\n'):
                        if line.startswith('ID –∑–∞–Ω—è—Ç–∏—è:'):
                            lesson_id = line.split(':', 1)[1].strip()
                            if lesson_id not in lesson_events:
                                lesson_events[lesson_id] = []
                            lesson_events[lesson_id].append(event)
                            break
            
            # –ò—â–µ–º –¥—É–±–ª–∏
            for lesson_id, events_list in lesson_events.items():
                if len(events_list) > 1:
                    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(events_list)} –¥—É–±–ª–µ–π –¥–ª—è –∑–∞–Ω—è—Ç–∏—è ID {lesson_id}")
                    
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    events_to_delete = events_list[1:]  # –í—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                    
                    for event in events_to_delete:
                        try:
                            event_summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            logging.info(f"üóëÔ∏è –£–¥–∞–ª—è—é –¥—É–±–ª—å –∑–∞–Ω—è—Ç–∏—è: {event_summary} (ID –∑–∞–Ω—è—Ç–∏—è: {lesson_id})")
                            
                            self.service.events().delete(
                                calendarId=self.calendar_id,
                                eventId=event['id']
                            ).execute()
                            
                            deleted_count += 1
                            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª—å: {event_summary}")
                            
                            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                            import time
                            time.sleep(0.5)
                            
                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª—è —Å–æ–±—ã—Ç–∏—è {event.get('id', 'N/A')}: {e}")
            
            logging.info(f"üéâ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π")
            return deleted_count
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–µ–π –∑–∞–Ω—è—Ç–∏–π: {e}")
            return 0


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
try:
    if hasattr(config, 'GOOGLE_CALENDAR_ID') and config.GOOGLE_CALENDAR_ID and config.GOOGLE_CALENDAR_ID != 'disabled':
        calendar_service = GoogleCalendarService(config.GOOGLE_CREDENTIALS_PATH, config.GOOGLE_CALENDAR_ID)
    else:
        calendar_service = None
        logging.info("üìÖ Google Calendar –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
except Exception as e:
    calendar_service = None
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Calendar: {e}")