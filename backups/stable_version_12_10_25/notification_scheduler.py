import asyncio
import logging
from datetime import datetime, time, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from google_sheets_service import sheets_service
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class NotificationScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.chat_id = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        self.is_running = False
        self.current_task = None
        
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            logging.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.current_task = asyncio.create_task(self._scheduler_loop())
        
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.is_running:
            return
            
        self.is_running = False
        if self.current_task:
            self.current_task.cancel()
            try:
                await self.current_task
            except asyncio.CancelledError:
                pass
                
        logging.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notification_time = self._get_notification_time()
                
                if notification_time:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if self._is_notification_time(notification_time):
                        await self._send_daily_notifications()
                        
                        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏
                        await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                
    def _get_notification_time(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —è—á–µ–π–∫–∏ N2 –ª–∏—Å—Ç–∞ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
            handbook_sheet = sheets_service.spreadsheet.worksheet("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            notification_time = handbook_sheet.acell('N2').value
            
            if notification_time and notification_time.strip():
                logging.info(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_time}")
                return notification_time.strip()
            else:
                logging.info("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None
            
    def _is_notification_time(self, notification_time: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "HH:MM")
            target_time = datetime.strptime(notification_time, "%H:%M").time()
            current_time = datetime.now().time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –º–∏–Ω—É—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
            current_minutes = current_time.hour * 60 + current_time.minute
            target_minutes = target_time.hour * 60 + target_time.minute
            
            diff = abs(current_minutes - target_minutes)
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç, —Ç–æ –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            return diff <= 5
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
            
    def set_chat_id(self, chat_id):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.chat_id = chat_id
        logging.info(f"üì± –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {chat_id}")
    
    async def _send_daily_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö"""
        try:
            logging.info("üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö")
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not self.chat_id:
                saved_chat_id = sheets_service.get_notification_chat_id()
                if saved_chat_id:
                    self.chat_id = saved_chat_id
                    logging.info(f"üì± –ó–∞–≥—Ä—É–∂–µ–Ω chat_id –∏–∑ –±–∞–∑—ã: {self.chat_id}")
                else:
                    logging.warning("‚ö†Ô∏è Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_lessons = self._get_today_lessons()
            
            if not today_lessons:
                logging.info("üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            logging.info(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_lessons)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–Ω—è—Ç–∏—é
            for lesson in today_lessons:
                await self._send_lesson_notification(lesson)
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
    def _get_today_lessons(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().strftime('%d.%m.%Y')
            logging.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {today}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_sheet = sheets_service.spreadsheet.worksheet("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
            all_data = calendar_sheet.get_all_values()
            
            if len(all_data) <= 1:
                return []
                
            headers = all_data[0]
            today_lessons = []
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            date_col = None
            child_col = None
            circle_col = None
            time_start_col = None
            time_end_col = None
            lesson_id_col = None
            status_col = None
            
            for i, header in enumerate(headers):
                if '–¥–∞—Ç–∞' in header.lower():
                    date_col = i
                elif '—Ä–µ–±–µ–Ω–æ–∫' in header.lower():
                    child_col = i
                elif '–∫—Ä—É–∂–æ–∫' in header.lower():
                    circle_col = i
                elif '–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞' in header.lower():
                    time_start_col = i
                elif '–≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è' in header.lower():
                    time_end_col = i
                elif 'id –∑–∞–Ω—è—Ç–∏—è' in header.lower():
                    lesson_id_col = i
                elif '–æ—Ç–º–µ—Ç–∫–∞' in header.lower() or '—Å—Ç–∞—Ç—É—Å' in header.lower():
                    status_col = i
                    
            # –ò—â–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            for row_index, row in enumerate(all_data[1:], start=2):
                if len(row) > max(date_col or 0, child_col or 0, circle_col or 0):
                    lesson_date = row[date_col] if date_col is not None else ""
                    
                    if lesson_date == today:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ
                        status = row[status_col] if status_col is not None and status_col < len(row) else ""
                        
                        if not status or status.strip() == "":
                            # –ü–æ–ª—É—á–∞–µ–º ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä—É–∂–∫–∞
                            subscription_id = ""
                            for i, header in enumerate(headers):
                                if 'id –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞' in header.lower():
                                    subscription_id = row[i] if i < len(row) else ""
                                    break
                            
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞ –∏–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                            circle_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            if subscription_id:
                                sub_details = sheets_service.get_subscription_details(subscription_id)
                                if sub_details:
                                    circle_name = sub_details.get('circle_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π lesson_id –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏
                            real_lesson_id = row[lesson_id_col] if lesson_id_col is not None and lesson_id_col < len(row) else ""
                            if not real_lesson_id or real_lesson_id.strip() == "":
                                # –ï—Å–ª–∏ ID –∑–∞–Ω—è—Ç–∏—è –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ ID
                                real_lesson_id = str(row_index)
                                logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π lesson_id –≤ —Å—Ç—Ä–æ–∫–µ {row_index}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {real_lesson_id}")
                            
                            lesson_data = {
                                'lesson_id': real_lesson_id,
                                'child_name': row[child_col] if child_col is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                                'circle_name': circle_name,
                                'subscription_id': subscription_id,
                                'start_time': row[time_start_col] if time_start_col is not None else "",
                                'end_time': row[time_end_col] if time_end_col is not None else "",
                                'date': lesson_date,
                                'row_index': row_index
                            }
                            today_lessons.append(lesson_data)
                            
            return today_lessons
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            return []
            
    async def _send_lesson_notification(self, lesson: dict, max_retries: int = 3):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        for attempt in range(max_retries):
            try:
                lesson_id = lesson['lesson_id']
                child_name = lesson['child_name']
                circle_name = lesson['circle_name']
                start_time = lesson['start_time']
                end_time = lesson['end_time']
                
                # –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
                logging.info("=" * 60)
                logging.info("üì¨ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–ù–Ø–¢–ò–ò")
                logging.info(f"üìù lesson_id: '{lesson_id}'")
                logging.info(f"üë§ child_name: '{child_name}'")
                logging.info(f"üé® circle_name: '{circle_name}'")
                logging.info(f"‚è∞ start_time: '{start_time}'")
                logging.info(f"‚è∞ end_time: '{end_time}'")
                logging.info(f"üì± chat_id: '{self.chat_id}'")
                logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞: {attempt + 1}/{max_retries}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –∏–∑ select_lesson_from_date
                message_text = f"‚úÖ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–µ—â–µ–Ω–∏—è*\n\n"
                message_text += f"üë§ *–†–µ–±–µ–Ω–æ–∫:* {child_name}\n"
                message_text += f"üé® *–ö—Ä—É–∂–æ–∫:* {circle_name}\n"
                message_text += f"üÜî *ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:* {lesson.get('subscription_id', '')}\n"
                message_text += f"üìÖ *–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è:* {lesson['date']}\n"
                if start_time and end_time:
                    message_text += f"üïê *–í—Ä–µ–º—è:* {start_time} - {end_time}\n"
                message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è:"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è –∏–∑ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                attendance_statuses = sheets_service.get_handbook_items("–°—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è")
                
                if not attendance_statuses:
                    logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ")
                    return
                    
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
                keyboard = []
                
                # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —ç–º–æ–¥–∑–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
                status_emojis = {
                    '–ø–æ—Å–µ—â–µ–Ω–∏–µ': '‚úÖ',
                    '–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)': '‚ùå',
                    '–ø—Ä–æ–ø—É—Å–∫': '‚ùå',
                    '–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)': 'ü§í',
                    '–ø–µ—Ä–µ–Ω–æ—Å': 'üîÑ',
                    '–æ—Ç–º–µ–Ω–∞': 'üö´',
                    '–±–æ–ª–µ–∑–Ω—å': 'ü§í',
                    '—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞': 'üìã',
                    '–Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞': '‚ö†Ô∏è'
                }
                
                for status in attendance_statuses:
                    if status.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                        emoji = ''
                        status_lower = status.lower().strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        if status_lower in status_emojis:
                            emoji = status_emojis[status_lower]
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                            for key, value in status_emojis.items():
                                if key in status_lower:
                                    emoji = value
                                    break
                        
                        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                        if not emoji:
                            emoji = 'üìù'
                        
                        button_text = f"{emoji} {status}"
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç callback_data, —á—Ç–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                        callback_data = f"attendance_mark_{lesson_id}|||{status}"
                        
                        # –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ö–ù–û–ü–û–ö
                        logging.info(f"üîò –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
                        logging.info(f"   üìù –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: '{button_text}'")
                        logging.info(f"   üîó Callback data: '{callback_data}'")
                        logging.info(f"   üìä lesson_id: '{lesson_id}'")
                        logging.info(f"   ‚úèÔ∏è status: '{status}'")
                        
                        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_notification_{lesson_id}")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –∏–∑ select_lesson_from_date
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown',  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ Markdown –∫–∞–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                    read_timeout=30,
                    write_timeout=30,
                    connect_timeout=30
                )
                
                logging.info(f"‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û!")
                logging.info(f"üì¨ –ó–∞–Ω—è—Ç–∏–µ: {child_name} - {circle_name}")
                logging.info(f"üîò –°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(keyboard)}")
                logging.info("=" * 60)
                return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                
            except Exception as e:
                attempt_info = f"(–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})"
                
                if "TimedOut" in str(e) or "timeout" in str(e).lower():
                    logging.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {attempt_info}: {e}")
                    
                    if attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(wait_time)
                        continue
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {attempt_info}: {e}")
                    
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        continue
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                if attempt == max_retries - 1:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {child_name} - {circle_name}")
                    break

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
notification_scheduler = None

def get_notification_scheduler(bot: Bot = None) -> NotificationScheduler:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_scheduler
    
    if notification_scheduler is None and bot is not None:
        notification_scheduler = NotificationScheduler(bot)
        
    return notification_scheduler
