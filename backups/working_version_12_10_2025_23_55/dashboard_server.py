#!/usr/bin/env python3
"""
üéØ DASHBOARD SERVER
–õ–æ–∫–∞–ª—å–Ω—ã–π Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ Telegram Mini App
"""

from flask import Flask, render_template, jsonify, request
from flask_cors import CORS
import logging
import time
from datetime import datetime, timedelta
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from google_sheets_service import GoogleSheetsService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__, 
           template_folder='dashboard/templates',
           static_folder='dashboard/static')

# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Mini App
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Google Sheets
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    from google_sheets_service import sheets_service
    logger.info("‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    sheets_service = None

class DashboardDataService:
    def __init__(self):
        # –£–±–∏—Ä–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        pass
        
    def get_student_filters(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –ª–∏—Å—Ç–∞ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Ç–æ–ª–±–µ—Ü B"""
        try:
            if not sheets_service:
                return ['–í—Å–µ']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B –ª–∏—Å—Ç–∞ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫
            students = sheets_service.get_handbook_items("–†–µ–±–µ–Ω–æ–∫")  # —Å—Ç–æ–ª–±–µ—Ü B
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–í—Å–µ" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            filters = ['–í—Å–µ'] + students
            return filters
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            return ['–í—Å–µ']
    
    def get_current_month_range(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
        now = datetime.now()
        start_of_month = now.replace(day=1)
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if now.month == 12:
            end_of_month = now.replace(year=now.year + 1, month=1, day=1) - timedelta(days=1)
        else:
            end_of_month = now.replace(month=now.month + 1, day=1) - timedelta(days=1)
        
        return start_of_month, end_of_month
    
    def get_current_week_range(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
        now = datetime.now()
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        monday = now - timedelta(days=now.weekday())
        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        sunday = monday + timedelta(days=6)
        
        return monday, sunday
    
    def get_calendar_lessons_data(self, student_filter=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            if not sheets_service:
                logger.error("sheets_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π
            calendar_data = sheets_service.get_calendar_lessons()
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if student_filter and student_filter != '–í—Å–µ':
                calendar_data = [
                    lesson for lesson in calendar_data 
                    if lesson.get('–†–µ–±–µ–Ω–æ–∫') == student_filter
                ]
            
            return calendar_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return []
    
    def count_lessons_by_criteria(self, calendar_data, date_column, status_column, status_values, start_date, end_date):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        count = 0
        
        for lesson in calendar_data:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
                lesson_date_str = lesson.get(date_column, '')
                if not lesson_date_str:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY)
                lesson_date = datetime.strptime(lesson_date_str, '%d.%m.%Y')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                if start_date <= lesson_date <= end_date:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status = lesson.get(status_column, '')
                    if status in status_values:
                        count += 1
                        
            except (ValueError, TypeError) as e:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                continue
        
        return count
    
    def get_budget_metrics(self, sheet_name, start_date, end_date, student_filter=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ª–∏—Å—Ç–æ–≤ –ü—Ä–æ–≥–Ω–æ–∑ –∏–ª–∏ –û–ø–ª–∞—á–µ–Ω–æ"""
        try:
            if not sheets_service:
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            if sheet_name == '–ü—Ä–æ–≥–Ω–æ–∑':
                data = sheets_service.get_planned_payments()
            elif sheet_name == '–û–ø–ª–∞—á–µ–Ω–æ':
                data = sheets_service.get_paid_payments()
            else:
                return 0
            
            if not data:
                return 0
            
            total_amount = 0
            
            for payment in data:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
                    payment_date_str = payment.get('payment_date', '')
                    if not payment_date_str:
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    payment_date = datetime.strptime(payment_date_str, '%d.%m.%Y')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                    if start_date <= payment_date <= end_date:
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                        if student_filter and student_filter != '–í—Å–µ':
                            child_name = payment.get('child_name', '')
                            if child_name != student_filter:
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
                        if sheet_name == '–ü—Ä–æ–≥–Ω–æ–∑':
                            amount = float(payment.get('budget', 0) or 0)
                        else:  # –û–ø–ª–∞—á–µ–Ω–æ
                            amount = float(payment.get('amount', 0) or 0)
                        
                        total_amount += amount
                                
                except (ValueError, TypeError) as e:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    continue
            
            return int(total_amount)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ {sheet_name}: {e}")
            return 0
    
    def get_subscription_progress(self, student_filter='–í—Å–µ'):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º"""
        try:
            if not sheets_service:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
            active_subs = sheets_service.get_active_subscriptions()
            
            if not active_subs:
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if student_filter and student_filter != '–í—Å–µ':
                active_subs = [
                    sub for sub in active_subs 
                    if sub.get('–†–µ–±–µ–Ω–æ–∫') == student_filter
                ]
            
            progress_data = []
            
            for sub in active_subs:
                try:
                    child_name = sub.get('–†–µ–±–µ–Ω–æ–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    circle_name = sub.get('–ö—Ä—É–∂–æ–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    sub_id = sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    available_keys = list(sub.keys())
                    
                    # –°—Ç–æ–ª–±–µ—Ü E - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π (–≤—Å–µ–≥–æ)
                    total_lessons = 0
                    if len(available_keys) > 4:
                        total_lessons_value = sub.get(available_keys[4], 0)
                        total_lessons = int(total_lessons_value) if total_lessons_value else 0
                    
                    # –°—Ç–æ–ª–±–µ—Ü H - –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü!)
                    remaining_lessons = 0
                    if len(available_keys) > 7:  # –ò–Ω–¥–µ–∫—Å 7 = —Å—Ç–æ–ª–±–µ—Ü H
                        remaining_value = sub.get(available_keys[7], 0)
                        remaining_lessons = int(remaining_value) if remaining_value else 0
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
                    completed_lessons = total_lessons - remaining_lessons
                    
                    # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: H / E * 100
                    progress_percent = (remaining_lessons / total_lessons * 100) if total_lessons > 0 else 0
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                    calendar_data = self.get_calendar_lessons_data()
                    subscription_lessons = [
                        lesson for lesson in calendar_data 
                        if lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞') == sub_id
                    ]
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                    month_start, month_end = self.get_current_month_range()
                    missed_this_month = self.count_lessons_by_criteria(
                        subscription_lessons, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
                        ['–ü—Ä–æ–ø—É—Å–∫'], month_start, month_end
                    )
                    
                    progress_item = {
                        'id': sub_id,
                        'name': f"{circle_name} - {child_name}",
                        'total_lessons': total_lessons,
                        'completed_lessons': completed_lessons,
                        'remaining_lessons': remaining_lessons,
                        'progress_percent': round(progress_percent, 1),
                        'missed_this_month': missed_this_month,
                        'lessons': []
                    }
                    
                    for lesson in subscription_lessons:
                        lesson_detail = {
                            'date': lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', ''),
                            'start_time': lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', ''),
                            'end_time': lesson.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', ''),
                            'status': lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', ''),
                            'attendance': lesson.get('–û—Ç–º–µ—Ç–∫–∞', ''),
                            'id': lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
                        }
                        progress_item['lessons'].append(lesson_detail)
                    
                    progress_data.append(progress_item)
                    
                except (ValueError, TypeError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', 'unknown')}: {e}")
                    continue
            
            return progress_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def get_dashboard_metrics(self, student_filter='–í—Å–µ'):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
            month_start, month_end = self.get_current_month_range()
            week_start, week_end = self.get_current_week_range()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            calendar_data = self.get_calendar_lessons_data(student_filter)
            
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ç–æ–ª–±–µ—Ü E (–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è) = "–ó–∞–≤–µ—Ä—à–µ–Ω" –∏–ª–∏ "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            planned = self.count_lessons_by_criteria(
                calendar_data, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
                ['–ó–∞–≤–µ—Ä—à–µ–Ω', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'], month_start, month_end
            )
            
            # –ü–æ—Å–µ—â–µ–Ω–æ: —Å—Ç–æ–ª–±–µ—Ü G (–û—Ç–º–µ—Ç–∫–∞) = "–ü–æ—Å–µ—â–µ–Ω–∏–µ"
            attended = self.count_lessons_by_criteria(
                calendar_data, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–û—Ç–º–µ—Ç–∫–∞',
                ['–ü–æ—Å–µ—â–µ–Ω–∏–µ'], month_start, month_end
            )
            
            # –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—Ç–æ–ª–±–µ—Ü E (–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è) = "–ü—Ä–æ–ø—É—Å–∫"
            missed = self.count_lessons_by_criteria(
                calendar_data, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
                ['–ü—Ä–æ–ø—É—Å–∫'], month_start, month_end
            )
            
            # –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
            attendance_rate = (attended / planned * 100) if planned > 0 else 0
            
            # –ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            budget_month = self.get_budget_metrics('–ü—Ä–æ–≥–Ω–æ–∑', month_start, month_end, student_filter)
            paid_month = self.get_budget_metrics('–û–ø–ª–∞—á–µ–Ω–æ', month_start, month_end, student_filter)
            budget_week = self.get_budget_metrics('–ü—Ä–æ–≥–Ω–æ–∑', week_start, week_end, student_filter)
            paid_week = self.get_budget_metrics('–û–ø–ª–∞—á–µ–Ω–æ', week_start, week_end, student_filter)
            
            metrics = {
                'planned': planned,
                'attended': attended,
                'missed': missed,
                'attendance_rate': round(attendance_rate, 1),
                'budget_month': budget_month,
                'paid_month': paid_month,
                'budget_week': budget_week,
                'paid_week': paid_week,
                'student_filter': student_filter
            }
            
            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è '{student_filter}': {metrics}")
            return metrics
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return None
    def _get_subscriptions_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            active_subs = self.sheets_service.get_active_subscriptions_info()
            
            total_active = len(active_subs) if active_subs else 0
            total_lessons = sum(sub.get('total_lessons', 0) for sub in active_subs) if active_subs else 0
            remaining_lessons = sum(sub.get('lessons_remaining', 0) for sub in active_subs) if active_subs else 0
            completed_lessons = total_lessons - remaining_lessons
            
            return {
                'total_active': total_active,
                'total_lessons': total_lessons,
                'completed_lessons': completed_lessons,
                'remaining_lessons': remaining_lessons,
                'completion_rate': round((completed_lessons / total_lessons * 100) if total_lessons > 0 else 0, 1)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return {'error': str(e)}
    
    def _get_calendar_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            return {
                'period': '30 –¥–Ω–µ–π',
                'total_lessons': 0,
                'attended': 0,
                'missed': 0,
                'cancelled': 0,
                'attendance_rate': 0.0
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return {'error': str(e)}
    
    def _get_forecast_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π
            forecast_data = self.sheets_service.get_forecast_data()
            
            if not forecast_data:
                return {
                    'next_30_days': 0,
                    'next_7_days': 0,
                    'overdue': 0,
                    'total_forecast': 0
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
            return {
                'next_30_days': len(forecast_data),
                'next_7_days': 0,
                'overdue': 0,
                'total_forecast': sum(float(item.get('amount', 0)) for item in forecast_data if item.get('amount'))
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return {'error': str(e)}
    
    def _get_summary_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            return {
                'last_updated': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'data_sources': ['Google Sheets', 'Telegram Bot'],
                'status': 'active'
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return {'error': str(e)}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö
dashboard_service = DashboardDataService()

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return render_template('dashboard.html')

@app.route('/api/filters')
def api_filters():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    try:
        filters = dashboard_service.get_student_filters()
        return jsonify({
            'success': True,
            'filters': filters,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/metrics')
def api_metrics():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        student_filter = request.args.get('student', '–í—Å–µ')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–í—Å–µ" –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        student_filter = '–í—Å–µ'
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        temp_service = DashboardDataService()
        metrics = temp_service.get_dashboard_metrics(student_filter)
        
        return jsonify(metrics)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –º–µ—Ç—Ä–∏–∫: {e}")
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/subscriptions')
def api_subscriptions():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        student_filter = request.args.get('student', '–í—Å–µ')
        
        progress_data = dashboard_service.get_subscription_progress(student_filter)
        return jsonify({
            'success': True,
            'subscriptions': progress_data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/calendar')
def api_calendar():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        student_filter = request.args.get('student', '–í—Å–µ')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_data = dashboard_service.get_calendar_lessons_data(student_filter)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        events = []
        for lesson in calendar_data:
            event = {
                'id': lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', ''),
                'title': f"{lesson.get('–ö—Ä—É–∂–æ–∫', '')} - {lesson.get('–†–µ–±–µ–Ω–æ–∫', '')}",
                'date': lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', ''),
                'time': lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', ''),
                'status': lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', ''),
                'attendance': lesson.get('–û—Ç–º–µ—Ç–∫–∞', ''),
                'child': lesson.get('–†–µ–±–µ–Ω–æ–∫', ''),
                'circle': lesson.get('–ö—Ä—É–∂–æ–∫', '')
            }
            events.append(event)
        
        return jsonify({
            'success': True,
            'events': events,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'sheets_connected': sheets_service is not None
    })

@app.route('/api/debug/calendar')
def debug_calendar():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        if not sheets_service:
            return jsonify({'error': 'sheets_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}), 500
        
        calendar_data = sheets_service.get_calendar_lessons()
        
        result = {
            'total_records': len(calendar_data),
            'sample_record': calendar_data[0] if calendar_data else None,
            'all_keys': list(calendar_data[0].keys()) if calendar_data else []
        }
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ debug_calendar: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/debug/dates')
def debug_dates():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç"""
    try:
        if not dashboard_service:
            return jsonify({'error': 'dashboard_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}), 500
            
        month_start, month_end = dashboard_service.get_current_month_range()
        
        calendar_data = sheets_service.get_calendar_lessons()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        dates_in_data = []
        statuses_in_data = []
        marks_in_data = []
        
        for lesson in calendar_data:
            date_str = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')
            mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '')
            
            if date_str:
                dates_in_data.append(date_str)
            if status:
                statuses_in_data.append(status)
            if mark:
                marks_in_data.append(mark)
        
        result = {
            'current_month_range': {
                'start': month_start.strftime('%d.%m.%Y'),
                'end': month_end.strftime('%d.%m.%Y')
            },
            'dates_in_calendar': dates_in_data,
            'unique_statuses': list(set(statuses_in_data)),
            'unique_marks': list(set(marks_in_data)),
            'sample_lesson': calendar_data[0] if calendar_data else None,
            'total_lessons': len(calendar_data)
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/debug/metrics')
def debug_metrics():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
    try:
        if not dashboard_service:
            return jsonify({'error': 'dashboard_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}), 500
            
        month_start, month_end = dashboard_service.get_current_month_range()
        calendar_data = sheets_service.get_calendar_lessons()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        planned = dashboard_service.count_lessons_by_criteria(
            calendar_data, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
            ['–ó–∞–≤–µ—Ä—à–µ–Ω', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'], month_start, month_end
        )
        
        attended = dashboard_service.count_lessons_by_criteria(
            calendar_data, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–û—Ç–º–µ—Ç–∫–∞',
            ['–ü–æ—Å–µ—â–µ–Ω–∏–µ'], month_start, month_end
        )
        
        missed = dashboard_service.count_lessons_by_criteria(
            calendar_data, '–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è',
            ['–ü—Ä–æ–ø—É—Å–∫'], month_start, month_end
        )
        
        result = {
            'month_range': f"{month_start.strftime('%d.%m.%Y')} - {month_end.strftime('%d.%m.%Y')}",
            'total_lessons': len(calendar_data),
            'planned': planned,
            'attended': attended, 
            'missed': missed,
            'sample_lesson_for_debug': calendar_data[0] if calendar_data else None
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/refresh')
def api_refresh():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not dashboard_service:
            return jsonify({'error': 'Dashboard service not available'}), 500
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        dashboard_service._cache = {}
        dashboard_service._cache_timestamp = None
        
        metrics = dashboard_service.get_dashboard_metrics()
        return jsonify({
            'status': 'refreshed',
            'timestamp': datetime.now().isoformat(),
            'data': metrics
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏"""
    return jsonify({
        'error': 'Not found',
        'timestamp': datetime.now().isoformat()
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–∫–∏"""
    return jsonify({
        'error': 'Internal server error',
        'timestamp': datetime.now().isoformat()
    }), 500

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    HOST = '0.0.0.0'  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ IP
    PORT = 5001  # –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ 5000 –∑–∞–Ω—è—Ç AirPlay
    DEBUG = True
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Dashboard Server –Ω–∞ http://{HOST}:{PORT}")
    logger.info(f"üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{HOST}:{PORT}")
    logger.info(f"üîß API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    logger.info(f"   ‚Ä¢ GET /api/metrics - –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
    logger.info(f"   ‚Ä¢ GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info(f"   ‚Ä¢ GET /api/refresh - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        app.run(host=HOST, port=PORT, debug=DEBUG)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
