import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from google_sheets_service import sheets_service
from calendar import monthrange
import telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ)
notification_scheduler = None

async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥."""
    try:
        await asyncio.sleep(delay_seconds)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ===
(
    MAIN_MENU,
    SELECT_SUBSCRIPTION,
    MANAGE_SUBSCRIPTION,
    CONFIRM_DELETE_SUBSCRIPTION,
    
    # Subscription Creation Flow
    CREATE_SUB_CHILD,
    CREATE_SUB_GET_CHILD_NAME,
    CREATE_SUB_CIRCLE,
    CREATE_SUB_GET_CIRCLE_NAME,
    CREATE_SUB_TYPE,
    CREATE_SUB_PAYMENT_TYPE,
    CREATE_SUB_COST,
    CREATE_SUB_TOTAL_CLASSES,
    CREATE_SUB_REMAINING_CLASSES,
    CREATE_SUB_START_DATE_MONTH,
    CREATE_SUB_START_DATE_DAY,
    CREATE_SUB_SCHEDULE_DAY,
    CREATE_SUB_SCHEDULE_START_HOUR,
    CREATE_SUB_SCHEDULE_START_MINUTE,
    CREATE_SUB_SCHEDULE_END_HOUR,
    CREATE_SUB_SCHEDULE_END_MINUTE,
    CREATE_SUB_SCHEDULE_CONFIRM,

    # Calendar States
    CALENDAR_MENU,
    INTERACTIVE_CALENDAR,
    SELECT_CALENDAR_DATE,
    SELECT_LESSON_FROM_DATE,
    SELECT_ATTENDANCE_MARK,

    # Settings States
    SETTINGS_MENU,
    SHOW_CATEGORY_ITEMS,
    ADD_ITEM,
    MANAGE_SINGLE_ITEM,
    GET_NEW_VALUE_FOR_EDIT,
    CONFIRM_DELETE_ITEM,

    # Subscription Renewal States
    RENEWAL_SELECT_DATE_TYPE,
    RENEWAL_SELECT_CUSTOM_DATE,
    RENEWAL_CONFIRM,
    
    # Notification Settings States
    NOTIFICATION_TIME_SETTINGS,
) = range(36)
# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def create_calendar_keyboard(year, month):
    keyboard = []
    ru_months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
    
    prev_month_data = f"cal_month_{year}_{month-1}" if month > 1 else f"cal_month_{year-1}_12"
    next_month_data = f"cal_month_{year}_{month+1}" if month < 12 else f"cal_month_{year+1}_1"
    keyboard.append([
        InlineKeyboardButton("<<", callback_data=prev_month_data),
        InlineKeyboardButton(f"{ru_months[month-1]} {year}", callback_data="ignore"),
        InlineKeyboardButton(">>", callback_data=next_month_data)
    ])
    
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in week_days])
    
    month_calendar = []
    first_day_weekday, num_days = monthrange(year, month)
    
    current_day = 1
    while current_day <= num_days:
        row = []
        for i in range(7):
            if (len(month_calendar) == 0 and i < first_day_weekday) or current_day > num_days:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(InlineKeyboardButton(str(current_day), callback_data=f"cal_day_{current_day}"))
                current_day += 1
        month_calendar.append(row)
    
    keyboard.extend(month_calendar)
    keyboard.append([InlineKeyboardButton("‚è™ –û—Ç–º–µ–Ω–∞", callback_data="menu_subscriptions")])
    return InlineKeyboardMarkup(keyboard)

def create_time_keyboard(prefix, hour_range=range(8, 22), minute_step=15):
    keyboard = []
    if minute_step == 60: 
        row = []
        for hour in hour_range:
            row.append(InlineKeyboardButton(f"{hour:02d}", callback_data=f"{prefix}_{hour}"))
            if len(row) == 6:
                keyboard.append(row)
                row = []
        if row: keyboard.append(row)
    else:
        row = [InlineKeyboardButton(f"{minute:02d}", callback_data=f"{prefix}_{minute}") for minute in range(0, 60, minute_step)]
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

async def _display_settings_category_list(update: Update, context: ContextTypes.DEFAULT_TYPE, sender_func):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_header = context.user_data['settings_category_header']
    items = sheets_service.get_handbook_items(category_header)

    if items is None:
        await sender_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        return SHOW_CATEGORY_ITEMS

    keyboard = [[InlineKeyboardButton(item, callback_data=f"settings_select_item_{item}")] for item in items]
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π", callback_data="settings_add")])
    keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {context.user_data['settings_category_title']}:"
    if not items: message_text += "\n\n–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç."

    if hasattr(sender_func, '__name__') and sender_func.__name__ == 'edit_message_text':
        await sender_func(message_text, reply_markup=reply_markup)
    else:
        await sender_func(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup)
    return SHOW_CATEGORY_ITEMS
# === –û—Å–Ω–æ–≤–Ω–æ–µ –ú–µ–Ω—é ===
async def clear_chat_history(context, chat_id, max_messages=50):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, —É–¥–∞–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        logging.info(f"üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞ {chat_id}")
        deleted_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
        for i in range(max_messages):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ ID –∏ –∏–¥—è –Ω–∞–∑–∞–¥
                # Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ ID
                message_id = context.bot_data.get('last_message_id', 1000) - i
                if message_id > 0:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                    deleted_count += 1
            except Exception:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue
        
        if deleted_count > 0:
            logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞")
        else:
            logging.info("üßπ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—á–∏—â–∞–µ—Ç —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–æ–π."""
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback)
    loading_message = None
    if update.message and update.message.text == '/start':
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode='HTML'
            )
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
            await update.message.delete()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç (—É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            chat_id = update.effective_chat.id
            deleted_count = 0
            
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏)
            for i in range(1, 21):
                try:
                    message_id_to_delete = update.message.message_id - i
                    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    if loading_message and message_id_to_delete == loading_message.message_id:
                        continue
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id_to_delete)
                    deleted_count += 1
                except Exception:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
            
            if deleted_count > 0:
                logging.info(f"üßπ –û—á–∏—â–µ–Ω —á–∞—Ç: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ callback
    if update.callback_query:
        await update.callback_query.answer()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–æ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –º–µ–Ω—é
        weekly_summary = sheets_service.get_weekly_summary()
        
        if weekly_summary and weekly_summary.get('attendance_stats'):
            message_text = f"üìä <b>–°–í–û–î–ö–ê –ù–ê –ù–ï–î–ï–õ–Æ</b>\n"
            message_text += f"üìÖ {weekly_summary.get('week_start', '–ù–µ–¥–µ–ª—è')} - {weekly_summary.get('week_end', '')}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π
            stats = weekly_summary['attendance_stats']
            message_text += f"üìö <b>–ó–ê–ù–Ø–¢–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ:</b>\n"
            message_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total', 0)}\n"
            message_text += f"‚Ä¢ ‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {stats.get('attended', 0)}\n"
            message_text += f"‚Ä¢ ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('missed', 0)}\n"
            message_text += f"‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('planned', 0)}\n"
            if stats.get('total', 0) > 0:
                message_text += f"‚Ä¢ üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {stats.get('attendance_rate', 0)}%\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç (–∫—Ä–∞—Ç–∫–æ)
            if weekly_summary.get('payments_this_week'):
                total_budget = weekly_summary.get('total_budget', 0)
                payments_count = len(weekly_summary['payments_this_week'])
                message_text += f"\nüí∞ <b>–û–ü–õ–ê–¢–´ –ù–ê –ù–ï–î–ï–õ–Æ:</b> {payments_count} –æ–ø–ª–∞—Ç –Ω–∞ {total_budget} —Ä—É–±.\n"
            else:
                message_text += f"\nüí∞ <b>–û–ü–õ–ê–¢–´ –ù–ê –ù–ï–î–ï–õ–Æ:</b> –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç\n"
            
            message_text += f"\nüëã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        else:
            message_text = 'üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
        message_text = 'üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    
    keyboard = [
        [InlineKeyboardButton("üìä –î–∞—à–±–æ—Ä–¥", callback_data="menu_dashboard")],
        [InlineKeyboardButton("üìÑ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data="menu_subscriptions")],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞", callback_data="menu_forecast")],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    context.user_data.clear()
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã /start, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if loading_message:
            try:
                await loading_message.edit_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                try:
                    await loading_message.delete()
                except Exception:
                    pass
                await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start (–∫–æ—Ç–æ—Ä—É—é –º—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏), —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.message and update.message.text != '/start':
                try: 
                    await update.message.delete()
                except Exception: 
                    pass
            await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
        
    return MAIN_MENU

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ===
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    logging.info(f"üîç main_menu_handler: –ø–æ–ª—É—á–µ–Ω callback_data = '{query.data}'")
    
    if query.data == 'main_menu':
        logging.info("üè† –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return await start(update, context)
    elif query.data == 'refresh_main_menu':
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        return await start(update, context)
    elif query.data == 'force_refresh_data':
        logging.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        return await force_refresh_all_data(update, context)
    elif query.data == 'menu_dashboard':
        logging.info("üìä –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É")
        return await dashboard_menu(update, context)
    elif query.data == 'menu_subscriptions':
        logging.info("üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
        return await subscriptions_menu(update, context)
    elif query.data == 'menu_calendar':
        logging.info("üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        return await calendar_menu(update, context)
    elif query.data == 'menu_forecast':
        logging.info("üìä –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞")
        return await forecast_menu_handler(update, context)
    elif query.data == 'menu_settings':
        logging.info("‚öôÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return await settings_menu(update, context)
    elif query.data == 'sync_google_calendar':
        logging.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Calendar")
        return await sync_google_calendar_handler(update, context)
    elif query.data == 'sync_google_forecast':
        logging.info("üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google –ø—Ä–æ–≥–Ω–æ–∑–∞")
        return await sync_google_forecast_handler(update, context)
    elif query.data == 'clean_duplicates':
        logging.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π")
        return await clean_duplicates_handler(update, context)
    else:
        logging.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {query.data}")
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return MAIN_MENU

async def sync_google_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Calendar."""
    query = update.callback_query
    await query.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    print("üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –í–´–ó–í–ê–ù!")
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Calendar")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await query.edit_message_text("üîÑ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Calendar**\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", parse_mode='Markdown')
    
    try:
        logging.info("üìû –í—ã–∑—ã–≤–∞—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text("üîÑ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Calendar**\n\nüìä –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...", parse_mode='Markdown')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        result = sheets_service.sync_calendar_with_google_calendar()
        logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        message_text = f"üéâ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n{result}\n\nüì± *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Calendar - —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã*"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n‚úÖ Google Calendar —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\nüìÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.",
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        import asyncio
        asyncio.create_task(delete_message_after_delay(context.bot, update.effective_chat.id, notification_msg.message_id, 5))
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
        message_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è**\n\n```\n{str(e)}\n```\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_notification_msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.",
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥ (–¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª –ø—Ä–æ—á–∏—Ç–∞—Ç—å)
        asyncio.create_task(delete_message_after_delay(context.bot, update.effective_chat.id, error_notification_msg.message_id, 8))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    return MAIN_MENU

async def sync_google_forecast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç —Å Google Calendar."""
    query = update.callback_query
    
    try:
        await query.answer("üí∞ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ answer –≤ sync_google_forecast: {e}")
    
    print("üí∞ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–û–ì–ù–û–ó–ê –í–´–ó–í–ê–ù!")
    logging.info("üí∞ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    try:
        await query.edit_message_text("üí∞ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google –ø—Ä–æ–≥–Ω–æ–∑–∞**\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", parse_mode='Markdown')
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí∞ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google –ø—Ä–æ–≥–Ω–æ–∑–∞**\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–ø–ª–∞—Ç...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode='Markdown'
            )
        except:
            pass
    
    try:
        logging.info("üìû –í—ã–∑—ã–≤–∞—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text("üí∞ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google –ø—Ä–æ–≥–Ω–æ–∑–∞**\n\nüìä –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ '–ü—Ä–æ–≥–Ω–æ–∑'...", parse_mode='Markdown')
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞
        result = sheets_service.sync_forecast_with_google_calendar()
        logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        message_text = f"üéâ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n{result}\n\nüí∞ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Calendar - –ø—Ä–æ–≥–Ω–æ–∑—ã –æ–ø–ª–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã*"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            notification_msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n‚úÖ Google –ø—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\nüí∞ –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ–ø–ª–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.",
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            import asyncio
            asyncio.create_task(delete_message_after_delay(context.bot, update.effective_chat.id, notification_msg.message_id, 5))
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ: {e}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}", exc_info=True)
        message_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞**\n\n```\n{str(e)}\n```\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            error_notification_msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.\n\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
            import asyncio
            asyncio.create_task(delete_message_after_delay(context.bot, update.effective_chat.id, error_notification_msg.message_id, 8))
        except Exception as notify_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {notify_error}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except:
            pass
    return MAIN_MENU

async def clean_duplicates_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π –≤ Google Calendar."""
    query = update.callback_query
    
    try:
        await query.answer("üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π...")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ answer –≤ clean_duplicates: {e}")
    
    print("üßπ –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ß–ò–°–¢–ö–ò –î–£–ë–õ–ï–ô –í–´–ó–í–ê–ù!")
    logging.info("üßπ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
    try:
        await query.edit_message_text("üßπ **–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ Google Calendar**\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", parse_mode='Markdown')
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üßπ **–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ Google Calendar**\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode='Markdown'
            )
        except:
            pass
    
    try:
        logging.info("üìû –í—ã–∑—ã–≤–∞—é —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text("üßπ **–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ Google Calendar**\n\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ...", parse_mode='Markdown')
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π
        result = sheets_service.clean_duplicate_events()
        logging.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        message_text = f"üéâ **–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n{result}\n\nüßπ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Calendar - –¥—É–±–ª–∏ —É–¥–∞–ª–µ–Ω—ã*"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            notification_msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüßπ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã.",
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            import asyncio
            asyncio.create_task(delete_message_after_delay(context.bot, update.effective_chat.id, notification_msg.message_id, 5))
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ: {e}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}", exc_info=True)
        message_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π**\n\n```\n{str(e)}\n```\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            error_notification_msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π.\n\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
            import asyncio
            asyncio.create_task(delete_message_after_delay(context.bot, update.effective_chat.id, error_notification_msg.message_id, 8))
        except Exception as notify_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ—á–∏—Å—Ç–∫–∏: {notify_error}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except:
            pass
    return MAIN_MENU

async def go_back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await start(update, context)

async def force_refresh_all_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    query = update.callback_query
    await query.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await query.edit_message_text("‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\nüîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", parse_mode='HTML')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
        import asyncio
        asyncio.create_task(update_data_in_background())
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ë–ï–ó –≤—ã–∑–æ–≤–∞ start (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ callback)
        await asyncio.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            weekly_summary = sheets_service.get_weekly_summary()
            if weekly_summary:
                stats = weekly_summary['attendance_stats']
                message_text = f"üìä <b>–°–í–û–î–ö–ê –ù–ê –ù–ï–î–ï–õ–Æ</b>\n"
                message_text += f"üìÖ {weekly_summary['week_start']} - {weekly_summary['week_end']}\n\n"
                
                message_text += f"üìö <b>–ó–ê–ù–Ø–¢–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ:</b>\n"
                message_text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}\n"
                message_text += f"‚Ä¢ ‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {stats['attended']}\n"
                message_text += f"‚Ä¢ ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['missed']}\n"
                message_text += f"‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['planned']}\n"
                message_text += f"‚Ä¢ üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {stats['attendance_rate']}%\n"
                
                # –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è
                if weekly_summary['lessons_this_week']:
                    message_text += f"\nüéØ <b>–ë–õ–ò–ñ–ê–ô–®–ò–ï –ó–ê–ù–Ø–¢–ò–Ø:</b>\n"
                    lessons_sorted = sorted(weekly_summary['lessons_this_week'], key=lambda x: x['date'])
                    for lesson in lessons_sorted[:5]:
                        status_emoji = "‚úÖ" if lesson.get('mark') == '–ü–æ—Å–µ—â–µ–Ω–∏–µ' else "üìÖ"
                        message_text += f"‚Ä¢ {status_emoji} {lesson['date']} {lesson['time']} - {lesson['child']} ({lesson['circle']})\n"
                    
                    if len(lessons_sorted) > 5:
                        message_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(lessons_sorted) - 5} –∑–∞–Ω—è—Ç–∏–π\n"
                
                # –ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç
                if weekly_summary['payments_this_week']:
                    message_text += f"\nüí∞ <b>–û–ü–õ–ê–¢–´ –ù–ê –ù–ï–î–ï–õ–Æ:</b>\n"
                    for payment in weekly_summary['payments_this_week'][:3]:
                        message_text += f"‚Ä¢ {payment['date']}: {payment['child']} - {payment['amount']} —Ä—É–±.\n"
                    
                    if len(weekly_summary['payments_this_week']) > 3:
                        message_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(weekly_summary['payments_this_week']) - 3} –æ–ø–ª–∞—Ç\n"
                else:
                    message_text += f"\nüí∞ <b>–û–ü–õ–ê–¢–´ –ù–ê –ù–ï–î–ï–õ–Æ:</b> –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç\n"
                
                message_text += f"\nüëã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            else:
                message_text = 'üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            message_text = 'üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        
        keyboard = [
            [InlineKeyboardButton("üìÑ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data="menu_subscriptions")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞", callback_data="menu_forecast")],
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return MAIN_MENU
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìÑ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data="menu_subscriptions")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞", callback_data="menu_forecast")],
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text('üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
        return MAIN_MENU

async def update_data_in_background():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    try:
        logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        logging.info("üìä –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...")
        calendar_count, calendar_errors = sheets_service.update_subscriptions_statistics()
        logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {calendar_count}")
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        logging.info("üí∞ –û–±–Ω–æ–≤–ª—è—é –ø—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞...")
        forecast_count, forecast_errors = sheets_service.update_full_forecast()
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {forecast_count}")
        
        # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Calendar (—Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
        await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        logging.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å Google Calendar...")
        try:
            calendar_result = sheets_service.sync_calendar_with_google_calendar()
            logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar_result[:100]}...")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        
        # 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å Google Calendar (—Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        logging.info("üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ —Å Google Calendar...")
        try:
            forecast_result = sheets_service.sync_forecast_with_google_calendar()
            logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_result[:100]}...")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        
        # 5. –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏ –≤ Google Calendar (—Ñ–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞)
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        logging.info("üßπ –û—á–∏—â–∞—é –¥—É–±–ª–∏ –≤ Google Calendar...")
        try:
            clean_result = sheets_service.clean_duplicate_events()
            logging.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π: {clean_result[:100]}...")
        except AttributeError as attr_error:
            logging.warning(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {attr_error}")
            logging.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}")
        
        logging.info("üéâ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def update_stats_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥–Ω–æ–∑...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        calendar_count, calendar_errors = sheets_service.update_all_calendars()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        forecast_count, skipped_forecasts = sheets_service.update_full_forecast()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = "‚úÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        message_text += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: <b>{calendar_count}</b>\n"
        message_text += f"üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{forecast_count}</b>\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        if calendar_errors:
            message_text += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:</b> {len(calendar_errors)}\n"
            for i, error in enumerate(calendar_errors[:2]):
                message_text += f"‚Ä¢ {error}\n"
            if len(calendar_errors) > 2:
                message_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(calendar_errors) - 2}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        if skipped_forecasts:
            message_text += f"\n‚ö†Ô∏è <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ:</b> {len(skipped_forecasts)}\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            for i, error in enumerate(skipped_forecasts[:2]):
                message_text += f"‚Ä¢ {error}\n"
            if len(skipped_forecasts) > 2:
                message_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(skipped_forecasts) - 2}\n"
        
        message_text += "\nüìã <b>–ß—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:</b>\n"
        message_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã\n"
        message_text += "‚Ä¢ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π\n"
        message_text += "‚Ä¢ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç –Ω–∞ 2 –º–µ—Å—è—Ü–∞\n"
        
    except Exception as e:
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n{e}"
    
    keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def update_subscriptions_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã'."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        updated_count, errors = sheets_service.update_subscriptions_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = "‚úÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        message_text += f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: <b>{updated_count}</b>\n"
        
        if errors:
            message_text += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏:</b> {len(errors)}\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
            for i, error in enumerate(errors[:3]):
                message_text += f"‚Ä¢ {error}\n"
            if len(errors) > 3:
                message_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(errors) - 3}\n"
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar —É–¥–∞–ª–µ–Ω–∞
        calendar_status = "‚ûñ"
        
        message_text += "\nüìã <b>–ß—Ç–æ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b>\n"
        message_text += "‚Ä¢ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤\n"
        message_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è: –ü—Ä–æ—à–ª–æ/–û—Å—Ç–∞–ª–æ—Å—å/–ü—Ä–æ–ø—É—â–µ–Ω–æ\n"
        message_text += "‚Ä¢ –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–æ –±—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        message_text += "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å—ã –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ '–° –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏'\n"
        message_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        message_text += f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar: –æ—Ç–∫–ª—é—á–µ–Ω–∞\n"
        
    except Exception as e:
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:</b>\n\n{e}"
    
    keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU


async def google_calendar_sync_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        message_text = "üìÖ <b>Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n\n"
        message_text += "‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n"
        message_text += "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
        
    except Exception as e:
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n\n{e}"
    
    keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def fix_duplicate_ids_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –∑–∞–Ω—è—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await query.edit_message_text("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –∑–∞–Ω—è—Ç–∏–π...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π
        result = sheets_service.fix_duplicate_lesson_ids()
        
        if result:
            message_text = "‚úÖ <b>–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n"
            message_text += "üîß –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID\n"
            message_text += "üìä ID –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞—è —Å 1\n"
            message_text += "‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫\n\n"
            message_text += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."
        else:
            message_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID</b>\n\n"
            message_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ."
        
    except Exception as e:
        message_text = f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ID:</b>\n\n{e}"
    
    keyboard = [
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU
    
async def forecast_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã...")

    logging.info("üîç –ó–∞–ø—É—Å–∫ forecast_menu_handler")
    planned_payments = sheets_service.get_planned_payments()
    logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç: {len(planned_payments)}")
    
    if not planned_payments:
        message_text = "üìä <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        message_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–ø–ª–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'."
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—ã –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º (—Ä–µ–±–µ–Ω–æ–∫ + –∫—Ä—É–∂–æ–∫)
        grouped_payments = {}
        total_sum = 0
        
        logging.info(f"üìã –ù–∞—á–∏–Ω–∞—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É {len(planned_payments)} –æ–ø–ª–∞—Ç")
        for payment in planned_payments:
            key = payment['key']  # child_name|circle_name
            logging.info(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø–ª–∞—Ç—É —Å –∫–ª—é—á–æ–º: '{key}'")
            if key not in grouped_payments:
                grouped_payments[key] = {
                    'child_name': payment['child_name'],
                    'circle_name': payment['circle_name'],
                    'payments': []
                }
            grouped_payments[key]['payments'].append(payment)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
            try:
                budget = float(payment['budget'])
                total_sum += budget
                logging.info(f"  –î–æ–±–∞–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç: {budget}")
            except Exception as e:
                logging.warning(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±—é–¥–∂–µ—Ç–∞ '{payment['budget']}': {e}")
        
        logging.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(grouped_payments)}, –æ–±—â–∞—è —Å—É–º–º–∞: {total_sum}")
        
        message_text = "üìä <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        message_text += f"–ù–∞–π–¥–µ–Ω–æ <b>{len(planned_payments)}</b> –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç\n"
        message_text += f"–û–±—â–∞—è —Å—É–º–º–∞: <b>{total_sum:.0f} —Ä—É–±.</b>\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∞–º–∏:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        keyboard = []
        logging.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è {len(grouped_payments)} –≥—Ä—É–ø–ø")
        for key, group in grouped_payments.items():
            child_name = group['child_name']
            circle_name = group['circle_name']
            payment_count = len(group['payments'])
            
            button_text = f"{child_name} - {circle_name} ({payment_count})"
            callback_data = f"forecast_sub_{key}"
            logging.info(f"  –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É: '{button_text}' -> '{callback_data}'")
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(keyboard)} –∫–Ω–æ–ø–æ–∫ (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥')")
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def forecast_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    logging.info(f"üîç forecast_subscription_handler –í–´–ó–í–ê–ù! callback_data = '{query.data}'")
    logging.info(f"üîç User ID: {query.from_user.id}, Chat ID: {query.message.chat.id}")
    await query.answer("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ callback_data
        subscription_key = query.data.replace("forecast_sub_", "")
        logging.info(f"üîç forecast_subscription_handler: subscription_key = '{subscription_key}'")
        
        child_name, circle_name = subscription_key.split("|")
        logging.info(f"üìã –†–µ–±–µ–Ω–æ–∫: {child_name}, –ö—Ä—É–∂–æ–∫: {circle_name}")
        
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã
        logging.info("üìä –ü–æ–ª—É—á–∞—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã...")
        planned_payments = sheets_service.get_planned_payments()
        logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(planned_payments)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        subscription_payments = [
            payment for payment in planned_payments 
            if payment['key'] == subscription_key
        ]
        logging.info(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(subscription_payments)} –æ–ø–ª–∞—Ç –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ forecast_subscription_handler: {e}")
        import traceback
        logging.error(traceback.format_exc())
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_forecast")]])
        )
        return MAIN_MENU
    
    if not subscription_payments:
        message_text = f"üìä <b>{child_name} - {circle_name}</b>\n\n"
        message_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."
        keyboard = [
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        message_text = f"üìä <b>{child_name} - {circle_name}</b>\n\n"
        message_text += f"–ù–∞–π–¥–µ–Ω–æ <b>{len(subscription_payments)}</b> –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç:\n\n"
        
        total_sum = 0
        for i, payment in enumerate(subscription_payments, 1):
            budget = payment.get('budget', 0)
            try:
                budget_float = float(budget)
                total_sum += budget_float
            except:
                budget_float = 0
            
            message_text += f"{i}. üìÖ <b>{payment['payment_date']}</b> - {budget} —Ä—É–±.\n"
        
        message_text += f"\nüí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_sum:.0f} —Ä—É–±.\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç)
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data=f"renew_subscription_{subscription_key}")])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def renewal_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞...")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ callback_data
        subscription_key = query.data.replace("renew_subscription_", "")
        child_name, circle_name = subscription_key.split("|")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['renewal_subscription_key'] = subscription_key
        context.user_data['renewal_child_name'] = child_name
        context.user_data['renewal_circle_name'] = circle_name
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        current_sub = sheets_service.get_current_subscription_by_child_circle(child_name, circle_name)
        if not current_sub:
            await query.edit_message_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è {child_name} - {circle_name}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_forecast")]])
            )
            return MAIN_MENU
        
        context.user_data['current_subscription'] = current_sub
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        planned_payments = sheets_service.get_planned_payments()
        subscription_payments = [p for p in planned_payments if p['key'] == subscription_key]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        if subscription_payments:
            subscription_payments.sort(key=lambda x: x['payment_date'])
        
        message_text = f"üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</b>\n\n"
        message_text += f"üë§ <b>–†–µ–±–µ–Ω–æ–∫:</b> {child_name}\n"
        message_text += f"üé® <b>–ö—Ä—É–∂–æ–∫:</b> {circle_name}\n\n"
        message_text += f"üìã <b>–¢–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç:</b>\n"
        message_text += f"‚Ä¢ –¢–∏–ø: {current_sub.get('–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')}\n"
        message_text += f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {current_sub.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '')} —Ä—É–±.\n"
        message_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π: {current_sub.get('–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π', '')}\n\n"
        
        if subscription_payments:
            message_text += f"üí∞ <b>–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç:</b>\n"
            for payment in subscription_payments:
                message_text += f"üí≥ {payment['payment_date']} - {payment['budget']} —Ä—É–±.\n"
            message_text += "\n"
        
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –¥–∞—Ç—ã
        keyboard = []
        for payment in subscription_payments:
            button_text = f"üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å —Å {payment['payment_date']}"
            callback_data = f"renewal_use_date_{payment['payment_date']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"
        keyboard.append([InlineKeyboardButton("üìÜ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="renewal_select_custom_date")])
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"forecast_sub_{subscription_key}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return RENEWAL_SELECT_DATE_TYPE
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ renewal_subscription_handler: {e}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_forecast")]])
        )
        return MAIN_MENU

async def renewal_date_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("renewal_use_date_"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é –¥–∞—Ç—É
        selected_date = query.data.replace("renewal_use_date_", "")
        context.user_data['renewal_start_date'] = selected_date
        return await renewal_confirm_handler(update, context)
    
    elif query.data == "renewal_select_custom_date":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        from datetime import datetime
        current_date = datetime.now()
        
        message_text = f"üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</b>\n\n"
        message_text += f"üë§ <b>–†–µ–±–µ–Ω–æ–∫:</b> {context.user_data['renewal_child_name']}\n"
        message_text += f"üé® <b>–ö—Ä—É–∂–æ–∫:</b> {context.user_data['renewal_circle_name']}\n\n"
        message_text += "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:"
        
        calendar_keyboard = create_calendar_keyboard(current_date.year, current_date.month)
        await query.edit_message_text(message_text, reply_markup=calendar_keyboard, parse_mode='HTML')
        return RENEWAL_SELECT_CUSTOM_DATE
    
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
        subscription_key = context.user_data.get('renewal_subscription_key', '')
        query.data = f"forecast_sub_{subscription_key}"
        return await forecast_subscription_handler(update, context)

async def renewal_custom_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("cal_day_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å
        day = int(query.data.replace("cal_day_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ
        from datetime import datetime
        current_date = datetime.now()
        selected_date = datetime(current_date.year, current_date.month, day)
        
        context.user_data['renewal_start_date'] = selected_date.strftime('%d.%m.%Y')
        return await renewal_confirm_handler(update, context)
    
    elif query.data.startswith("cal_month_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        parts = query.data.split("_")
        year = int(parts[2])
        month = int(parts[3])
        
        message_text = f"üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</b>\n\n"
        message_text += f"üë§ <b>–†–µ–±–µ–Ω–æ–∫:</b> {context.user_data['renewal_child_name']}\n"
        message_text += f"üé® <b>–ö—Ä—É–∂–æ–∫:</b> {context.user_data['renewal_circle_name']}\n\n"
        message_text += "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:"
        
        calendar_keyboard = create_calendar_keyboard(year, month)
        await query.edit_message_text(message_text, reply_markup=calendar_keyboard, parse_mode='HTML')
        return RENEWAL_SELECT_CUSTOM_DATE
    
    else:
        # –û—Ç–º–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–∞—Ç—ã
        query.data = "renewal_select_custom_date"
        return await renewal_date_type_handler(update, context)

async def renewal_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    
    try:
        current_sub = context.user_data['current_subscription']
        start_date = context.user_data['renewal_start_date']
        child_name = context.user_data['renewal_child_name']
        circle_name = context.user_data['renewal_circle_name']
        
        message_text = f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</b>\n\n"
        message_text += f"üë§ <b>–†–µ–±–µ–Ω–æ–∫:</b> {child_name}\n"
        message_text += f"üé® <b>–ö—Ä—É–∂–æ–∫:</b> {circle_name}\n\n"
        message_text += f"üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>\n"
        message_text += f"‚Ä¢ –¢–∏–ø: {current_sub.get('–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')}\n"
        message_text += f"‚Ä¢ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {current_sub.get('–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '')}\n"
        message_text += f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {current_sub.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '')} —Ä—É–±.\n"
        message_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π: {current_sub.get('–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π', '')}\n"
        message_text += f"‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{start_date}</b>\n\n"
        message_text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°—Ç–∞—Ä—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ.\n\n"
        message_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="renewal_confirm_create")],
            [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="renewal_select_custom_date")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"forecast_sub_{context.user_data['renewal_subscription_key']}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return RENEWAL_CONFIRM
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ renewal_confirm_handler: {e}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_forecast")]])
        )
        return MAIN_MENU

async def renewal_create_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç...")
    
    try:
        current_sub = context.user_data['current_subscription']
        start_date_str = context.user_data['renewal_start_date']
        child_name = context.user_data['renewal_child_name']
        circle_name = context.user_data['renewal_circle_name']
        subscription_key = context.user_data['renewal_subscription_key']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        from datetime import datetime
        start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        current_sub_id = current_sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
        logging.info(f"üîç –ü–æ–ª—É—á–µ–Ω ID —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: '{current_sub_id}'")
        logging.info(f"üîç –¢–∏–ø ID: {type(current_sub_id)}")
        logging.info(f"üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {current_sub}")
        logging.info(f"üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ current_sub: {list(current_sub.keys()) if current_sub else 'None'}")
        
        schedule_data = sheets_service.get_subscription_schedule(current_sub_id)
        
        if not schedule_data:
            await query.edit_message_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {current_sub_id}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_forecast")]])
            )
            return MAIN_MENU
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        ru_months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']
        date_part = f"{start_date.day}{ru_months[start_date.month - 1]}"
        new_sub_id = f"{date_part}.{child_name}{circle_name}-{start_date.year % 100}"
        
        # –®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ create_full_subscription
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º schedule_data –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_schedule = []
        for item in schedule_data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Python –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6) –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã (1-7)
            day_num = item['day'] + 1
            formatted_schedule.append({
                'day_num': day_num,
                'start_time': item['start_time'],
                'end_time': item['end_time']
            })
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"üîç –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:")
        logging.info(f"  üìã –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: '{current_sub.get('–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')}'")
        logging.info(f"  üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: '{current_sub.get('–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '')}'")
        logging.info(f"üîë –í–°–ï –∫–ª—é—á–∏: {list(current_sub.keys())}")
        logging.info(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: '{current_sub.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '')}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        new_sub_data = {
            'child_name': child_name,
            'circle_name': circle_name,
            'sub_type': current_sub.get('–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', ''),
            'payment_type': current_sub.get('–û–ø–ª–∞—Ç–∞', '') or current_sub.get('–¢–∏–ø –æ–ø–ª–∞—Ç—ã', ''),
            'cost': current_sub.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', ''),
            'total_classes': current_sub.get('–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π', ''),
            'remaining_classes': current_sub.get('–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π', ''),  # –ù–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç - –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
            'start_date': start_date,
            'schedule': formatted_schedule
        }
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        await query.edit_message_text("üí∞ –ü–µ—Ä–µ–Ω–æ—à—É –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –≤ –û–ø–ª–∞—á–µ–Ω–æ...")
        transfer_result = sheets_service.transfer_forecast_to_paid(subscription_key, start_date_str)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        await query.edit_message_text("‚ú® –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"üîç –ü–µ—Ä–µ–¥–∞—é –≤ create_full_subscription:")
        logging.info(f"  üìã formatted_schedule: {formatted_schedule}")
        logging.info(f"  üìã new_sub_data['schedule']: {new_sub_data['schedule']}")
        
        result = sheets_service.create_full_subscription(new_sub_data)
        
        if "‚úÖ" in result:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            asyncio.create_task(update_after_subscription_creation())
            
            success_message = f"üéâ <b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!</b>\n\n"
            success_message += f"üë§ <b>–†–µ–±–µ–Ω–æ–∫:</b> {child_name}\n"
            success_message += f"üé® <b>–ö—Ä—É–∂–æ–∫:</b> {circle_name}\n"
            success_message += f"üìÖ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date_str}\n\n"
            success_message += f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n{result}\n\n"
            success_message += f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:</b> {transfer_result}\n\n"
            success_message += "üîÑ <b>–ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.</b>"
            
            keyboard = [
                [InlineKeyboardButton("üìä –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞", callback_data="menu_forecast")],
                [InlineKeyboardButton("üìÑ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data="menu_subscriptions")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            success_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>\n\n{result}"
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="renewal_confirm_create")],
                [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(success_message, reply_markup=reply_markup, parse_mode='HTML')
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        renewal_keys = [k for k in context.user_data.keys() if k.startswith('renewal_')]
        for key in renewal_keys:
            context.user_data.pop(key, None)
        
        return MAIN_MENU
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ renewal_create_handler: {e}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_forecast")]])
        )
        return MAIN_MENU

async def mark_payment_paid_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø–ª–∞—Ç—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ'."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ callback_data
    row_index = int(query.data.replace("mark_payment_", ""))
    
    await query.edit_message_text("üîÑ –ü–µ—Ä–µ–º–µ—â–∞—é –æ–ø–ª–∞—Ç—É –≤ –ª–∏—Å—Ç '–û–ø–ª–∞—á–µ–Ω–æ'...")
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –ª–∏—Å—Ç "–û–ø–ª–∞—á–µ–Ω–æ"
    success, message = sheets_service.move_payment_to_paid(row_index)
    
    if success:
        message_text = f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è!</b>\n\n{message}"
    else:
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n{message}"
    
    keyboard = [
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def mark_all_payments_paid_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ –æ–ø–ª–∞—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ callback_data
    subscription_key = query.data.replace("mark_paid_all_", "")
    child_name, circle_name = subscription_key.split("|")
    
    await query.edit_message_text(f"üîÑ –û—Ç–º–µ—á–∞—é –≤—Å–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è {child_name} - {circle_name} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ...")
    
    # –û—Ç–º–µ—á–∞–µ–º –æ–ø–ª–∞—Ç—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
    success, message = sheets_service.mark_payments_as_paid(subscription_key)
    
    if success:
        message_text = f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
        message_text += f"<b>{child_name} - {circle_name}</b>\n\n"
        message_text += message
    else:
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
        message_text += f"<b>{child_name} - {circle_name}</b>\n\n"
        message_text += message
    
    keyboard = [
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def manage_individual_payments_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ callback_data
    subscription_key = query.data.replace("manage_payments_", "")
    child_name, circle_name = subscription_key.split("|")
    
    await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–ª–∞—Ç—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    planned_payments = sheets_service.get_planned_payments()
    subscription_payments = [
        payment for payment in planned_payments 
        if payment['key'] == subscription_key
    ]
    
    if not subscription_payments:
        message_text = f"üìä <b>{child_name} - {circle_name}</b>\n\n"
        message_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        keyboard = [
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        message_text = f"üìä <b>{child_name} - {circle_name}</b>\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π:\n\n"
        
        keyboard = []
        for i, payment in enumerate(subscription_payments):
            try:
                budget = float(payment['budget'])
                button_text = f"{payment['payment_date']} - {budget:.0f} —Ä—É–±."
            except:
                button_text = f"{payment['payment_date']} - {payment['budget']} —Ä—É–±."
            
            callback_data = f"mark_single_paid_{payment['row_index']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É", callback_data=f"forecast_sub_{subscription_key}")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

async def mark_single_payment_paid_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ—á–∞–µ—Ç –æ–¥–Ω—É –æ–ø–ª–∞—Ç—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ callback_data
    row_index = int(query.data.replace("mark_single_paid_", ""))
    
    await query.edit_message_text("üîÑ –û—Ç–º–µ—á–∞—é –æ–ø–ª–∞—Ç—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é...")
    
    # –û—Ç–º–µ—á–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é
    success, message = sheets_service.mark_single_payment_as_paid(row_index)
    
    if success:
        message_text = f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n{message}"
    else:
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n{message}"
    
    keyboard = [
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="menu_forecast")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

# === –ú–µ–Ω—é –ö–∞–ª–µ–Ω–¥–∞—Ä—è ===
def generate_calendar_keyboard(year, month, lessons_by_date):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π."""
    import calendar
    from datetime import datetime, date
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    month_names = [
        '', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ]
    
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    keyboard.append([InlineKeyboardButton(f"üìÖ {month_names[month]} {year}", callback_data="ignore")])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    keyboard.append([
        InlineKeyboardButton("–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton("–í—Ç", callback_data="ignore"),
        InlineKeyboardButton("–°—Ä", callback_data="ignore"),
        InlineKeyboardButton("–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton("–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton("–°–±", callback_data="ignore"),
        InlineKeyboardButton("–í—Å", callback_data="ignore"),
    ])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                date_str = f"{day:02d}.{month:02d}.{year}"
                lessons_on_date = lessons_by_date.get(date_str, [])
                
                # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
                planned_lessons_count = 0
                for lesson in lessons_on_date:
                    status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '').lower()
                    if status == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
                        planned_lessons_count += 1
                
                if planned_lessons_count > 0:
                    # –ï—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    button_text = f"{day}üî∏"
                    callback_data = f"calendar_date_{date_str}"
                else:
                    # –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π (–Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ/–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ)
                    button_text = str(day)
                    callback_data = f"calendar_date_{date_str}"
                
                row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        keyboard.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"calendar_nav_{prev_year}_{prev_month}"),
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="calendar_today"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"calendar_nav_{next_year}_{next_month}"),
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return keyboard

async def calendar_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        from datetime import datetime
        import logging
        
        logging.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–Ω—è—Ç–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            lessons = sheets_service.get_calendar_lessons()
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {len(lessons) if lessons else 0}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
            if "429" in str(e):
                error_text += "\n\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Google Sheets API.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            else:
                error_text += f"\n\n{e}"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="menu_calendar")],
                [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_text, reply_markup=reply_markup)
            return MAIN_MENU
        
        if not lessons:
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –ø—É—Å—Ç.\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã.", reply_markup=reply_markup)
            return MAIN_MENU
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–Ω—è—Ç–∏—è
        lessons_by_date = {}
        valid_lessons_count = 0
        
        for lesson in lessons:
            date_str = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
            if date_str and date_str.strip():
                if date_str not in lessons_by_date:
                    lessons_by_date[date_str] = []
                lessons_by_date[date_str].append(lesson)
                valid_lessons_count += 1
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å –¥–∞—Ç–∞–º–∏: {valid_lessons_count}")
        logging.info(f"üìÖ –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–∞–º: {len(lessons_by_date)} –¥–∞—Ç")
        
        if not lessons_by_date:
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π –ø—É—Å—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", reply_markup=reply_markup)
            return MAIN_MENU
        
        if lessons_by_date:
            logging.info(f"–ü–µ—Ä–≤—ã–µ 5 –¥–∞—Ç: {list(lessons_by_date.keys())[:5]}")
            first_date = list(lessons_by_date.keys())[0]
            logging.info(f"–ó–∞–Ω—è—Ç–∏–π –Ω–∞ {first_date}: {len(lessons_by_date[first_date])}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        today = datetime.now()
        year = context.user_data.get('calendar_year', today.year)
        month = context.user_data.get('calendar_month', today.month)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['lessons_by_date'] = lessons_by_date
        context.user_data['calendar_year'] = year
        context.user_data['calendar_month'] = month
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        keyboard = generate_calendar_keyboard(year, month, lessons_by_date)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "üìÖ *–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π*\n\n"
        message_text += "‚Ä¢ –î–Ω–∏ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º üî∏\n"
        message_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è\n"
        message_text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π"
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        return INTERACTIVE_CALENDAR
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", reply_markup=reply_markup)
        return MAIN_MENU

async def calendar_navigation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    query = update.callback_query
    
    try:
        from datetime import datetime
        
        if query.data == "calendar_today":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
            today = datetime.now()
            current_year = context.user_data.get('calendar_year')
            current_month = context.user_data.get('calendar_month')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏ –º—ã —É–∂–µ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            if current_year == today.year and current_month == today.month:
                # –£–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.answer("üìÖ –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
                return INTERACTIVE_CALENDAR
            
            await query.answer()
            context.user_data['calendar_year'] = today.year
            context.user_data['calendar_month'] = today.month
        elif query.data.startswith("calendar_nav_"):
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
            await query.answer()
            parts = query.data.split("_")
            year = int(parts[2])
            month = int(parts[3])
            context.user_data['calendar_year'] = year
            context.user_data['calendar_month'] = month
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        lessons_by_date = context.user_data.get('lessons_by_date', {})
        year = context.user_data['calendar_year']
        month = context.user_data['calendar_month']
        
        keyboard = generate_calendar_keyboard(year, month, lessons_by_date)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "üìÖ *–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π*\n\n"
        message_text += "‚Ä¢ –î–Ω–∏ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º üî∏\n"
        message_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è\n"
        message_text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π"
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        return INTERACTIVE_CALENDAR
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}", reply_markup=reply_markup)
        return MAIN_MENU

async def select_calendar_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        date_str = query.data.replace("calendar_date_", "")
        context.user_data['selected_date'] = date_str
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        lessons_by_date = context.user_data.get('lessons_by_date', {})
        lessons_on_date = lessons_by_date.get(date_str, [])
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}")
        logging.info(f"–í—Å–µ–≥–æ –¥–∞—Ç –≤ lessons_by_date: {len(lessons_by_date)}")
        logging.info(f"–ó–∞–Ω—è—Ç–∏–π –Ω–∞ –¥–∞—Ç—É {date_str}: {len(lessons_on_date)}")
        if lessons_by_date:
            logging.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {list(lessons_by_date.keys())[:5]}")  # –ü–µ—Ä–≤—ã–µ 5 –¥–∞—Ç
        
        if not lessons_on_date:
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="menu_calendar")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üìÖ –ù–∞ {date_str} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.", reply_markup=reply_markup)
            return INTERACTIVE_CALENDAR
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        keyboard = []
        message_text = f"üìÖ *–ó–∞–Ω—è—Ç–∏—è –Ω–∞ {date_str}*\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–Ω—è—Ç–∏–∏
        for i, lesson in enumerate(lessons_on_date):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ ID –∑–∞–Ω—è—Ç–∏—è, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü ‚Ññ –ø—É—Å—Ç–æ–π
            lesson_id = lesson.get('‚Ññ', '')
            if not lesson_id:
                # –ï—Å–ª–∏ ID –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å + –¥–∞—Ç—É + –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                lesson_id = f"{date_str}_{i}_{lesson.get('–†–µ–±–µ–Ω–æ–∫', '')}"
            
            subscription_id = lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            child_name = lesson.get('–†–µ–±–µ–Ω–æ–∫', '')
            start_time = lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '')
            end_time = lesson.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '')
            status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')
            mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '')
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import logging
            logging.info(f"–ó–∞–Ω—è—Ç–∏–µ {i+1}: lesson_id='{lesson_id}', child_name='{child_name}', subscription_id='{subscription_id}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
            sub_details = sheets_service.get_subscription_details(subscription_id)
            circle_name = sub_details.get('circle_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if sub_details else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–Ω—è—Ç–∏—è
            lesson_text = f"*{child_name}* - {circle_name}"
            
            if start_time and end_time:
                lesson_text += f"\nüïê {start_time} - {end_time}"
            if status:
                lesson_text += f"\nüìä {status}"
            if mark:
                lesson_text += f"\n‚úÖ {mark}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
            if sub_details:
                lesson_text += f"\n\nüìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:*"
                lesson_text += f"\nüÜî ID: {subscription_id}"
                if sub_details.get('start_date'):
                    lesson_text += f"\nüìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {sub_details['start_date']}"
                if sub_details.get('end_date_forecast'):
                    lesson_text += f"\nüîÆ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑: {sub_details['end_date_forecast']}"
                if sub_details.get('total_classes'):
                    lesson_text += f"\nüìä –ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π: {sub_details['total_classes']}"
                if sub_details.get('attended_classes'):
                    lesson_text += f"\n‚úÖ –ü—Ä–æ—à–ª–æ –∑–∞–Ω—è—Ç–∏–π: {sub_details['attended_classes']}"
                if sub_details.get('remaining_classes'):
                    lesson_text += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {sub_details['remaining_classes']}"
                if sub_details.get('missed_classes'):
                    lesson_text += f"\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {sub_details['missed_classes']}"
                if sub_details.get('cost'):
                    lesson_text += f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {sub_details['cost']} —Ä—É–±."
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç
                payment_dates = sheets_service.get_forecast_payment_dates(child_name, circle_name)
                if payment_dates:
                    lesson_text += f"\n\nüí∞ *–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç:*"
                    for date in payment_dates:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã
                        lesson_text += f"\nüí≥ {date}"
            
            message_text += f"{i+1}. {lesson_text}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∏ –∫—Ä—É–∂–∫–æ–º
            button_text = f"{child_name} - {circle_name}"
            if mark:
                button_text += f" ‚úÖ"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"lesson_select_{lesson_id}")])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="menu_calendar")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        return SELECT_LESSON_FROM_DATE
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="menu_calendar")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–Ω—è—Ç–∏–π: {e}", reply_markup=reply_markup)
        return INTERACTIVE_CALENDAR

async def select_lesson_from_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–º–µ—Ç–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logging.info(f"select_lesson_from_date: callback_data = {query.data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è
        lesson_id = query.data.replace("lesson_select_", "")
        context.user_data['selected_lesson_id'] = lesson_id
        
        logging.info(f"–í—ã–±—Ä–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å ID: {lesson_id}")
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.user_data.get('selected_lesson_id')}")
        logging.info(f"–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context.user_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
        lessons_by_date = context.user_data.get('lessons_by_date', {})
        selected_date = context.user_data.get('selected_date', '')
        lessons_on_date = lessons_by_date.get(selected_date, [])
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ
        current_lesson = None
        for lesson in lessons_on_date:
            if str(lesson.get('‚Ññ', '')) == str(lesson_id):
                current_lesson = lesson
                break
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è –∏–∑ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        attendance_statuses = sheets_service.get_handbook_items("–°—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è")
        
        if not attendance_statuses:
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∑–∞–Ω—è—Ç–∏—è–º", callback_data="menu_calendar")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.", reply_markup=reply_markup)
            return SELECT_LESSON_FROM_DATE
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å —ç–º–æ–¥–∑–∏
        keyboard = []
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —ç–º–æ–¥–∑–∏
        status_emojis = {
            '–ø–æ—Å–µ—â–µ–Ω–∏–µ': '‚úÖ',
            '–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)': '‚ùå',
            '–ø—Ä–æ–ø—É—Å–∫': '‚ùå',
            '–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)': 'ü§í',
            '–ø–µ—Ä–µ–Ω–æ—Å': 'üîÑ',
            '–æ—Ç–º–µ–Ω–∞': 'üö´',
            '–±–æ–ª–µ–∑–Ω—å': 'ü§í',
            '—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞': 'üìã',
            '–Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞': '‚ö†Ô∏è'
        }
        
        for status in attendance_statuses:
            if status.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                emoji = ''
                status_lower = status.lower().strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if status_lower in status_emojis:
                    emoji = status_emojis[status_lower]
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    for key, value in status_emojis.items():
                        if key in status_lower:
                            emoji = value
                            break
                
                # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                if not emoji:
                    emoji = 'üìù'
                
                button_text = f"{emoji} {status}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"attendance_mark_{lesson_id}|||{status}")])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∑–∞–Ω—è—Ç–∏—è–º", callback_data=f"calendar_date_{context.user_data.get('selected_date', '')}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"‚úÖ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–µ—â–µ–Ω–∏—è*\n\n"
        
        if current_lesson:
            child_name = current_lesson.get('–†–µ–±–µ–Ω–æ–∫', '')
            subscription_id = current_lesson.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
            start_time = current_lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '')
            end_time = current_lesson.get('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
            sub_details = sheets_service.get_subscription_details(subscription_id)
            circle_name = sub_details.get('circle_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if sub_details else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            message_text += f"üë§ *–†–µ–±–µ–Ω–æ–∫:* {child_name}\n"
            message_text += f"üé® *–ö—Ä—É–∂–æ–∫:* {circle_name}\n"
            message_text += f"üÜî *ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:* {subscription_id}\n"
            message_text += f"üìÖ *–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è:* {selected_date}\n"
            if start_time and end_time:
                message_text += f"üïê *–í—Ä–µ–º—è:* {start_time} - {end_time}\n"
        else:
            message_text += f"–ó–∞–Ω—è—Ç–∏–µ ID: {lesson_id}\n"
            message_text += f"–î–∞—Ç–∞: {selected_date}\n"
        
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è:"
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        return SELECT_ATTENDANCE_MARK
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="menu_calendar")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}", reply_markup=reply_markup)
        return INTERACTIVE_CALENDAR

async def save_attendance_mark(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    
    try:
        # –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        import logging
        logging.info("=" * 80)
        logging.info("üîç –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–ú–ï–¢–ö–ò –ü–û–°–ï–©–ï–ù–ò–Ø")
        logging.info(f"üì± Chat ID: {query.message.chat_id}")
        logging.info(f"üì® Message ID: {query.message.message_id}")
        logging.info(f"üë§ User ID: {query.from_user.id}")
        logging.info(f"üìã –ü–æ–ª–Ω—ã–π callback_data: '{query.data}'")
        logging.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è –∏ –æ—Ç–º–µ—Ç–∫—É –∏–∑ callback_data
        callback_parts = query.data.replace("attendance_mark_", "").split("|||", 1)
        logging.info(f"üîß –ß–∞—Å—Ç–∏ callback_data –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {callback_parts}")
        
        if len(callback_parts) == 2:
            lesson_id, attendance_mark = callback_parts
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
            logging.info(f"   üìù lesson_id: '{lesson_id}'")
            logging.info(f"   ‚úèÔ∏è attendance_mark: '{attendance_mark}'")
        else:
            lesson_id = None
            attendance_mark = query.data.replace("attendance_mark_", "")
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data:")
            logging.error(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {len(callback_parts)}")
            logging.error(f"   üìã –ß–∞—Å—Ç–∏: {callback_parts}")
            logging.error(f"   üìù attendance_mark (fallback): '{attendance_mark}'")

        logging.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        logging.info(f"   üìù lesson_id: '{lesson_id}'")
        logging.info(f"   ‚úèÔ∏è attendance_mark: '{attendance_mark}'")
        
        if not lesson_id:
            logging.error("‚ùå ID –∑–∞–Ω—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ callback_data")
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ")
            
            # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
            error_text += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–Ω—è—Ç–∏—è.\n"
            error_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π."
            
            keyboard = [[InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_text, reply_markup=reply_markup, parse_mode='HTML')
            logging.info("üîö –ó–ê–í–ï–†–®–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—Ç –∫ MAIN_MENU")
            return MAIN_MENU
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–ï–ó query.answer() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–º–µ—Ç–∫–∏ –±–µ–∑ answer –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è timeout")
        
        processing_message = f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
        processing_message += f"‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞:</b> {attendance_mark}\n"
        processing_message += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets...\n\n"
        processing_message += "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        
        try:
            await query.edit_message_text(processing_message, parse_mode='HTML')
        except Exception as edit_error:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.message.reply_text(processing_message, parse_mode='HTML')
            except Exception as reply_error:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {reply_error}")
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –≤ Google Sheets
        logging.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ '{attendance_mark}' –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
        success = sheets_service.update_lesson_mark(lesson_id, attendance_mark)
        
        if not success:
            error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏</b>\n\n"
            error_message += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É '{attendance_mark}' –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}.\n"
            error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_message, reply_markup=reply_markup, parse_mode='HTML')
            return MAIN_MENU
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        processing_message = f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
        processing_message += f"‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b> {attendance_mark}\n"
        processing_message += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...\n\n"
        processing_message += "‚è≥ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
        
        await query.edit_message_text(processing_message, parse_mode='HTML')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await update_data_in_background()
            logging.info("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PUSH-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            success_message = f"üéâ <b>–£–°–ü–ï–®–ù–û!</b>\n\n"
            success_message += f"‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b> {attendance_mark}\n"
            success_message += f"üìä <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n"
            success_message += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤\n"
            success_message += "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞\n"
            success_message += "‚Ä¢ Google Calendar —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
            success_message += "‚Ä¢ –î—É–±–ª–∏ –æ—á–∏—â–µ–Ω—ã\n\n"
            success_message += "üöÄ <b>–ì–æ—Ç–æ–≤–æ!</b>"
            
            await query.edit_message_text(success_message, parse_mode='HTML')
            
            # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            
            # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
            logging.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            success_text += f"üìù <b>–û—Ç–º–µ—Ç–∫–∞:</b> {attendance_mark}\n"
            success_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            success_text += "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é..."
            
            await query.edit_message_text(success_text, parse_mode='HTML')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await asyncio.sleep(1.5)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                return await calendar_menu(update, context)
                
            except Exception as calendar_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {calendar_error}")
                # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
                fallback_text = f"‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞ '{attendance_mark}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
                fallback_text += "üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                fallback_text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é:"
                
                keyboard = [[InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(fallback_text, reply_markup=reply_markup, parse_mode='HTML')
                return MAIN_MENU
            
        except Exception as update_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {update_error}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            error_message = f"‚ö†Ô∏è <b>–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
            error_message += f"‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞:</b> {attendance_mark} - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
            error_message += f"‚ùå <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b> –û—à–∏–±–∫–∞\n\n"
            error_message += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {str(update_error)}\n\n"
            error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_message, reply_markup=reply_markup, parse_mode='HTML')
        
        logging.info("‚úÖ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–ú–ï–¢–ö–ò")
        logging.info(f"üîö –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é: INTERACTIVE_CALENDAR")
        logging.info("=" * 80)
        
        return INTERACTIVE_CALENDAR
        
    except Exception as e:
        logging.error("=" * 80)
        logging.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –û–ë–†–ê–ë–û–¢–ö–ï –û–¢–ú–ï–¢–ö–ò")
        logging.error(f"üî• –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logging.error(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {str(e)}")
        logging.error(f"üìã Callback data: {query.data}")
        logging.error(f"üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context.user_data}")
        import traceback
        logging.error(f"üìä –ü–æ–ª–Ω—ã–π traceback:\n{traceback.format_exc()}")
        logging.error("=" * 80)
        
        try:
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="menu_calendar")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", reply_markup=reply_markup)
        except Exception as edit_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            try:
                await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
            except Exception as answer_error:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {answer_error}")
        
        return MAIN_MENU

# –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º update_data_in_background() –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

async def generate_attendance_report(lesson_id: str, attendance_mark: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è."""
    try:
        import logging
        logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} —Å –æ—Ç–º–µ—Ç–∫–æ–π '{attendance_mark}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        lesson_info = sheets_service.get_lesson_info_by_id(lesson_id)
        if not lesson_info:
            return f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ '*{attendance_mark}*' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nüîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ."
        
        subscription_id = lesson_info.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '')
        child_name = lesson_info.get('–†–µ–±–µ–Ω–æ–∫', '')
        lesson_date = lesson_info.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
        sub_details = sheets_service.get_subscription_details(subscription_id)
        circle_name = sub_details.get('circle_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if sub_details else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —ç—Ç–æ–º—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
        all_lessons = sheets_service.get_lessons_by_subscription_with_marks(subscription_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç
        payment_dates = sheets_service.get_forecast_payment_dates(child_name, circle_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±—é–¥–∂–µ—Ç
        forecast_budget = sheets_service.get_forecast_budget_for_child_circle(child_name, circle_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        message = f"‚úÖ *–û—Ç–º–µ—Ç–∫–∞ '{attendance_mark}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
        message += f"üé® *–ö—Ä—É–∂–æ–∫:* {circle_name}\n"
        message += f"üë§ *–†–µ–±–µ–Ω–æ–∫:* {child_name}\n"
        message += f"üìÖ *–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è:* {lesson_date}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É
        if sub_details:
            message += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:*\n"
            message += f"üÜî ID: {subscription_id}\n"
            message += f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {sub_details.get('total_classes', 0)}\n"
            message += f"‚úÖ –ü—Ä–æ—à–ª–æ: {sub_details.get('attended_classes', 0)}\n"
            message += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {sub_details.get('remaining_classes', 0)}\n"
            message += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {sub_details.get('missed_classes', 0)}\n"
            if sub_details.get('cost'):
                message += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {sub_details['cost']} —Ä—É–±.\n\n"
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–º–µ—Ç–æ–∫
        if all_lessons:
            message += f"üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π:*\n"
            for lesson in all_lessons[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–Ω—è—Ç–∏–π
                date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
                mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '')
                status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')
                if mark:
                    message += f"‚Ä¢ {date}: {mark}\n"
                else:
                    message += f"‚Ä¢ {date}: {status}\n"
            message += "\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç
        if payment_dates:
            message += f"üí≥ *–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç:*\n"
            for date in payment_dates[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –¥–∞—Ç—ã
                message += f"‚Ä¢ {date}\n"
            message += "\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±—é–¥–∂–µ—Ç
        if forecast_budget:
            message += f"üí∞ *–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±—é–¥–∂–µ—Ç:* {forecast_budget} —Ä—É–±.\n\n"
        
        message += "üîÑ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.*"
        
        return message
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ '*{attendance_mark}*' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nüîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ."

async def update_after_subscription_creation():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    try:
        import logging
        logging.info("=== –ù–ê–ß–ê–õ–û –§–û–ù–û–í–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ê–ë–û–ù–ï–ú–ï–ù–¢–ê ===")
        
        # 1. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –¥–∞—Ç –æ–ø–ª–∞—Ç)
        logging.info("1. –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—é–¥–∂–µ—Ç–∞...")
        sheets_service.update_full_forecast()
        logging.info("–ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar (—Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
        logging.info("2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar...")
        try:
            calendar_result = sheets_service.sync_calendar_with_google_calendar()
            logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {calendar_result[:100]}...")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        
        # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å Google Calendar (—Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
        logging.info("3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å Google Calendar...")
        try:
            forecast_result = sheets_service.sync_forecast_with_google_calendar()
            logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {forecast_result[:100]}...")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        
        # 4. –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ Google Calendar (—Ñ–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞)
        logging.info("4. –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ Google Calendar...")
        try:
            clean_result = sheets_service.clean_duplicate_events()
            logging.info(f"–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {clean_result[:100]}...")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}")
        
        # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: update_subscriptions_statistics() –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞,
        # –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        
        logging.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –§–û–ù–û–í–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ê–ë–û–ù–ï–ú–ï–ù–¢–ê ===")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar —É–¥–∞–ª–µ–Ω–∞

async def select_calendar_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    subscription_id = query.data.replace("calendar_sub_", "")
    context.user_data['selected_subscription_id'] = subscription_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        lessons = sheets_service.get_lessons_by_subscription(subscription_id)
        
        if not lessons:
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", callback_data="menu_calendar")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üìÖ –ó–∞–Ω—è—Ç–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
            return SELECT_CALENDAR_SUBSCRIPTION
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        keyboard = []
        for i, lesson in enumerate(lessons):
            lesson_date = lesson.get('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è', '')
            lesson_time = lesson.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', '')
            status = lesson.get('–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è', '')
            mark = lesson.get('–û—Ç–º–µ—Ç–∫–∞', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            status_emoji = {
                '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ': '‚è≥',
                '–ó–∞–≤–µ—Ä—à–µ–Ω': '‚úÖ',
                '–ü—Ä–æ–ø—É—Å–∫': '‚ùå'
            }.get(status, '‚ùì')
            
            mark_text = f" ({mark})" if mark else ""
            button_text = f"{status_emoji} {lesson_date} {lesson_time}{mark_text}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ callback_data (i+2 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"lesson_{i+2}")])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", callback_data="menu_calendar")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(f"üìÖ –ó–∞–Ω—è—Ç–∏—è –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=reply_markup)
        return SELECT_LESSON
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", callback_data="menu_calendar")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–Ω—è—Ç–∏–π: {e}", reply_markup=reply_markup)
        return SELECT_CALENDAR_SUBSCRIPTION

async def select_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–º–µ—Ç–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    lesson_row = int(query.data.replace("lesson_", ""))
    context.user_data['selected_lesson_row'] = lesson_row
    
    subscription_id = context.user_data.get('selected_subscription_id', '')
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ", callback_data="mark_–ø–æ—Å–µ—â–µ–Ω–∏–µ")],
        [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)", callback_data="mark_–ø—Ä–æ–ø—É—Å–∫ (–ø–æ –≤–∏–Ω–µ)")],
        [InlineKeyboardButton("ü§í –û—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)", callback_data="mark_–æ—Ç–º–µ–Ω–∞ (–±–æ–ª–µ–∑–Ω—å)")],
        [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–Ω–æ—Å", callback_data="mark_–ø–µ—Ä–µ–Ω–æ—Å")],
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∑–∞–Ω—è—Ç–∏—è–º", callback_data=f"calendar_sub_{subscription_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–º–µ—Ç–∫—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:", reply_markup=reply_markup)
    return SELECT_ATTENDANCE_MARK

async def select_attendance_mark(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    mark = query.data.replace("mark_", "")
    lesson_row = context.user_data.get('selected_lesson_row')
    subscription_id = context.user_data.get('selected_subscription_id', '')
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –≤ Google Sheets
        success = sheets_service.update_lesson_mark(lesson_row, mark, subscription_id)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            sheets_service.update_subscription_stats(subscription_id)
            
            await query.edit_message_text(
                f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ '{mark}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∑–∞–Ω—è—Ç–∏—è–º", callback_data=f"calendar_sub_{subscription_id}"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return CALENDAR_LESSONS
        else:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"lesson_{lesson_row}"),
                    InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∑–∞–Ω—è—Ç–∏—è–º", callback_data=f"calendar_sub_{subscription_id}")
                ]])
            )
        
        return SELECT_LESSON
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏: {e}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∑–∞–Ω—è—Ç–∏—è–º", callback_data=f"calendar_sub_{subscription_id}")
            ]])
        )
        return SELECT_LESSON

# === –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ===
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üé® –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–Ω—è—Ç–∏—è–º–∏", callback_data="settings_cat_–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞")],
        [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ—Ç—å–º–∏", callback_data="settings_cat_–†–µ–±–µ–Ω–æ–∫")],
        [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–ª–∞—Ç–æ–π", callback_data="settings_cat_–û–ø–ª–∞—Ç–∞")],
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="test_notifications")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å Google –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="sync_google_calendar")],
        [InlineKeyboardButton("üí∞ Google –ø—Ä–æ–≥–Ω–æ–∑", callback_data="sync_google_forecast")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏", callback_data="clean_duplicates")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="menu_update_stats")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã", callback_data="menu_update_subscriptions")],
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup, parse_mode='HTML')
    return SETTINGS_MENU

async def settings_show_category_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    category_header = query.data.split('_cat_')[1]
    context.user_data['settings_category_header'] = category_header
    
    category_titles = {'–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞': '–∑–∞–Ω—è—Ç–∏—è–º–∏', '–†–µ–±–µ–Ω–æ–∫': '–¥–µ—Ç—å–º–∏', '–û–ø–ª–∞—Ç–∞': '–æ–ø–ª–∞—Ç–æ–π'}
    context.user_data['settings_category_title'] = category_titles.get(category_header, '—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏')

    await query.edit_message_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫: {context.user_data['settings_category_title']}...")
    
    return await _display_settings_category_list(update, context, query.edit_message_text)


async def show_category_items_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –≤ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'settings_add':
        header = context.user_data['settings_category_header']
        sent_message = await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{header}':")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return ADD_ITEM
    
    elif query.data.startswith('settings_select_item_'):
        item_name = query.data.split('settings_select_item_')[1]
        context.user_data['settings_selected_item'] = item_name
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="settings_edit_item")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="settings_delete_item")],
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"settings_cat_{context.user_data['settings_category_header']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: <b>{item_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup, parse_mode='HTML')
        return MANAGE_SINGLE_ITEM

async def manage_single_item_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –∏–ª–∏ '–£–¥–∞–ª–∏—Ç—å'."""
    query = update.callback_query
    await query.answer()

    action = query.data
    item_name = context.user_data['settings_selected_item']

    if action == "settings_edit_item":
        sent_message = await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{item_name}':")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return GET_NEW_VALUE_FOR_EDIT
    
    elif action == "settings_delete_item":
        keyboard = [
            [InlineKeyboardButton("‚ùóÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="settings_confirm_delete")],
            [InlineKeyboardButton("‚è™ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"settings_select_item_{item_name}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{item_name}'?", reply_markup=reply_markup)
        return CONFIRM_DELETE_ITEM

async def add_item_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É."""
    await update.message.delete()
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('prompt_message_id'))
        except Exception as e: logging.warning(f"Could not delete prompt message: {e}")

    new_value = update.message.text.strip()
    header = context.user_data['settings_category_header']
    sheets_service.add_handbook_item(header, new_value)
    
    return await _display_settings_category_list(update, context, context.bot.send_message)

async def get_new_value_for_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É."""
    await update.message.delete()
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('prompt_message_id'))
        except Exception as e: logging.warning(f"Could not delete prompt message: {e}")

    new_value = update.message.text.strip()
    old_value = context.user_data['settings_selected_item']
    header = context.user_data['settings_category_header']
    sheets_service.edit_handbook_item(header, old_value, new_value)
    return await _display_settings_category_list(update, context, context.bot.send_message)

async def confirm_delete_item_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É."""
    query = update.callback_query
    item_to_delete = context.user_data['settings_selected_item']
    header = context.user_data['settings_category_header']
    success, message = sheets_service.delete_handbook_item(header, item_to_delete)
    await query.answer(text=message, show_alert=True)
    return await _display_settings_category_list(update, context, query.edit_message_text)


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def notification_settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        current_time = sheets_service.get_notification_time()
        
        message_text = "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        message_text += "üìã –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è.\n\n"
        
        if current_time:
            message_text += f"‚è∞ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {current_time}\n\n"
        else:
            message_text += "‚è∞ <b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</b>\n\n"
            
        message_text += "üïò –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ (—Å 9:00 –¥–æ 21:00 —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç)
        keyboard = []
        times = []
        
        for hour in range(9, 22):  # —Å 9 –¥–æ 21
            for minute in [0, 30]:
                time_str = f"{hour:02d}:{minute:02d}"
                times.append(time_str)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        for i in range(0, len(times), 3):
            row = []
            for j in range(3):
                if i + j < len(times):
                    time_str = times[i + j]
                    # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    if current_time == time_str:
                        button_text = f"‚úÖ {time_str}"
                    else:
                        button_text = time_str
                    row.append(InlineKeyboardButton(button_text, callback_data=f"set_notification_time_{time_str}"))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if current_time:
            keyboard.append([InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")])
        
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        
        return NOTIFICATION_TIME_SETTINGS
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n\n{e}"
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SETTINGS_MENU

async def set_notification_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
        time_str = query.data.replace("set_notification_time_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (—è—á–µ–π–∫–∞ N2)
        success = sheets_service.set_notification_time(time_str)
        
        if success:
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = query.message.chat_id
            success_chat = sheets_service.set_notification_chat_id(str(chat_id))
            
            message_text = f"‚úÖ <b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            message_text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_str}\n\n"
            message_text += "üì¨ –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è.\n\n"
            message_text += "üîî <b>–ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å:</b>\n"
            message_text += "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
            message_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–Ω—è—Ç–∏—é\n"
            message_text += "‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º\n"
            message_text += "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –≤ —Ñ–æ–Ω–µ"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            global notification_scheduler
            if notification_scheduler is None:
                from notification_scheduler import get_notification_scheduler
                notification_scheduler = get_notification_scheduler(context.bot)
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chat_id –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if notification_scheduler:
                notification_scheduler.set_chat_id(chat_id)
                
            if notification_scheduler and not notification_scheduler.is_running:
                await notification_scheduler.start_scheduler()
                message_text += "\n\nüöÄ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!</b>"
        else:
            message_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        keyboard = [
            [InlineKeyboardButton("üîî –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="notification_settings")],
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return NOTIFICATION_TIME_SETTINGS  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n{e}"
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SETTINGS_MENU

async def disable_notifications_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –≤ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
        success = sheets_service.set_notification_time("")
        
        if success:
            message_text = "üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            message_text += "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.\n\n"
            message_text += "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            global notification_scheduler
            if notification_scheduler and notification_scheduler.is_running:
                await notification_scheduler.stop_scheduler()
                message_text += "\n\n‚èπÔ∏è <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
        else:
            message_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        keyboard = [
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")],
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SETTINGS_MENU
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n{e}"
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SETTINGS_MENU

async def test_notifications_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        await query.edit_message_text("üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n‚è≥ –ò—â—É –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...", parse_mode='HTML')
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        from notification_scheduler import get_notification_scheduler
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        notification_scheduler = get_notification_scheduler(context.bot)
        
        if notification_scheduler is None:
            notification_scheduler = get_notification_scheduler(context.bot)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π chat_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        current_chat_id = query.message.chat_id
        notification_scheduler.set_chat_id(current_chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_lessons = notification_scheduler._get_today_lessons()
        
        if not today_lessons:
            message_text = "üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            message_text += "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—Å–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã.\n\n"
            message_text += "üí° <b>–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
            message_text += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'\n"
            message_text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ '–û—Ç–º–µ—Ç–∫–∞' –ø—É—Å—Ç–∞—è\n"
            message_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑"
        else:
            message_text = f"üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            message_text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_lessons)}\n\n"
            message_text += "üì¨ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...</b>\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for i, lesson in enumerate(today_lessons, 1):
                try:
                    await notification_scheduler._send_lesson_notification(lesson)
                    message_text += f"‚Ä¢ –ó–∞–Ω—è—Ç–∏–µ {i}: {lesson['child_name']} - {lesson['circle_name']} ‚úÖ\n"
                except Exception as e:
                    message_text += f"‚Ä¢ –ó–∞–Ω—è—Ç–∏–µ {i}: {lesson['child_name']} - {lesson['circle_name']} ‚ùå (–æ—à–∏–±–∫–∞)\n"
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            
            message_text += f"\nüéâ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(today_lessons)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!</b>\n\n"
            message_text += "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç - –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ—Ç–æ–∫."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data="test_notifications")],
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")],
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return NOTIFICATION_TIME_SETTINGS  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>\n\n{e}\n\n"
        message_text += "üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
        message_text += "‚Ä¢ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHAT_ID –≤ .env\n"
        message_text += "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets\n"
        message_text += "‚Ä¢ –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data="test_notifications")],
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SETTINGS_MENU

# === –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö callback'–æ–≤ ===
async def debug_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤."""
    query = update.callback_query
    if query:
        logging.info("üîç –ü–û–õ–£–ß–ï–ù CALLBACK:")
        logging.info(f"   üìã callback_data: '{query.data}'")
        logging.info(f"   üì± chat_id: {query.message.chat_id}")
        logging.info(f"   üì® message_id: {query.message.message_id}")
        logging.info(f"   üë§ user_id: {query.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if query.data.startswith('attendance_mark_'):
            logging.info("üéØ –≠–¢–û CALLBACK –û–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø!")
            logging.info("   üîÑ –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π save_attendance_mark")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_attendance_mark ===


# === –ú–µ–Ω—é "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã" ===
async def subscriptions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        active_subs = sheets_service.get_active_subscriptions()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –æ–ø–ª–∞—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç
        forecast_data = sheets_service.get_planned_payments()
        
        keyboard = []
        
        if not active_subs:
            message_text = "üìÑ <b>–ê–ë–û–ù–ï–ú–ï–ù–¢–´</b>\n\n‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            message_text = "üìÑ <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ê–ë–û–ù–ï–ú–ï–ù–¢–û–í</b>\n\n"
            
            total_active = len(active_subs)
            total_lessons_remaining = 0
            total_lessons_attended = 0
            total_lessons_missed = 0
            
            for i, sub in enumerate(active_subs, 1):
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
                child_name = sub.get('–†–µ–±–µ–Ω–æ–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                circle_name = sub.get('–ö—Ä—É–∂–æ–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
                available_keys = list(sub.keys())
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                # –°—Ç–æ–ª–±–µ—Ü E - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π (5-–π —Å—Ç–æ–ª–±–µ—Ü = –∏–Ω–¥–µ–∫—Å 4)
                try:
                    if len(available_keys) > 4:  # –°—Ç–æ–ª–±–µ—Ü E = –∏–Ω–¥–µ–∫—Å 4
                        col_e_name = available_keys[4]
                        total_lessons_value = sub.get(col_e_name, 0)
                    else:
                        total_lessons_value = 0
                    total_lessons = int(total_lessons_value) if total_lessons_value else 0
                except (ValueError, TypeError):
                    total_lessons = 0
                
                # –°—Ç–æ–ª–±–µ—Ü I - –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π (9-–π —Å—Ç–æ–ª–±–µ—Ü = –∏–Ω–¥–µ–∫—Å 8)
                try:
                    if len(available_keys) > 8:  # –°—Ç–æ–ª–±–µ—Ü I = –∏–Ω–¥–µ–∫—Å 8
                        col_i_name = available_keys[8]
                        remaining_value = sub.get(col_i_name, 0)
                    else:
                        remaining_value = 0
                    remaining_lessons = int(remaining_value) if remaining_value else 0
                except (ValueError, TypeError):
                    remaining_lessons = 0
                    
                try:
                    cost_value = (sub.get('–°—Ç–æ–∏–º–æ—Å—Ç—å') or 
                                sub.get('–¶–µ–Ω–∞') or 
                                sub.get('–°—É–º–º–∞') or 0)
                    cost = float(cost_value) if cost_value else 0
                except (ValueError, TypeError):
                    cost = 0
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
                # –°—Ç–æ–ª–±–µ—Ü H - –ü–æ—Å–µ—â–µ–Ω–æ (8-–π —Å—Ç–æ–ª–±–µ—Ü = –∏–Ω–¥–µ–∫—Å 7)
                try:
                    if len(available_keys) > 7:  # –°—Ç–æ–ª–±–µ—Ü H = –∏–Ω–¥–µ–∫—Å 7
                        col_h_name = available_keys[7]
                        attended_value = sub.get(col_h_name, 0)
                    else:
                        attended_value = 0
                    attended = int(attended_value) if attended_value else 0
                except (ValueError, TypeError):
                    attended = 0
                    
                # –°—Ç–æ–ª–±–µ—Ü M - –ü—Ä–æ–ø—É—â–µ–Ω–æ (13-–π —Å—Ç–æ–ª–±–µ—Ü = –∏–Ω–¥–µ–∫—Å 12)
                try:
                    if len(available_keys) > 12:  # –°—Ç–æ–ª–±–µ—Ü M = –∏–Ω–¥–µ–∫—Å 12
                        col_m_name = available_keys[12]
                        missed_value = sub.get(col_m_name, 0)
                    else:
                        missed_value = 0
                    missed = int(missed_value) if missed_value else 0
                except (ValueError, TypeError):
                    missed = 0
                
                total_lessons_remaining += remaining_lessons
                total_lessons_attended += attended
                total_lessons_missed += missed
                
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
                next_payment_date = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
                
                if forecast_data:
                    # –ò—â–µ–º –ø–æ —Ä–µ–±–µ–Ω–∫—É –∏ –∫—Ä—É–∂–∫—É
                    for payment in forecast_data:
                        if (payment.get('child_name') == child_name and 
                            payment.get('circle_name') == circle_name):
                            next_payment_date = payment.get('payment_date', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')
                            break
                
                # –°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                status = str(sub.get('–°—Ç–∞—Ç—É—Å', '')).strip().lower()
                status_emoji = '‚úÖ' if status == '–∞–∫—Ç–∏–≤–µ–Ω' else '‚è≥' if status == '–æ–∂–∏–¥–∞–µ—Ç' else '‚ùì'
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
                message_text += f"{status_emoji} <b>{child_name} - {circle_name}</b>\n"
                message_text += f"üìä –ó–∞–Ω—è—Ç–∏–π: {total_lessons} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining_lessons}\n"
                message_text += f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {attended} | ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed}\n"
                message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.0f} —Ä—É–±.\n"
                message_text += f"üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –æ–ø–ª–∞—Ç–∞: {next_payment_date}\n"
                
                if i < len(active_subs):
                    message_text += "\n" + "‚îÄ" * 25 + "\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message_text += f"\nüìà <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            message_text += f"üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {total_active}\n"
            message_text += f"üìö –í—Å–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {total_lessons_remaining}\n"
            message_text += f"‚úÖ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–æ: {total_lessons_attended}\n"
            message_text += f"‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {total_lessons_missed}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            message_text += f"\nüîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
            
            for sub in active_subs:
                child_name = sub.get('–†–µ–±–µ–Ω–æ–∫', '')
                circle_name = sub.get('–ö—Ä—É–∂–æ–∫', '')
                remaining = sub.get('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π', 0)
                
                button_text = f"üìã {child_name} - {circle_name} ({remaining} –∑–∞–Ω.)"
                callback_data = f"select_sub_{sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞')}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="sub_create")])
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SELECT_SUBSCRIPTION
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
        message_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:</b>\n\n{e}"
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        return SELECT_SUBSCRIPTION

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º ===
async def select_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    sub_id = query.data.replace("select_sub_", "")
    context.user_data['selected_sub_id'] = sub_id
    
    all_subs = sheets_service.get_active_subscriptions()
    selected_sub_info = next((sub for sub in all_subs if str(sub.get('ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞')) == str(sub_id)), None)
    
    if not selected_sub_info:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.")
        query.data = 'menu_subscriptions'
        return await subscriptions_menu(update, context)
        
    context.user_data['selected_sub_info'] = selected_sub_info
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    stats = sheets_service.get_subscription_full_stats(sub_id)
    
    if not stats:
        message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"
    else:
        sub_info = stats['subscription']
        schedule = stats['schedule_template']
        lessons = stats['calendar_lessons']
        forecasts = stats['forecast_payments']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message_text = f"üìä <b>–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ë–û–ù–ï–ú–ï–ù–¢–ê</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message_text += f"üÜî <b>ID:</b> <code>{sub_id}</code>\n"
        message_text += f"üë§ <b>–†–µ–±–µ–Ω–æ–∫:</b> {sub_info.get('–†–µ–±–µ–Ω–æ–∫', 'N/A')}\n"
        message_text += f"üé® <b>–ö—Ä—É–∂–æ–∫:</b> {sub_info.get('–ö—Ä—É–∂–æ–∫', 'N/A')}\n"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü G –∏ L
        logging.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ sub_info: {list(sub_info.keys())}")
        end_date_g = sub_info.get('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', '')  # –°—Ç–æ–ª–±–µ—Ü G
        end_date_l = sub_info.get('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è', '')  # –°—Ç–æ–ª–±–µ—Ü L
        logging.info(f"üîç –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è G: '{end_date_g}', –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è L: '{end_date_l}'")
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if end_date_g and end_date_l:
            try:
                from datetime import datetime
                date_g = datetime.strptime(end_date_g, '%d.%m.%Y')
                date_l = datetime.strptime(end_date_l, '%d.%m.%Y')
                end_date = end_date_l if date_l >= date_g else end_date_g
            except ValueError:
                end_date = end_date_g or end_date_l or 'N/A'
        else:
            end_date = end_date_g or end_date_l or 'N/A'
        
        message_text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {sub_info.get('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', 'N/A')} - {end_date}\n"
        message_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {sub_info.get('–°—Ç–∞—Ç—É—Å', 'N/A')}\n"
        message_text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {sub_info.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 'N/A')} —Ä—É–±.\n"
        message_text += f"üìö <b>–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π:</b> {sub_info.get('–ö-–≤–æ –∑–∞–Ω—è—Ç–∏–π', 'N/A')}\n"
        message_text += f"üìâ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {sub_info.get('–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π', 'N/A')}\n"
        message_text += f"üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> {sub_info.get('–û–ø–ª–∞—Ç–∞', 'N/A')}\n\n"
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        message_text += f"üïê <b>–†–ê–°–ü–ò–°–ê–ù–ò–ï ({len(schedule)} –¥–Ω–µ–π):</b>\n"
        if schedule:
            days_map = {1: '–ü–Ω', 2: '–í—Ç', 3: '–°—Ä', 4: '–ß—Ç', 5: '–ü—Ç', 6: '–°–±', 7: '–í—Å'}
            for sch in schedule:
                day_name = days_map.get(sch.get('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 0), 'N/A')
                message_text += f"‚Ä¢ {day_name}: {sch.get('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', 'N/A')}-{sch.get('–í—Ä–µ–º—è –∑–≤–µ—Ä—à–µ–Ω–∏—è', 'N/A')}\n"
        else:
            message_text += "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π
        message_text += f"\nüìã <b>–ó–ê–ù–Ø–¢–ò–Ø ({len(lessons)} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        if lessons:
            attended = sum(1 for l in lessons if l.get('–û—Ç–º–µ—Ç–∫–∞', '') in ['‚úîÔ∏è', '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'])
            missed = sum(1 for l in lessons if l.get('–û—Ç–º–µ—Ç–∫–∞', '') in ['‚úñÔ∏è', '–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'])
            planned = sum(1 for l in lessons if l.get('–û—Ç–º–µ—Ç–∫–∞', '') == '')
            
            message_text += f"‚Ä¢ ‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ: {attended}\n"
            message_text += f"‚Ä¢ ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed}\n"
            message_text += f"‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned}\n"
            
            if attended + missed > 0:
                attendance_rate = round((attended / (attended + missed)) * 100, 1)
                message_text += f"‚Ä¢ üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {attendance_rate}%\n"
        else:
            message_text += "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç
        message_text += f"\nüí∞ <b>–ü–†–û–ì–ù–û–ó –û–ü–õ–ê–¢ ({len(forecasts)} –∑–∞–ø–∏—Å–µ–π):</b>\n"
        if forecasts:
            total_forecast = sum(float(f.get('–ë—é–¥–∂–µ—Ç', 0) or 0) for f in forecasts)
            message_text += f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_forecast} —Ä—É–±.\n"
            for forecast in forecasts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                message_text += f"‚Ä¢ {forecast.get('–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', 'N/A')}: {forecast.get('–ë—é–¥–∂–µ—Ç', 'N/A')} —Ä—É–±.\n"
            if len(forecasts) > 3:
                message_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(forecasts) - 3} –ø–ª–∞—Ç–µ–∂–µ–π\n"
        else:
            message_text += "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="update_stats_sub")],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_sub")],
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="menu_subscriptions")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MANAGE_SUBSCRIPTION

async def manage_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º."""
    query = update.callback_query
    await query.answer()

    sub_id = context.user_data.get('selected_sub_id')
    if not sub_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        query.data = 'menu_subscriptions'
        return await subscriptions_menu(update, context)

    if query.data == 'update_stats_sub':
        await query.edit_message_text(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ `{sub_id}`...")
        result_message = sheets_service.update_subscription_stats(sub_id)
        
        await query.edit_message_text(
            result_message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="menu_subscriptions")]])
        )
        return SELECT_SUBSCRIPTION

    elif query.data == 'delete_sub':
        keyboard = [
            [InlineKeyboardButton("‚ùóÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_yes")],
            [InlineKeyboardButton("‚è™ –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data=f"select_sub_{sub_id}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç `{sub_id}`?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∑–∞–Ω—è—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.",
            reply_markup=reply_markup
        )
        return CONFIRM_DELETE_SUBSCRIPTION

    elif query.data in ['edit_sub', 'duplicate_sub']:
        action_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" if query.data == 'edit_sub' else "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
        await query.edit_message_text(
            f"{action_text} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É", callback_data=f"select_sub_{sub_id}")]
            ])
        )
        return MANAGE_SUBSCRIPTION

async def confirm_delete_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
    query = update.callback_query
    
    sub_id = context.user_data.get('selected_sub_id')
    if not sub_id:
        try:
            await query.answer()
            await query.edit_message_text("–û—à–∏–±–∫–∞: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception:
            # –ï—Å–ª–∏ callback –∏—Å—Ç–µ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–û—à–∏–±–∫–∞: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
        return await subscriptions_menu(update, context)
    
    if query.data == 'confirm_delete_yes':
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
            await query.answer("–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è
            try:
                await query.edit_message_text(f"üóëÔ∏è –£–¥–∞–ª—è—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç `{sub_id}`...\n\n‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Google Sheets...")
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"üóëÔ∏è –£–¥–∞–ª—è—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç `{sub_id}`...\n\n‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Google Sheets..."
                )
            
            # 1. –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets (–≤—Å–µ –ª–∏—Å—Ç—ã)
            deletion_result = sheets_service.delete_subscription(sub_id)
            
            if not deletion_result['success']:
                try:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{deletion_result['message']}")
                except Exception:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{deletion_result['message']}"
                    )
                return await subscriptions_menu(update, context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_message = f"üóëÔ∏è –£–¥–∞–ª—è—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç `{sub_id}`...\n\n"
            progress_message += f"‚úÖ Google Sheets: {sum(deletion_result['deleted_counts'].values())} –∑–∞–ø–∏—Å–µ–π\n"
            progress_message += "‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Google Calendar..."
            try:
                await query.edit_message_text(progress_message)
            except Exception:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=progress_message
                )
            
            # 2. –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
            calendar_result = {'deleted_count': 0, 'message': 'Calendar API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
            if deletion_result['child_name'] and deletion_result['circle_name']:
                try:
                    from google_calendar_service import GoogleCalendarService
                    calendar_service = GoogleCalendarService()
                    calendar_result = calendar_service.delete_subscription_events(
                        deletion_result['child_name'],
                        deletion_result['circle_name'], 
                        sub_id
                    )
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_message = f"üóëÔ∏è –£–¥–∞–ª—è—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç `{sub_id}`...\n\n"
            progress_message += f"‚úÖ Google Sheets: {sum(deletion_result['deleted_counts'].values())} –∑–∞–ø–∏—Å–µ–π\n"
            progress_message += f"‚úÖ Google Calendar: {calendar_result['deleted_count']} —Å–æ–±—ã—Ç–∏–π\n"
            progress_message += "‚è≥ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
            try:
                await query.edit_message_text(progress_message)
            except Exception:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=progress_message
                )
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                asyncio.create_task(update_data_in_background())
                logging.info("üîÑ –ó–∞–ø—É—â–µ–Ω—ã —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = f"üéâ –ê–±–æ–Ω–µ–º–µ–Ω—Ç `{sub_id}` –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!\n\n"
            
            # –î–µ—Ç–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Sheets
            if deletion_result['deleted_counts']:
                final_message += "üìä –£–¥–∞–ª–µ–Ω–æ –∏–∑ Google Sheets:\n"
                for sheet_name, count in deletion_result['deleted_counts'].items():
                    if count > 0:
                        final_message += f"‚Ä¢ {sheet_name}: {count} –∑–∞–ø–∏—Å–µ–π\n"
            
            # –î–µ—Ç–∞–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Calendar
            if calendar_result['deleted_count'] > 0:
                final_message += f"\nüìÖ Google Calendar: {calendar_result['deleted_count']} —Å–æ–±—ã—Ç–∏–π\n"
            elif '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' not in calendar_result['message']:
                final_message += f"\nüìÖ Google Calendar: —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            final_message += "\nüîÑ –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã"
            final_message += "\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.edit_message_text(final_message)
            except Exception:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=final_message
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å –∫—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–µ—Å–ª–∏ callback –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω)
            try:
                alert_message = f"‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç {sub_id} —É–¥–∞–ª–µ–Ω!\n"
                alert_message += f"üìä Sheets: {sum(deletion_result['deleted_counts'].values())} –∑–∞–ø–∏—Å–µ–π\n"
                alert_message += f"üìÖ Calendar: {calendar_result['deleted_count']} —Å–æ–±—ã—Ç–∏–π"
                await query.answer(alert_message, show_alert=True)
            except Exception:
                # –ï—Å–ª–∏ callback –∏—Å—Ç–µ–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º alert
                pass
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é
            context.user_data.clear()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
            await asyncio.sleep(2)
            return await subscriptions_menu(update, context)
            
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {sub_id}: {e}")
            try:
                await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{str(e)}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            except Exception:
                # –ï—Å–ª–∏ callback –∏—Å—Ç–µ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{str(e)}"
                )
            return await subscriptions_menu(update, context)

# === –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ ===
async def create_sub_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        context.user_data['new_sub'] = {'schedule': []}
        
        children = sheets_service.get_children_list()
        keyboard = [[InlineKeyboardButton(name, callback_data=f"create_sub_child_{name}")] for name in children]
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞", callback_data="create_sub_add_child")])
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="menu_subscriptions")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–®–∞–≥ 1/9: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ.", reply_markup=reply_markup, parse_mode='HTML')
        return CREATE_SUB_CHILD
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ create_sub_start: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π: {e}", 
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_subscriptions")]]))
        return SELECT_SUBSCRIPTION

async def create_sub_child_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "create_sub_add_child":
        sent_message = await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞:")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return CREATE_SUB_GET_CHILD_NAME
    else:
        child_name = query.data.replace("create_sub_child_", "", 1)
        context.user_data['new_sub']['child_name'] = child_name
        return await create_sub_ask_for_circle(update, context)

async def create_sub_get_child_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.delete()
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('prompt_message_id'))
        except Exception: pass
        
    child_name = update.message.text.strip()
    if not child_name:
        sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return CREATE_SUB_GET_CHILD_NAME
    
    sheets_service.add_handbook_item("–†–µ–±–µ–Ω–æ–∫", child_name)
    context.user_data['new_sub']['child_name'] = child_name
    return await create_sub_ask_for_circle(update, context)

async def create_sub_ask_for_circle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        circles = sheets_service.get_circles_list()
        keyboard = [[InlineKeyboardButton(name, callback_data=f"create_sub_circle_{name}")] for name in circles]
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—Ä—É–∂–æ–∫", callback_data="create_sub_add_circle")])
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="sub_create")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n\n–®–∞–≥ 2/9: –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä—É–∂–æ–∫."
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
            
        return CREATE_SUB_CIRCLE
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ create_sub_ask_for_circle: {e}", exc_info=True)
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫—Ä—É–∂–∫–æ–≤: {e}"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message, 
                                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_subscriptions")]]))
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=error_message)
        
        return SELECT_SUBSCRIPTION

async def create_sub_circle_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "create_sub_add_circle":
            sent_message = await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–∂–∫–∞:")
            context.user_data['prompt_message_id'] = sent_message.message_id
            return CREATE_SUB_GET_CIRCLE_NAME
        else:
            circle_name = query.data.replace("create_sub_circle_", "", 1)
            context.user_data['new_sub']['circle_name'] = circle_name
            return await create_sub_ask_for_type(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ create_sub_circle_handler: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", 
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="menu_subscriptions")]]))
        return SELECT_SUBSCRIPTION

async def create_sub_get_circle_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.delete()
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('prompt_message_id'))
        except Exception: pass
        
    circle_name = update.message.text.strip()
    if not circle_name:
        sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return CREATE_SUB_GET_CIRCLE_NAME
    
    sheets_service.add_handbook_item("–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞", circle_name)
    context.user_data['new_sub']['circle_name'] = circle_name
    return await create_sub_ask_for_type(update, context)

async def create_sub_ask_for_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    sub_types = sheets_service.get_subscription_types()
    keyboard = [[InlineKeyboardButton(stype, callback_data=f"create_sub_type_{stype}")] for stype in sub_types]
    keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"create_sub_child_{context.user_data['new_sub']['child_name']}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n\n"
                    "–®–∞–≥ 3/9: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")
    
    sender = update.callback_query.edit_message_text if update.callback_query else context.bot.send_message
    try:
        if update.callback_query:
            await sender(message_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await sender(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
    except telegram.error.BadRequest as e:
        if "Message is not modified" not in str(e):
             logging.warning(f"Ignored 'Message is not modified' error.")
        else:
            raise e

    return CREATE_SUB_TYPE

async def create_sub_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    sub_type = query.data.replace("create_sub_type_", "", 1)
    context.user_data['new_sub']['sub_type'] = sub_type
    
    return await create_sub_ask_for_payment_type(update, context)

async def create_sub_ask_for_payment_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    try:
        payment_types = sheets_service.get_payment_types()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ç–∏–ø—ã –æ–ø–ª–∞—Ç—ã: {payment_types}")
        
        if not payment_types:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                            f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                            f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n\n"
                            "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∏–ø—ã –æ–ø–ª–∞—Ç—ã –≤ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.\n"
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –ª–∏—Å—Ç–µ '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫' –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü '–¢–∏–ø –æ–ø–ª–∞—Ç—ã' —Å –¥–∞–Ω–Ω—ã–º–∏.")
            
            keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", callback_data="back_to_sub_type")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
            return CREATE_SUB_PAYMENT_TYPE
        
        keyboard = [[InlineKeyboardButton(ptype, callback_data=f"create_sub_payment_{ptype}")] for ptype in payment_types]
        keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"create_sub_circle_{context.user_data['new_sub']['circle_name']}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                        f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                        f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n\n"
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        
        keyboard = [[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", callback_data="back_to_sub_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
        return CREATE_SUB_PAYMENT_TYPE

    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n\n"
                    "–®–∞–≥ 4/9: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã.")

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
        
    return CREATE_SUB_PAYMENT_TYPE

async def create_sub_payment_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    payment_type = query.data.replace("create_sub_payment_", "", 1)
    context.user_data['new_sub']['payment_type'] = payment_type
    
    return await create_sub_ask_for_cost(update, context)

async def create_sub_ask_for_cost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏
    cost_options = [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 6000, 7000, 8000]
    keyboard = []
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(cost_options), 3):
        row = []
        for j in range(3):
            if i + j < len(cost_options):
                cost = cost_options[i + j]
                row.append(InlineKeyboardButton(f"{cost} ‚ÇΩ", callback_data=f"create_sub_cost_{cost}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="create_sub_cost_custom")])
    keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_payment_type")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n\n"
                    "–®–∞–≥ 5/9: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")

    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_COST

async def create_sub_cost_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "create_sub_cost_custom":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                        f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                        f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                        f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        
        sent_message = await query.edit_message_text(message_text, parse_mode='HTML')
        context.user_data['prompt_message_id'] = sent_message.message_id
        context.user_data['awaiting_custom_cost'] = True
        return CREATE_SUB_COST
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    cost = int(query.data.replace("create_sub_cost_", ""))
    context.user_data['new_sub']['cost'] = cost
    
    return await create_sub_ask_for_total_classes(update, context)

async def create_sub_cost_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
    await update.message.delete()
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('prompt_message_id'))
        except Exception: pass

    cost = update.message.text.strip()
    if not cost.isdigit() or int(cost) <= 0:
        sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return CREATE_SUB_COST

    context.user_data['new_sub']['cost'] = int(cost)
    context.user_data.pop('awaiting_custom_cost', None)
    
    return await create_sub_ask_for_total_classes(update, context)

async def create_sub_ask_for_total_classes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π."""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ 15 –ø–æ 5 –≤ —Ä—è–¥
    for i in range(1, 16, 5):
        row = []
        for j in range(5):
            if i + j <= 15:
                num = i + j
                row.append(InlineKeyboardButton(str(num), callback_data=f"create_sub_total_{num}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_cost")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n\n"
                    "–®–∞–≥ 6/9: –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π.")

    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
    
    return CREATE_SUB_TOTAL_CLASSES

async def create_sub_total_classes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    total_classes = int(query.data.replace("create_sub_total_", ""))
    context.user_data['new_sub']['total_classes'] = total_classes
    
    return await create_sub_ask_for_remaining_classes(update, context)

async def create_sub_ask_for_remaining_classes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π."""
    total_classes = context.user_data['new_sub']['total_classes']
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ total_classes –ø–æ 5 –≤ —Ä—è–¥
    for i in range(1, total_classes + 1, 5):
        row = []
        for j in range(5):
            if i + j <= total_classes:
                num = i + j
                row.append(InlineKeyboardButton(str(num), callback_data=f"create_sub_remaining_{num}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_total_classes")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n"
                    f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: <b>{total_classes}</b>\n\n"
                    "–®–∞–≥ 7/9: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π.")

    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_REMAINING_CLASSES

async def create_sub_remaining_classes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    remaining_classes = int(query.data.replace("create_sub_remaining_", ""))
    context.user_data['new_sub']['remaining_classes'] = remaining_classes
    
    return await create_sub_ask_for_start_date(update, context)

async def create_sub_ask_for_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."""
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n"
                    f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: <b>{context.user_data['new_sub']['total_classes']}</b>\n"
                    f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: <b>{context.user_data['new_sub']['remaining_classes']}</b>\n\n"
                    "–®–∞–≥ 8/9: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    today = datetime.now()
    calendar_keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
    month_names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    calendar_keyboard.append([InlineKeyboardButton(f"{month_names[today.month-1]} {today.year}", callback_data="ignore")])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    calendar_keyboard.append([
        InlineKeyboardButton("–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton("–í—Ç", callback_data="ignore"),
        InlineKeyboardButton("–°—Ä", callback_data="ignore"),
        InlineKeyboardButton("–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton("–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton("–°–±", callback_data="ignore"),
        InlineKeyboardButton("–í—Å", callback_data="ignore")
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    first_day = today.replace(day=1)
    start_weekday = first_day.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    days_in_month = (today.replace(month=today.month % 12 + 1, day=1) - timedelta(days=1)).day if today.month < 12 else 31
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    week = []
    
    # –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    for _ in range(start_weekday):
        week.append(InlineKeyboardButton(" ", callback_data="ignore"))
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for day in range(1, days_in_month + 1):
        if day >= today.day:  # –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
            week.append(InlineKeyboardButton(str(day), callback_data=f"cal_{today.year}_{today.month}_{day}"))
        else:
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        
        if len(week) == 7:
            calendar_keyboard.append(week)
            week = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
    if week:
        while len(week) < 7:
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        calendar_keyboard.append(week)
    
    calendar_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_remaining_classes")])
    reply_markup = InlineKeyboardMarkup(calendar_keyboard)
    
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_START_DATE_MONTH

async def create_sub_total_classes_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)."""
    await update.message.delete()
    if 'prompt_message_id' in context.user_data:
        try: await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('prompt_message_id'))
        except Exception: pass

    total_classes = update.message.text.strip()
    if not total_classes.isdigit() or int(total_classes) <= 0:
        sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        context.user_data['prompt_message_id'] = sent_message.message_id
        return CREATE_SUB_TOTAL_CLASSES

    context.user_data['new_sub']['total_classes'] = int(total_classes)
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n"
                    f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: <b>{total_classes}</b>\n\n"
                    "–®–∞–≥ 7/9: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π.")
    
    sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text)
    context.user_data['prompt_message_id'] = sent_message.message_id
    return CREATE_SUB_REMAINING_CLASSES


async def create_sub_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data.startswith('cal_month_'):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
        parts = callback_data.split('_')
        year = int(parts[2])
        month = int(parts[3])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü
        context.user_data['calendar_year'] = year
        context.user_data['calendar_month'] = month
        
        calendar_keyboard = create_calendar_keyboard(year, month)
        
        message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                        f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                        f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                        f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n"
                        f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: <b>{context.user_data['new_sub']['total_classes']}</b>\n"
                        f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: <b>{context.user_data['new_sub']['remaining_classes']}</b>\n\n"
                        "–®–∞–≥ 8/9: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:")
        
        await query.edit_message_text(message_text, reply_markup=calendar_keyboard, parse_mode='HTML')
        return CREATE_SUB_START_DATE_MONTH
        
    elif callback_data.startswith('cal_') and len(callback_data.split('_')) == 4:
        # –í—ã–±–æ—Ä –¥–Ω—è (—Ñ–æ—Ä–º–∞—Ç: cal_year_month_day)
        parts = callback_data.split('_')
        year = int(parts[1])
        month = int(parts[2])
        day = int(parts[3])
        
        try:
            selected_date = datetime(year, month, day)
            context.user_data['new_sub']['start_date'] = selected_date
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            context.user_data['new_sub']['schedule'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            
            message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                            f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                            f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                            f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n"
                            f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: <b>{context.user_data['new_sub']['total_classes']}</b>\n"
                            f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: <b>{context.user_data['new_sub']['remaining_classes']}</b>\n"
                            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n\n"
                            "–®–∞–≥ 9/9: –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π:")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
            days_keyboard = [
                [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="schedule_day_1")],
                [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="schedule_day_2")],
                [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="schedule_day_3")],
                [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="schedule_day_4")],
                [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="schedule_day_5")],
                [InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="schedule_day_6")],
                [InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="schedule_day_7")],
                [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="create_sub_back_to_calendar")]
            ]
            reply_markup = InlineKeyboardMarkup(days_keyboard)
            
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
            return CREATE_SUB_SCHEDULE_DAY
            
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞", show_alert=True)
            return CREATE_SUB_START_DATE_MONTH
    
    elif callback_data == 'ignore':
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        return CREATE_SUB_START_DATE_MONTH
    
    return CREATE_SUB_START_DATE_MONTH

async def create_sub_back_to_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    from datetime import datetime
    current_year = datetime.now().year
    current_month = datetime.now().month
    
    calendar_keyboard = create_calendar_keyboard(current_year, current_month)
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"‚öúÔ∏è –¢–∏–ø: <b>{context.user_data['new_sub']['sub_type']}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{context.user_data['new_sub']['payment_type']}</b>\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['new_sub']['cost']} ‚ÇΩ</b>\n"
                    f"üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: <b>{context.user_data['new_sub']['total_classes']}</b>\n"
                    f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: <b>{context.user_data['new_sub']['remaining_classes']}</b>\n\n"
                    "–®–∞–≥ 8/9: –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:")
    
    await query.edit_message_text(message_text, reply_markup=calendar_keyboard, parse_mode='HTML')
    return CREATE_SUB_START_DATE_MONTH

async def create_sub_schedule_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    day_num = int(query.data.split('_')[2])
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    
    context.user_data['current_schedule_day'] = day_num
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å–∞–º–∏ (—Å 8:00 –¥–æ 20:00)
    time_keyboard = []
    for hour in range(8, 21):
        time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:xx", callback_data=f"start_hour_{hour}")])
    
    time_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="back_to_day_selection")])
    reply_markup = InlineKeyboardMarkup(time_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_START_HOUR

async def create_sub_start_hour_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    start_hour = int(query.data.split('_')[2])
    context.user_data['current_start_hour'] = start_hour
    
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n"
                    f"‚è∞ –ß–∞—Å –Ω–∞—á–∞–ª–∞: <b>{start_hour:02d}:xx</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∏–Ω—É—Ç–∞–º–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    minute_keyboard = []
    for minute in [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]:
        minute_keyboard.append([InlineKeyboardButton(f"{start_hour:02d}:{minute:02d}", callback_data=f"start_minute_{minute}")])
    
    minute_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–∞", callback_data="back_to_start_hour_selection")])
    reply_markup = InlineKeyboardMarkup(minute_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_START_MINUTE

async def create_sub_start_minute_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    start_minute = int(query.data.split('_')[2])
    context.user_data['current_start_minute'] = start_minute
    
    start_hour = context.user_data['current_start_hour']
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{start_hour:02d}:{start_minute:02d}</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º +30 –º–∏–Ω—É—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞)
    time_keyboard = []
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ + 30 –º–∏–Ω—É—Ç)
    min_end_hour = start_hour
    min_end_minute = start_minute + 30
    if min_end_minute >= 60:
        min_end_hour += 1
        min_end_minute -= 60
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
    for hour in range(min_end_hour, 23):
        if hour == min_end_hour:
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–∏–Ω—É—Ç—ã
            if min_end_minute == 0:
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"end_time_{hour}_0")])
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
            elif min_end_minute == 30:
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (00 –∏ 30)
            time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"end_time_{hour}_0")])
            time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
    
    time_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –º–∏–Ω—É—Ç–∞–º –Ω–∞—á–∞–ª–∞", callback_data="back_to_start_minute")])
    reply_markup = InlineKeyboardMarkup(time_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_END_HOUR

async def create_sub_end_hour_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: end_time_hour_minute)
    data_parts = query.data.split('_')
    end_hour = int(data_parts[2])
    end_minute = int(data_parts[3])
    
    context.user_data['current_end_hour'] = end_hour
    context.user_data['current_end_minute'] = end_minute
    
    start_hour = context.user_data['current_start_hour']
    start_minute = context.user_data['current_start_minute']
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{start_hour:02d}:{start_minute:02d}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{end_hour:02d}:{end_minute:02d}</b>\n\n"
                    "‚úÖ –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è", callback_data="confirm_schedule_time")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", callback_data="back_to_start_hour")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="back_to_end_time_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_CONFIRM

async def create_sub_end_minute_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    end_minute = int(query.data.split('_')[2])
    
    start_hour = context.user_data['current_start_hour']
    start_minute = context.user_data['current_start_minute']
    end_hour = context.user_data['current_end_hour']
    day_num = context.user_data['current_schedule_day']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
    schedule_item = {
        'day_num': day_num,
        'start_time': f"{start_hour:02d}:{start_minute:02d}",
        'end_time': f"{end_hour:02d}:{end_minute:02d}"
    }
    context.user_data['new_sub']['schedule'].append(schedule_item)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    return await create_sub_show_schedule_summary(update, context)

async def create_sub_show_schedule_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–Ω–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å."""
    query = update.callback_query
    if query:
        await query.answer()
    
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    
    schedule_text = ""
    for item in context.user_data['new_sub']['schedule']:
        day_name = day_names[item['day_num']]
        schedule_text += f"‚Ä¢ {day_name}: {item['start_time']} - {item['end_time']}\n"
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"üìã <b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n{schedule_text}\n"
                    "–ß—Ç–æ –¥–∞–ª—å—à–µ?")
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ–Ω—å", callback_data="add_another_day")],
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="create_sub_finish")],
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="create_sub_back_to_calendar")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup, parse_mode='HTML')
    
    return CREATE_SUB_SCHEDULE_DAY

async def create_sub_back_to_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
    query = update.callback_query
    await query.answer()
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    "–®–∞–≥ 9/9: –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    days_keyboard = [
        [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="schedule_day_1")],
        [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="schedule_day_2")],
        [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="schedule_day_3")],
        [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="schedule_day_4")],
        [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="schedule_day_5")],
        [InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="schedule_day_6")],
        [InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="schedule_day_7")],
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="create_sub_back_to_calendar")]
    ]
    reply_markup = InlineKeyboardMarkup(days_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_DAY

async def create_sub_back_to_start_hour(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞."""
    query = update.callback_query
    await query.answer()
    
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Å–∞–º–∏ (—Å 8:00 –¥–æ 20:00)
    time_keyboard = []
    for hour in range(8, 21):
        time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:xx", callback_data=f"start_hour_{hour}")])
    
    time_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="back_to_day_selection")])
    reply_markup = InlineKeyboardMarkup(time_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_START_HOUR

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
async def back_to_payment_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã."""
    return await create_sub_ask_for_payment_type(update, context)

async def back_to_cost_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
    return await create_sub_ask_for_cost(update, context)

async def back_to_total_classes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π."""
    return await create_sub_ask_for_total_classes(update, context)

async def back_to_remaining_classes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π."""
    return await create_sub_ask_for_remaining_classes(update, context)

async def back_to_day_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
    return await create_sub_back_to_day_selection(update, context)

async def back_to_start_hour_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞."""
    return await create_sub_back_to_start_hour(update, context)

async def back_to_start_minute_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω—É—Ç –Ω–∞—á–∞–ª–∞."""
    query = update.callback_query
    await query.answer()
    
    start_hour = context.user_data['current_start_hour']
    context.user_data['current_start_minute'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã
    
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n"
                    f"‚è∞ –ß–∞—Å –Ω–∞—á–∞–ª–∞: <b>{start_hour:02d}:xx</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∏–Ω—É—Ç–∞–º–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    minute_keyboard = []
    for minute in [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]:
        minute_keyboard.append([InlineKeyboardButton(f"{start_hour:02d}:{minute:02d}", callback_data=f"start_minute_{minute}")])
    
    minute_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–∞", callback_data="back_to_start_hour_selection")])
    reply_markup = InlineKeyboardMarkup(minute_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_START_MINUTE

async def back_to_end_hour_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    start_hour = context.user_data['current_start_hour']
    start_minute = context.user_data['current_start_minute']
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{start_hour:02d}:{start_minute:02d}</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º +30 –º–∏–Ω—É—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞)
    time_keyboard = []
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ + 30 –º–∏–Ω—É—Ç)
    min_end_hour = start_hour
    min_end_minute = start_minute + 30
    if min_end_minute >= 60:
        min_end_hour += 1
        min_end_minute -= 60
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
    for hour in range(min_end_hour, 23):
        if hour == min_end_hour:
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–∏–Ω—É—Ç—ã
            if min_end_minute == 0:
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"end_time_{hour}_0")])
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
            elif min_end_minute == 30:
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (00 –∏ 30)
            time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"end_time_{hour}_0")])
            time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
    
    time_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –º–∏–Ω—É—Ç–∞–º –Ω–∞—á–∞–ª–∞", callback_data="back_to_start_minute")])
    reply_markup = InlineKeyboardMarkup(time_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_END_HOUR

async def back_to_end_time_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    start_hour = context.user_data['current_start_hour']
    start_minute = context.user_data['current_start_minute']
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    day_num = context.user_data['current_schedule_day']
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{day_names[day_num]}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{start_hour:02d}:{start_minute:02d}</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º +30 –º–∏–Ω—É—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞)
    time_keyboard = []
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ + 30 –º–∏–Ω—É—Ç)
    min_end_hour = start_hour
    min_end_minute = start_minute + 30
    if min_end_minute >= 60:
        min_end_hour += 1
        min_end_minute -= 60
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
    for hour in range(min_end_hour, 23):
        if hour == min_end_hour:
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–∏–Ω—É—Ç—ã
            if min_end_minute == 0:
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"end_time_{hour}_0")])
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
            elif min_end_minute == 30:
                time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (00 –∏ 30)
            time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"end_time_{hour}_0")])
            time_keyboard.append([InlineKeyboardButton(f"{hour:02d}:30", callback_data=f"end_time_{hour}_30")])
    
    time_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –º–∏–Ω—É—Ç–∞–º –Ω–∞—á–∞–ª–∞", callback_data="back_to_start_minute")])
    reply_markup = InlineKeyboardMarkup(time_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_END_HOUR

async def create_sub_confirm_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    start_hour = context.user_data['current_start_hour']
    start_minute = context.user_data['current_start_minute']
    end_hour = context.user_data['current_end_hour']
    end_minute = context.user_data['current_end_minute']
    day_num = context.user_data['current_schedule_day']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if 'schedule' not in context.user_data['new_sub']:
        context.user_data['new_sub']['schedule'] = []
    
    context.user_data['new_sub']['schedule'].append({
        'day_num': day_num,
        'start_time': f"{start_hour:02d}:{start_minute:02d}",
        'end_time': f"{end_hour:02d}:{end_minute:02d}"
    })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    
    schedule_text = ""
    for item in context.user_data['new_sub']['schedule']:
        day_name = day_names[item['day_num']]
        schedule_text += f"üìÖ {day_name}: {item['start_time']} - {item['end_time']}\n"
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{context.user_data['new_sub']['child_name']}</b>\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: <b>{context.user_data['new_sub']['circle_name']}</b>\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}</b>\n\n"
                    f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{schedule_text}\n"
                    "–ß—Ç–æ –¥–∞–ª—å—à–µ?")
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ–Ω—å", callback_data="add_another_day")],
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="create_sub_finish")],
        [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="create_sub_back_to_calendar")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_DAY

async def create_sub_add_another_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
    selected_days = {item['day_num'] for item in context.user_data['new_sub']['schedule']}
    
    message_text = (f"üë§ –†–µ–±–µ–Ω–æ–∫: *{context.user_data['new_sub']['child_name']}*\n"
                    f"üé® –ö—Ä—É–∂–æ–∫: *{context.user_data['new_sub']['circle_name']}*\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: *{context.user_data['new_sub']['start_date'].strftime('%d.%m.%Y')}*\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
    day_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                 5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    
    days_keyboard = []
    for day_num, day_name in day_names.items():
        if day_num not in selected_days:
            days_keyboard.append([InlineKeyboardButton(day_name, callback_data=f"schedule_day_{day_num}")])
    
    days_keyboard.append([InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–≤–æ–¥–∫–µ", callback_data="show_schedule_summary")])
    reply_markup = InlineKeyboardMarkup(days_keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return CREATE_SUB_SCHEDULE_DAY

async def create_sub_finish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç...")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        sub_data = context.user_data['new_sub']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        if not sub_data.get('schedule') or len(sub_data['schedule']) == 0:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ —Å–æ–∑–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data="show_schedule_summary")]])
            )
            return CREATE_SUB_SCHEDULE_DAY
        
        # –°–æ–∑–¥–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        result_message = sheets_service.create_full_subscription(sub_data)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(update_after_subscription_creation())
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
        result_message += "\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ."
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π", callback_data="menu_calendar")],
            [InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", callback_data="menu_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(result_message, reply_markup=reply_markup)
        return MAIN_MENU
        
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}"
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_sub_finish")],
            [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="menu_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(error_message, reply_markup=reply_markup)
        return CREATE_SUB_SCHEDULE_DAY

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    message_text = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.'
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(message_text)
    else:
        if update.message: await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text)
        
    start_update = type('obj', (object,), {'callback_query': None, 'message': update.effective_message, 'effective_chat': update.effective_chat})
    await start(start_update, context)
    return ConversationHandler.END

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def cancel_notification_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö - —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏—è"""
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º lesson_id –∏–∑ callback_data
        lesson_id = query.data.replace("cancel_notification_", "")
        
        logging.info(f"‚ùå –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è ID: {lesson_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏—è
        await query.message.delete()
        
        logging.info(f"üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} —É–¥–∞–ª–µ–Ω–æ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏—è")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler)
        return NOTIFICATION_TIME_SETTINGS
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)
        except:
            pass
        
        return NOTIFICATION_TIME_SETTINGS

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω—ã - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ /start ===

# === –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –≤ ConversationHandler ===
def create_conversation_handler() -> ConversationHandler:
    logging.info("üîß –°–æ–∑–¥–∞—é ConversationHandler —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏...")
    logging.info("üìã MAIN_MENU –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
    logging.info("  - CallbackQueryHandler(main_menu_handler, pattern='^menu_')")
    logging.info("  - CallbackQueryHandler(forecast_subscription_handler, pattern='^forecast_sub_')")
    logging.info("  - CallbackQueryHandler(mark_payment_paid_handler, pattern='^mark_payment_')")
    logging.info("  - CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_') ‚Üê –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤
    from telegram.ext import CallbackQueryHandler as CQH
    
    return ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu_handler, pattern='^menu_'),
                CallbackQueryHandler(sync_google_calendar_handler, pattern='^sync_google_calendar$'),
                CallbackQueryHandler(sync_google_forecast_handler, pattern='^sync_google_forecast$'),
                CallbackQueryHandler(clean_duplicates_handler, pattern='^clean_duplicates$'),
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(forecast_subscription_handler, pattern='^forecast_sub_'),
                CallbackQueryHandler(mark_payment_paid_handler, pattern='^mark_payment_'),
                CallbackQueryHandler(renewal_subscription_handler, pattern='^renew_subscription_'),
                CallbackQueryHandler(force_refresh_all_data, pattern='^force_refresh_data$'),
                CallbackQueryHandler(go_back_to_main_menu, pattern='^refresh_main_menu$'),
                CallbackQueryHandler(go_back_to_main_menu, pattern='^main_menu$'),
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback'–æ–≤ –≤ MAIN_MENU
                CallbackQueryHandler(debug_callback_handler),
            ],
            # --- State machine for Settings ---
            SETTINGS_MENU: [
                CallbackQueryHandler(settings_show_category_items, pattern='^settings_cat_'),
                CallbackQueryHandler(notification_settings_handler, pattern='^notification_settings$'),
                CallbackQueryHandler(test_notifications_handler, pattern='^test_notifications$'),
                CallbackQueryHandler(sync_google_calendar_handler, pattern='^sync_google_calendar$'),
                CallbackQueryHandler(sync_google_forecast_handler, pattern='^sync_google_forecast$'),
                CallbackQueryHandler(clean_duplicates_handler, pattern='^clean_duplicates$'),
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(update_stats_menu_handler, pattern='^menu_update_stats$'),
                CallbackQueryHandler(update_subscriptions_menu_handler, pattern='^menu_update_subscriptions$'),
                CallbackQueryHandler(go_back_to_main_menu, pattern='^main_menu$'),
            ],
            NOTIFICATION_TIME_SETTINGS: [
                CallbackQueryHandler(set_notification_time_handler, pattern='^set_notification_time_'),
                CallbackQueryHandler(disable_notifications_handler, pattern='^disable_notifications$'),
                CallbackQueryHandler(test_notifications_handler, pattern='^test_notifications$'),  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç"
                CallbackQueryHandler(notification_settings_handler, pattern='^notification_settings$'),  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(settings_menu, pattern='^menu_settings$'),
            ],
            SHOW_CATEGORY_ITEMS: [
                CallbackQueryHandler(show_category_items_handler, pattern='^settings_'),
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(settings_menu, pattern='^menu_settings$'),
            ],
            ADD_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_item_handler)],
            MANAGE_SINGLE_ITEM: [
                CallbackQueryHandler(manage_single_item_handler, pattern='^settings_'),
                CallbackQueryHandler(settings_show_category_items, pattern='^settings_cat_')
            ],
            GET_NEW_VALUE_FOR_EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_new_value_for_edit_handler)],
            CONFIRM_DELETE_ITEM: [
                CallbackQueryHandler(confirm_delete_item_handler, pattern='^settings_confirm_delete$'),
                CallbackQueryHandler(show_category_items_handler, pattern='^settings_select_item_') 
            ],

            # --- State machine for Subscriptions ---
            SELECT_SUBSCRIPTION: [
                CallbackQueryHandler(select_subscription_handler, pattern='^select_sub_'),
                CallbackQueryHandler(create_sub_start, pattern='^sub_create$'),
                CallbackQueryHandler(go_back_to_main_menu, pattern='^main_menu$'),
                CallbackQueryHandler(subscriptions_menu, pattern='^menu_subscriptions$') 
            ],
            MANAGE_SUBSCRIPTION: [
                CallbackQueryHandler(manage_subscription_handler, pattern='^(edit_sub|duplicate_sub|update_stats_sub|delete_sub)$'),
                CallbackQueryHandler(calendar_menu, pattern='^menu_calendar$'),
                CallbackQueryHandler(subscriptions_menu, pattern='^menu_subscriptions$'),
                CallbackQueryHandler(select_subscription_handler, pattern='^select_sub_')
            ],
            CONFIRM_DELETE_SUBSCRIPTION: [
                CallbackQueryHandler(confirm_delete_subscription_handler, pattern='^confirm_delete_yes$'),
                CallbackQueryHandler(select_subscription_handler, pattern='^select_sub_')
            ],
            # --- Subscription Creation States ---
            CREATE_SUB_CHILD: [
                CallbackQueryHandler(create_sub_child_handler, pattern='^create_sub_'),
                CallbackQueryHandler(subscriptions_menu, pattern='^menu_subscriptions$'),
            ],
            CREATE_SUB_GET_CHILD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_sub_get_child_name_handler)],
            CREATE_SUB_CIRCLE: [
                CallbackQueryHandler(create_sub_circle_handler, pattern='^create_sub_'),
                CallbackQueryHandler(create_sub_start, pattern='^sub_create$'), 
            ],
            CREATE_SUB_GET_CIRCLE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_sub_get_circle_name_handler)],
            CREATE_SUB_TYPE: [
                CallbackQueryHandler(create_sub_type_handler, pattern='^create_sub_type_'),
                CallbackQueryHandler(create_sub_circle_handler, pattern='^create_sub_child_')
            ],
            CREATE_SUB_PAYMENT_TYPE: [
                CallbackQueryHandler(create_sub_payment_type_handler, pattern='^create_sub_payment_'),
                CallbackQueryHandler(create_sub_ask_for_type, pattern='^back_to_sub_type$')
            ],
            CREATE_SUB_COST: [
                CallbackQueryHandler(create_sub_cost_handler, pattern='^create_sub_cost_'),
                CallbackQueryHandler(back_to_payment_type_handler, pattern='^back_to_payment_type$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_sub_cost_text_handler)
            ],
            CREATE_SUB_TOTAL_CLASSES: [
                CallbackQueryHandler(create_sub_total_classes_handler, pattern='^create_sub_total_'),
                CallbackQueryHandler(back_to_cost_handler, pattern='^back_to_cost$')
            ],
            CREATE_SUB_REMAINING_CLASSES: [
                CallbackQueryHandler(create_sub_remaining_classes_handler, pattern='^create_sub_remaining_'),
                CallbackQueryHandler(back_to_total_classes_handler, pattern='^back_to_total_classes$')
            ],
            CREATE_SUB_START_DATE_MONTH: [
                CallbackQueryHandler(create_sub_calendar_handler, pattern='^cal_'),
                CallbackQueryHandler(back_to_remaining_classes_handler, pattern='^back_to_remaining_classes$'),
                CallbackQueryHandler(subscriptions_menu, pattern='^menu_subscriptions$')
            ],
            CREATE_SUB_SCHEDULE_DAY: [
                CallbackQueryHandler(create_sub_schedule_day_handler, pattern='^schedule_day_'),
                CallbackQueryHandler(create_sub_back_to_calendar_handler, pattern='^create_sub_back_to_calendar$'),
                CallbackQueryHandler(create_sub_show_schedule_summary, pattern='^show_schedule_summary$'),
                CallbackQueryHandler(create_sub_add_another_day, pattern='^add_another_day$'),
                CallbackQueryHandler(create_sub_finish_handler, pattern='^create_sub_finish$'),
                CallbackQueryHandler(subscriptions_menu, pattern='^menu_subscriptions$')
            ],
            CREATE_SUB_SCHEDULE_START_HOUR: [
                CallbackQueryHandler(create_sub_start_hour_handler, pattern='^start_hour_'),
                CallbackQueryHandler(back_to_day_selection_handler, pattern='^back_to_day_selection$')
            ],
            CREATE_SUB_SCHEDULE_START_MINUTE: [
                CallbackQueryHandler(create_sub_start_minute_handler, pattern='^start_minute_'),
                CallbackQueryHandler(back_to_start_hour_selection_handler, pattern='^back_to_start_hour_selection$')
            ],
            CREATE_SUB_SCHEDULE_END_HOUR: [
                CallbackQueryHandler(create_sub_end_hour_handler, pattern='^end_time_'),
                CallbackQueryHandler(back_to_start_minute_handler, pattern='^back_to_start_minute$')
            ],
            CREATE_SUB_SCHEDULE_END_MINUTE: [
                CallbackQueryHandler(create_sub_end_minute_handler, pattern='^end_minute_'),
                CallbackQueryHandler(back_to_end_hour_selection_handler, pattern='^back_to_end_hour_selection$')
            ],
            CREATE_SUB_SCHEDULE_CONFIRM: [
                CallbackQueryHandler(create_sub_confirm_schedule_handler, pattern='^confirm_schedule_time$'),
                CallbackQueryHandler(create_sub_start_hour_handler, pattern='^back_to_start_hour$'),
                CallbackQueryHandler(back_to_end_time_selection_handler, pattern='^back_to_end_time_selection$')
            ],
            
            # Calendar states
            INTERACTIVE_CALENDAR: [
                CallbackQueryHandler(calendar_navigation_handler, pattern='^(calendar_nav_|calendar_today)'),
                CallbackQueryHandler(select_calendar_date, pattern='^calendar_date_'),
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(start, pattern='^(start|main_menu)$'),
                CallbackQueryHandler(calendar_menu, pattern='^menu_calendar$')
            ],
            SELECT_LESSON_FROM_DATE: [
                CallbackQueryHandler(select_lesson_from_date, pattern='^lesson_select_'),
                CallbackQueryHandler(select_calendar_date, pattern='^calendar_date_'),
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(calendar_menu, pattern='^menu_calendar$')
            ],
            SELECT_ATTENDANCE_MARK: [
                CallbackQueryHandler(save_attendance_mark, pattern='^attendance_mark_'),
                CallbackQueryHandler(cancel_notification_handler, pattern='^cancel_notification_'),  # –î–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                CallbackQueryHandler(select_calendar_date, pattern='^calendar_date_'),
                CallbackQueryHandler(calendar_menu, pattern='^menu_calendar$')
            ],
            
            # Subscription Renewal states
            RENEWAL_SELECT_DATE_TYPE: [
                CallbackQueryHandler(renewal_date_type_handler, pattern='^(renewal_use_date_|renewal_select_custom_date)'),
                CallbackQueryHandler(forecast_subscription_handler, pattern='^forecast_sub_')
            ],
            RENEWAL_SELECT_CUSTOM_DATE: [
                CallbackQueryHandler(renewal_custom_date_handler, pattern='^(cal_day_|cal_month_)'),
                CallbackQueryHandler(renewal_date_type_handler, pattern='^renewal_select_custom_date$')
            ],
            RENEWAL_CONFIRM: [
                CallbackQueryHandler(renewal_create_handler, pattern='^renewal_confirm_create$'),
                CallbackQueryHandler(renewal_date_type_handler, pattern='^renewal_select_custom_date$'),
                CallbackQueryHandler(forecast_subscription_handler, pattern='^forecast_sub_')
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel), 
            CommandHandler('start', start),
        ],
        allow_reentry=True,
    )

async def dashboard_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    message_text = """üìä <b>–î–∞—à–±–æ—Ä–¥</b>

üåê <b>–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>
–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://127.0.0.1:5000

üì± <b>–î–ª—è Telegram Mini App:</b>
–¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram.

üîß <b>–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–∞—à–±–æ—Ä–¥–µ:</b>
‚Ä¢ üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏  
‚Ä¢ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º
‚Ä¢ üìÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
‚Ä¢ üéØ –§–∏–ª—å—Ç—Ä—ã –ø–æ —É—á–µ–Ω–∏–∫–∞–º

üí° <b>–°–æ–≤–µ—Ç:</b> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É."""

    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url="http://127.0.0.1:5000")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    return MAIN_MENU

